
SPEEDlimitSTM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090d0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  080091e0  080091e0  0000a1e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009634  08009634  0000b1f4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009634  08009634  0000a634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800963c  0800963c  0000b1f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800963c  0800963c  0000a63c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009640  08009640  0000a640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  08009644  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  200001f4  08009838  0000b1f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000468  08009838  0000b468  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010934  00000000  00000000  0000b21d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000287e  00000000  00000000  0001bb51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001060  00000000  00000000  0001e3d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cd5  00000000  00000000  0001f430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019798  00000000  00000000  00020105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000152ee  00000000  00000000  0003989d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f01c  00000000  00000000  0004eb8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ddba7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005610  00000000  00000000  000ddbec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000e31fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f4 	.word	0x200001f4
 800012c:	00000000 	.word	0x00000000
 8000130:	080091c8 	.word	0x080091c8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f8 	.word	0x200001f8
 800014c:	080091c8 	.word	0x080091c8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001b2:	2afd      	cmp	r2, #253	@ 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	@ 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	@ 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_frsub>:
 8000bf0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bf4:	e002      	b.n	8000bfc <__addsf3>
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_fsub>:
 8000bf8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bfc <__addsf3>:
 8000bfc:	0042      	lsls	r2, r0, #1
 8000bfe:	bf1f      	itttt	ne
 8000c00:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c04:	ea92 0f03 	teqne	r2, r3
 8000c08:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c0c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c10:	d06a      	beq.n	8000ce8 <__addsf3+0xec>
 8000c12:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c16:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c1a:	bfc1      	itttt	gt
 8000c1c:	18d2      	addgt	r2, r2, r3
 8000c1e:	4041      	eorgt	r1, r0
 8000c20:	4048      	eorgt	r0, r1
 8000c22:	4041      	eorgt	r1, r0
 8000c24:	bfb8      	it	lt
 8000c26:	425b      	neglt	r3, r3
 8000c28:	2b19      	cmp	r3, #25
 8000c2a:	bf88      	it	hi
 8000c2c:	4770      	bxhi	lr
 8000c2e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c36:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c3a:	bf18      	it	ne
 8000c3c:	4240      	negne	r0, r0
 8000c3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c42:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c46:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c4a:	bf18      	it	ne
 8000c4c:	4249      	negne	r1, r1
 8000c4e:	ea92 0f03 	teq	r2, r3
 8000c52:	d03f      	beq.n	8000cd4 <__addsf3+0xd8>
 8000c54:	f1a2 0201 	sub.w	r2, r2, #1
 8000c58:	fa41 fc03 	asr.w	ip, r1, r3
 8000c5c:	eb10 000c 	adds.w	r0, r0, ip
 8000c60:	f1c3 0320 	rsb	r3, r3, #32
 8000c64:	fa01 f103 	lsl.w	r1, r1, r3
 8000c68:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6c:	d502      	bpl.n	8000c74 <__addsf3+0x78>
 8000c6e:	4249      	negs	r1, r1
 8000c70:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c74:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c78:	d313      	bcc.n	8000ca2 <__addsf3+0xa6>
 8000c7a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c7e:	d306      	bcc.n	8000c8e <__addsf3+0x92>
 8000c80:	0840      	lsrs	r0, r0, #1
 8000c82:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c86:	f102 0201 	add.w	r2, r2, #1
 8000c8a:	2afe      	cmp	r2, #254	@ 0xfe
 8000c8c:	d251      	bcs.n	8000d32 <__addsf3+0x136>
 8000c8e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c92:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c96:	bf08      	it	eq
 8000c98:	f020 0001 	biceq.w	r0, r0, #1
 8000c9c:	ea40 0003 	orr.w	r0, r0, r3
 8000ca0:	4770      	bx	lr
 8000ca2:	0049      	lsls	r1, r1, #1
 8000ca4:	eb40 0000 	adc.w	r0, r0, r0
 8000ca8:	3a01      	subs	r2, #1
 8000caa:	bf28      	it	cs
 8000cac:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000cb0:	d2ed      	bcs.n	8000c8e <__addsf3+0x92>
 8000cb2:	fab0 fc80 	clz	ip, r0
 8000cb6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cba:	ebb2 020c 	subs.w	r2, r2, ip
 8000cbe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cc2:	bfaa      	itet	ge
 8000cc4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cc8:	4252      	neglt	r2, r2
 8000cca:	4318      	orrge	r0, r3
 8000ccc:	bfbc      	itt	lt
 8000cce:	40d0      	lsrlt	r0, r2
 8000cd0:	4318      	orrlt	r0, r3
 8000cd2:	4770      	bx	lr
 8000cd4:	f092 0f00 	teq	r2, #0
 8000cd8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000cdc:	bf06      	itte	eq
 8000cde:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000ce2:	3201      	addeq	r2, #1
 8000ce4:	3b01      	subne	r3, #1
 8000ce6:	e7b5      	b.n	8000c54 <__addsf3+0x58>
 8000ce8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf0:	bf18      	it	ne
 8000cf2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf6:	d021      	beq.n	8000d3c <__addsf3+0x140>
 8000cf8:	ea92 0f03 	teq	r2, r3
 8000cfc:	d004      	beq.n	8000d08 <__addsf3+0x10c>
 8000cfe:	f092 0f00 	teq	r2, #0
 8000d02:	bf08      	it	eq
 8000d04:	4608      	moveq	r0, r1
 8000d06:	4770      	bx	lr
 8000d08:	ea90 0f01 	teq	r0, r1
 8000d0c:	bf1c      	itt	ne
 8000d0e:	2000      	movne	r0, #0
 8000d10:	4770      	bxne	lr
 8000d12:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d16:	d104      	bne.n	8000d22 <__addsf3+0x126>
 8000d18:	0040      	lsls	r0, r0, #1
 8000d1a:	bf28      	it	cs
 8000d1c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d20:	4770      	bx	lr
 8000d22:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d26:	bf3c      	itt	cc
 8000d28:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d2c:	4770      	bxcc	lr
 8000d2e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d32:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d36:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d3a:	4770      	bx	lr
 8000d3c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d40:	bf16      	itet	ne
 8000d42:	4608      	movne	r0, r1
 8000d44:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d48:	4601      	movne	r1, r0
 8000d4a:	0242      	lsls	r2, r0, #9
 8000d4c:	bf06      	itte	eq
 8000d4e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d52:	ea90 0f01 	teqeq	r0, r1
 8000d56:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d5a:	4770      	bx	lr

08000d5c <__aeabi_ui2f>:
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	e004      	b.n	8000d6c <__aeabi_i2f+0x8>
 8000d62:	bf00      	nop

08000d64 <__aeabi_i2f>:
 8000d64:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d68:	bf48      	it	mi
 8000d6a:	4240      	negmi	r0, r0
 8000d6c:	ea5f 0c00 	movs.w	ip, r0
 8000d70:	bf08      	it	eq
 8000d72:	4770      	bxeq	lr
 8000d74:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d78:	4601      	mov	r1, r0
 8000d7a:	f04f 0000 	mov.w	r0, #0
 8000d7e:	e01c      	b.n	8000dba <__aeabi_l2f+0x2a>

08000d80 <__aeabi_ul2f>:
 8000d80:	ea50 0201 	orrs.w	r2, r0, r1
 8000d84:	bf08      	it	eq
 8000d86:	4770      	bxeq	lr
 8000d88:	f04f 0300 	mov.w	r3, #0
 8000d8c:	e00a      	b.n	8000da4 <__aeabi_l2f+0x14>
 8000d8e:	bf00      	nop

08000d90 <__aeabi_l2f>:
 8000d90:	ea50 0201 	orrs.w	r2, r0, r1
 8000d94:	bf08      	it	eq
 8000d96:	4770      	bxeq	lr
 8000d98:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d9c:	d502      	bpl.n	8000da4 <__aeabi_l2f+0x14>
 8000d9e:	4240      	negs	r0, r0
 8000da0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da4:	ea5f 0c01 	movs.w	ip, r1
 8000da8:	bf02      	ittt	eq
 8000daa:	4684      	moveq	ip, r0
 8000dac:	4601      	moveq	r1, r0
 8000dae:	2000      	moveq	r0, #0
 8000db0:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000db4:	bf08      	it	eq
 8000db6:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000dba:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000dbe:	fabc f28c 	clz	r2, ip
 8000dc2:	3a08      	subs	r2, #8
 8000dc4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dc8:	db10      	blt.n	8000dec <__aeabi_l2f+0x5c>
 8000dca:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dce:	4463      	add	r3, ip
 8000dd0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd4:	f1c2 0220 	rsb	r2, r2, #32
 8000dd8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000ddc:	fa20 f202 	lsr.w	r2, r0, r2
 8000de0:	eb43 0002 	adc.w	r0, r3, r2
 8000de4:	bf08      	it	eq
 8000de6:	f020 0001 	biceq.w	r0, r0, #1
 8000dea:	4770      	bx	lr
 8000dec:	f102 0220 	add.w	r2, r2, #32
 8000df0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000df4:	f1c2 0220 	rsb	r2, r2, #32
 8000df8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dfc:	fa21 f202 	lsr.w	r2, r1, r2
 8000e00:	eb43 0002 	adc.w	r0, r3, r2
 8000e04:	bf08      	it	eq
 8000e06:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_f2uiz>:
 8000e0c:	0042      	lsls	r2, r0, #1
 8000e0e:	d20e      	bcs.n	8000e2e <__aeabi_f2uiz+0x22>
 8000e10:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000e14:	d30b      	bcc.n	8000e2e <__aeabi_f2uiz+0x22>
 8000e16:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000e1a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e1e:	d409      	bmi.n	8000e34 <__aeabi_f2uiz+0x28>
 8000e20:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e24:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000e28:	fa23 f002 	lsr.w	r0, r3, r2
 8000e2c:	4770      	bx	lr
 8000e2e:	f04f 0000 	mov.w	r0, #0
 8000e32:	4770      	bx	lr
 8000e34:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000e38:	d101      	bne.n	8000e3e <__aeabi_f2uiz+0x32>
 8000e3a:	0242      	lsls	r2, r0, #9
 8000e3c:	d102      	bne.n	8000e44 <__aeabi_f2uiz+0x38>
 8000e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8000e42:	4770      	bx	lr
 8000e44:	f04f 0000 	mov.w	r0, #0
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop

08000e4c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b088      	sub	sp, #32
 8000e50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e52:	f107 0310 	add.w	r3, r7, #16
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]
 8000e5e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e60:	4b23      	ldr	r3, [pc, #140]	@ (8000ef0 <MX_GPIO_Init+0xa4>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	4a22      	ldr	r2, [pc, #136]	@ (8000ef0 <MX_GPIO_Init+0xa4>)
 8000e66:	f043 0320 	orr.w	r3, r3, #32
 8000e6a:	6193      	str	r3, [r2, #24]
 8000e6c:	4b20      	ldr	r3, [pc, #128]	@ (8000ef0 <MX_GPIO_Init+0xa4>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	f003 0320 	and.w	r3, r3, #32
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e78:	4b1d      	ldr	r3, [pc, #116]	@ (8000ef0 <MX_GPIO_Init+0xa4>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	4a1c      	ldr	r2, [pc, #112]	@ (8000ef0 <MX_GPIO_Init+0xa4>)
 8000e7e:	f043 0304 	orr.w	r3, r3, #4
 8000e82:	6193      	str	r3, [r2, #24]
 8000e84:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef0 <MX_GPIO_Init+0xa4>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	f003 0304 	and.w	r3, r3, #4
 8000e8c:	60bb      	str	r3, [r7, #8]
 8000e8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e90:	4b17      	ldr	r3, [pc, #92]	@ (8000ef0 <MX_GPIO_Init+0xa4>)
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	4a16      	ldr	r2, [pc, #88]	@ (8000ef0 <MX_GPIO_Init+0xa4>)
 8000e96:	f043 0308 	orr.w	r3, r3, #8
 8000e9a:	6193      	str	r3, [r2, #24]
 8000e9c:	4b14      	ldr	r3, [pc, #80]	@ (8000ef0 <MX_GPIO_Init+0xa4>)
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	f003 0308 	and.w	r3, r3, #8
 8000ea4:	607b      	str	r3, [r7, #4]
 8000ea6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2130      	movs	r1, #48	@ 0x30
 8000eac:	4811      	ldr	r0, [pc, #68]	@ (8000ef4 <MX_GPIO_Init+0xa8>)
 8000eae:	f001 f9dc 	bl	800226a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000eb2:	2330      	movs	r3, #48	@ 0x30
 8000eb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec2:	f107 0310 	add.w	r3, r7, #16
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	480a      	ldr	r0, [pc, #40]	@ (8000ef4 <MX_GPIO_Init+0xa8>)
 8000eca:	f001 f833 	bl	8001f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000ece:	2338      	movs	r3, #56	@ 0x38
 8000ed0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eda:	f107 0310 	add.w	r3, r7, #16
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4805      	ldr	r0, [pc, #20]	@ (8000ef8 <MX_GPIO_Init+0xac>)
 8000ee2:	f001 f827 	bl	8001f34 <HAL_GPIO_Init>

}
 8000ee6:	bf00      	nop
 8000ee8:	3720      	adds	r7, #32
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40021000 	.word	0x40021000
 8000ef4:	40010800 	.word	0x40010800
 8000ef8:	40010c00 	.word	0x40010c00

08000efc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f00:	4b12      	ldr	r3, [pc, #72]	@ (8000f4c <MX_I2C1_Init+0x50>)
 8000f02:	4a13      	ldr	r2, [pc, #76]	@ (8000f50 <MX_I2C1_Init+0x54>)
 8000f04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f06:	4b11      	ldr	r3, [pc, #68]	@ (8000f4c <MX_I2C1_Init+0x50>)
 8000f08:	4a12      	ldr	r2, [pc, #72]	@ (8000f54 <MX_I2C1_Init+0x58>)
 8000f0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f4c <MX_I2C1_Init+0x50>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f12:	4b0e      	ldr	r3, [pc, #56]	@ (8000f4c <MX_I2C1_Init+0x50>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f18:	4b0c      	ldr	r3, [pc, #48]	@ (8000f4c <MX_I2C1_Init+0x50>)
 8000f1a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f1e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f20:	4b0a      	ldr	r3, [pc, #40]	@ (8000f4c <MX_I2C1_Init+0x50>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f26:	4b09      	ldr	r3, [pc, #36]	@ (8000f4c <MX_I2C1_Init+0x50>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f2c:	4b07      	ldr	r3, [pc, #28]	@ (8000f4c <MX_I2C1_Init+0x50>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f32:	4b06      	ldr	r3, [pc, #24]	@ (8000f4c <MX_I2C1_Init+0x50>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f38:	4804      	ldr	r0, [pc, #16]	@ (8000f4c <MX_I2C1_Init+0x50>)
 8000f3a:	f001 f9af 	bl	800229c <HAL_I2C_Init>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f44:	f000 fb13 	bl	800156e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f48:	bf00      	nop
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20000210 	.word	0x20000210
 8000f50:	40005400 	.word	0x40005400
 8000f54:	000186a0 	.word	0x000186a0

08000f58 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b088      	sub	sp, #32
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	f107 0310 	add.w	r3, r7, #16
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a1d      	ldr	r2, [pc, #116]	@ (8000fe8 <HAL_I2C_MspInit+0x90>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d133      	bne.n	8000fe0 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f78:	4b1c      	ldr	r3, [pc, #112]	@ (8000fec <HAL_I2C_MspInit+0x94>)
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	4a1b      	ldr	r2, [pc, #108]	@ (8000fec <HAL_I2C_MspInit+0x94>)
 8000f7e:	f043 0308 	orr.w	r3, r3, #8
 8000f82:	6193      	str	r3, [r2, #24]
 8000f84:	4b19      	ldr	r3, [pc, #100]	@ (8000fec <HAL_I2C_MspInit+0x94>)
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	f003 0308 	and.w	r3, r3, #8
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f90:	23c0      	movs	r3, #192	@ 0xc0
 8000f92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f94:	2312      	movs	r3, #18
 8000f96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f9c:	f107 0310 	add.w	r3, r7, #16
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4813      	ldr	r0, [pc, #76]	@ (8000ff0 <HAL_I2C_MspInit+0x98>)
 8000fa4:	f000 ffc6 	bl	8001f34 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fa8:	4b10      	ldr	r3, [pc, #64]	@ (8000fec <HAL_I2C_MspInit+0x94>)
 8000faa:	69db      	ldr	r3, [r3, #28]
 8000fac:	4a0f      	ldr	r2, [pc, #60]	@ (8000fec <HAL_I2C_MspInit+0x94>)
 8000fae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000fb2:	61d3      	str	r3, [r2, #28]
 8000fb4:	4b0d      	ldr	r3, [pc, #52]	@ (8000fec <HAL_I2C_MspInit+0x94>)
 8000fb6:	69db      	ldr	r3, [r3, #28]
 8000fb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fbc:	60bb      	str	r3, [r7, #8]
 8000fbe:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	201f      	movs	r0, #31
 8000fc6:	f000 febe 	bl	8001d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000fca:	201f      	movs	r0, #31
 8000fcc:	f000 fed7 	bl	8001d7e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	2020      	movs	r0, #32
 8000fd6:	f000 feb6 	bl	8001d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000fda:	2020      	movs	r0, #32
 8000fdc:	f000 fecf 	bl	8001d7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000fe0:	bf00      	nop
 8000fe2:	3720      	adds	r7, #32
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40005400 	.word	0x40005400
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	40010c00 	.word	0x40010c00

08000ff4 <i2c_write_byte>:
/**
  * @brief  Mengirimkan byte data melalui I2C ke PCF8574.
  * @param  data Byte data yang akan dikirim.
  * @retval None
  */
static void i2c_write_byte(uint8_t data) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af02      	add	r7, sp, #8
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
    // Timeout untuk transmisi I2C. Default HAL adalah 100ms.
    // Jika I2C Anda sering macet, periksa kembali wiring atau pull-up resistor.
    HAL_I2C_Master_Transmit(i2c_handle_global, LCD_ADDR, &data, 1, 1000); // BUG FIX: Meningkatkan timeout I2C ke 1 detik
 8000ffe:	4b07      	ldr	r3, [pc, #28]	@ (800101c <i2c_write_byte+0x28>)
 8001000:	6818      	ldr	r0, [r3, #0]
 8001002:	1dfa      	adds	r2, r7, #7
 8001004:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001008:	9300      	str	r3, [sp, #0]
 800100a:	2301      	movs	r3, #1
 800100c:	214e      	movs	r1, #78	@ 0x4e
 800100e:	f001 fa9d 	bl	800254c <HAL_I2C_Master_Transmit>
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000264 	.word	0x20000264

08001020 <lcd_send_4bit>:
  * @brief  Mengirimkan nibble (4-bit) ke LCD dan melakukan toggle EN.
  * @param  nibble Nibble yang akan dikirim.
  * @param  mode Mode pengiriman (RS - Register Select).
  * @retval None
  */
void lcd_send_4bit(uint8_t nibble, uint8_t mode) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	460a      	mov	r2, r1
 800102a:	71fb      	strb	r3, [r7, #7]
 800102c:	4613      	mov	r3, r2
 800102e:	71bb      	strb	r3, [r7, #6]
    uint8_t data_to_send = (nibble & 0xF0) | mode | _backlightval;
 8001030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001034:	f023 030f 	bic.w	r3, r3, #15
 8001038:	b25a      	sxtb	r2, r3
 800103a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800103e:	4313      	orrs	r3, r2
 8001040:	b25a      	sxtb	r2, r3
 8001042:	4b12      	ldr	r3, [pc, #72]	@ (800108c <lcd_send_4bit+0x6c>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	b25b      	sxtb	r3, r3
 8001048:	4313      	orrs	r3, r2
 800104a:	b25b      	sxtb	r3, r3
 800104c:	73fb      	strb	r3, [r7, #15]
    i2c_write_byte(data_to_send);        // Kirim data
 800104e:	7bfb      	ldrb	r3, [r7, #15]
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ffcf 	bl	8000ff4 <i2c_write_byte>
    HAL_Delay(10); // BUG FIX: Menambah delay setelah data dikirim
 8001056:	200a      	movs	r0, #10
 8001058:	f000 fd7a 	bl	8001b50 <HAL_Delay>
    i2c_write_byte(data_to_send | 0x04); // Set EN HIGH (bit 2)
 800105c:	7bfb      	ldrb	r3, [r7, #15]
 800105e:	f043 0304 	orr.w	r3, r3, #4
 8001062:	b2db      	uxtb	r3, r3
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff ffc5 	bl	8000ff4 <i2c_write_byte>
    HAL_Delay(10);                       // BUG FIX: Menambah delay untuk pulsa EN agar sangat stabil
 800106a:	200a      	movs	r0, #10
 800106c:	f000 fd70 	bl	8001b50 <HAL_Delay>
    i2c_write_byte(data_to_send & ~0x04); // Set EN LOW
 8001070:	7bfb      	ldrb	r3, [r7, #15]
 8001072:	f023 0304 	bic.w	r3, r3, #4
 8001076:	b2db      	uxtb	r3, r3
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff ffbb 	bl	8000ff4 <i2c_write_byte>
    HAL_Delay(20);                       // BUG FIX: Menambah delay setelah pulsa EN agar sangat stabil
 800107e:	2014      	movs	r0, #20
 8001080:	f000 fd66 	bl	8001b50 <HAL_Delay>
}
 8001084:	bf00      	nop
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	2000026c 	.word	0x2000026c

08001090 <lcd_send_cmd>:
/**
  * @brief  Mengirimkan perintah ke LCD.
  * @param  cmd Perintah yang akan dikirim (8-bit).
  * @retval None
  */
void lcd_send_cmd(uint8_t cmd) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	71fb      	strb	r3, [r7, #7]
    lcd_send_4bit(cmd & 0xF0, 0x00); // Kirim 4 bit tinggi (RS=0 untuk perintah)
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	f023 030f 	bic.w	r3, r3, #15
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	2100      	movs	r1, #0
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff ffbb 	bl	8001020 <lcd_send_4bit>
    lcd_send_4bit(cmd << 4, 0x00);   // Kirim 4 bit rendah (geser ke atas)
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	011b      	lsls	r3, r3, #4
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	2100      	movs	r1, #0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff ffb4 	bl	8001020 <lcd_send_4bit>
    HAL_Delay(10); // BUG FIX: Tambahan delay setelah setiap perintah
 80010b8:	200a      	movs	r0, #10
 80010ba:	f000 fd49 	bl	8001b50 <HAL_Delay>
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <lcd_send_data>:
/**
  * @brief  Mengirimkan karakter data ke LCD.
  * @param  data Karakter data yang akan dikirim (8-bit).
  * @retval None
  */
void lcd_send_data(uint8_t data) {
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	4603      	mov	r3, r0
 80010ce:	71fb      	strb	r3, [r7, #7]
    lcd_send_4bit(data & 0xF0, 0x01); // Kirim 4 bit tinggi (RS=1 untuk data)
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	f023 030f 	bic.w	r3, r3, #15
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	2101      	movs	r1, #1
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff ffa0 	bl	8001020 <lcd_send_4bit>
    lcd_send_4bit(data << 4, 0x01);   // Kirim 4 bit rendah (geser ke atas)
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	011b      	lsls	r3, r3, #4
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	2101      	movs	r1, #1
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff ff99 	bl	8001020 <lcd_send_4bit>
    HAL_Delay(10); // BUG FIX: Tambahan delay setelah setiap data
 80010ee:	200a      	movs	r0, #10
 80010f0:	f000 fd2e 	bl	8001b50 <HAL_Delay>
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <lcd_init>:
/**
  * @brief  Menginisialisasi modul LCD I2C.
  * @param  hi2c Pointer ke handler I2C.
  * @retval None
  */
void lcd_init(I2C_HandleTypeDef *hi2c) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
    i2c_handle_global = hi2c; // Simpan handler I2C global
 8001104:	4a2d      	ldr	r2, [pc, #180]	@ (80011bc <lcd_init+0xc0>)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6013      	str	r3, [r2, #0]

    // Konfigurasi awal untuk LCD 16x2 (paling umum)
    // Jika Anda menggunakan LCD 20x4, Anda perlu mengubah _displayfunction dan _numlines:
    // _displayfunction = LCD_4BITMODE | LCD_2LINE | LCD_5x10DOTS; // Untuk 20x4 LCD
    // _numlines = 4; // Untuk 20x4 LCD, dan row_offsets perlu 0x00, 0x40, 0x14, 0x54
    _displayfunction = LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS; // Default 16x2
 800110a:	4b2d      	ldr	r3, [pc, #180]	@ (80011c0 <lcd_init+0xc4>)
 800110c:	2208      	movs	r2, #8
 800110e:	701a      	strb	r2, [r3, #0]
    _numlines = 2; // Untuk 16x2 LCD
 8001110:	4b2c      	ldr	r3, [pc, #176]	@ (80011c4 <lcd_init+0xc8>)
 8001112:	2202      	movs	r2, #2
 8001114:	701a      	strb	r2, [r3, #0]
    _backlightval = LCD_BACKLIGHT; // Default backlight ON
 8001116:	4b2c      	ldr	r3, [pc, #176]	@ (80011c8 <lcd_init+0xcc>)
 8001118:	2208      	movs	r2, #8
 800111a:	701a      	strb	r2, [r3, #0]

    // Tunda untuk power-up LCD (PENTING! Beberapa LCD butuh lebih lama)
    HAL_Delay(500); // BUG FIX: Menambah delay awal inisialisasi agar sangat stabil (min 40ms, beri spare sangat banyak)
 800111c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001120:	f000 fd16 	bl	8001b50 <HAL_Delay>

    // Prosedur inisialisasi 4-bit (sesuai datasheet HD44780)
    lcd_send_4bit(0x03 << 4, 0x00); // Kirim 0x03 tiga kali (diperlukan untuk inisialisasi 4-bit)
 8001124:	2100      	movs	r1, #0
 8001126:	2030      	movs	r0, #48	@ 0x30
 8001128:	f7ff ff7a 	bl	8001020 <lcd_send_4bit>
    HAL_Delay(200); // BUG FIX: Menambah delay signifikan
 800112c:	20c8      	movs	r0, #200	@ 0xc8
 800112e:	f000 fd0f 	bl	8001b50 <HAL_Delay>
    lcd_send_4bit(0x03 << 4, 0x00);
 8001132:	2100      	movs	r1, #0
 8001134:	2030      	movs	r0, #48	@ 0x30
 8001136:	f7ff ff73 	bl	8001020 <lcd_send_4bit>
    HAL_Delay(200); // BUG FIX: Menambah delay signifikan
 800113a:	20c8      	movs	r0, #200	@ 0xc8
 800113c:	f000 fd08 	bl	8001b50 <HAL_Delay>
    lcd_send_4bit(0x03 << 4, 0x00);
 8001140:	2100      	movs	r1, #0
 8001142:	2030      	movs	r0, #48	@ 0x30
 8001144:	f7ff ff6c 	bl	8001020 <lcd_send_4bit>
    HAL_Delay(50); // BUG FIX: Menambah delay signifikan
 8001148:	2032      	movs	r0, #50	@ 0x32
 800114a:	f000 fd01 	bl	8001b50 <HAL_Delay>

    // Sekarang atur ke mode 4-bit
    lcd_send_4bit(0x02 << 4, 0x00); // Atur LCD ke mode 4-bit
 800114e:	2100      	movs	r1, #0
 8001150:	2020      	movs	r0, #32
 8001152:	f7ff ff65 	bl	8001020 <lcd_send_4bit>
    HAL_Delay(20); // Tambahan delay setelah perintah mode set
 8001156:	2014      	movs	r0, #20
 8001158:	f000 fcfa 	bl	8001b50 <HAL_Delay>

    // Set Function Set (mode 4-bit, 2 baris, 5x8 dots)
    lcd_send_cmd(LCD_FUNCTIONSET | _displayfunction);
 800115c:	4b18      	ldr	r3, [pc, #96]	@ (80011c0 <lcd_init+0xc4>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	f043 0320 	orr.w	r3, r3, #32
 8001164:	b2db      	uxtb	r3, r3
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff ff92 	bl	8001090 <lcd_send_cmd>
    HAL_Delay(20); // Tambahan delay
 800116c:	2014      	movs	r0, #20
 800116e:	f000 fcef 	bl	8001b50 <HAL_Delay>

    // Turn the display on with no cursor or blinking default
    _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001172:	4b16      	ldr	r3, [pc, #88]	@ (80011cc <lcd_init+0xd0>)
 8001174:	2204      	movs	r2, #4
 8001176:	701a      	strb	r2, [r3, #0]
    lcd_send_cmd(LCD_DISPLAYCONTROL | _displaycontrol);
 8001178:	4b14      	ldr	r3, [pc, #80]	@ (80011cc <lcd_init+0xd0>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	f043 0308 	orr.w	r3, r3, #8
 8001180:	b2db      	uxtb	r3, r3
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff ff84 	bl	8001090 <lcd_send_cmd>
    HAL_Delay(20); // Tambahan delay
 8001188:	2014      	movs	r0, #20
 800118a:	f000 fce1 	bl	8001b50 <HAL_Delay>

    // Clear display
    lcd_clear(); // Fungsi lcd_clear sudah memiliki delay internal
 800118e:	f000 f821 	bl	80011d4 <lcd_clear>
    HAL_Delay(20); // Tambahan delay setelah clear
 8001192:	2014      	movs	r0, #20
 8001194:	f000 fcdc 	bl	8001b50 <HAL_Delay>

    // Set entry mode (increment cursor, no display shift)
    _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001198:	4b0d      	ldr	r3, [pc, #52]	@ (80011d0 <lcd_init+0xd4>)
 800119a:	2202      	movs	r2, #2
 800119c:	701a      	strb	r2, [r3, #0]
    lcd_send_cmd(LCD_ENTRYMODESET | _displaymode);
 800119e:	4b0c      	ldr	r3, [pc, #48]	@ (80011d0 <lcd_init+0xd4>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	f043 0304 	orr.w	r3, r3, #4
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff ff71 	bl	8001090 <lcd_send_cmd>
    HAL_Delay(20); // Tambahan delay
 80011ae:	2014      	movs	r0, #20
 80011b0:	f000 fcce 	bl	8001b50 <HAL_Delay>
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000264 	.word	0x20000264
 80011c0:	20000268 	.word	0x20000268
 80011c4:	2000026b 	.word	0x2000026b
 80011c8:	2000026c 	.word	0x2000026c
 80011cc:	20000269 	.word	0x20000269
 80011d0:	2000026a 	.word	0x2000026a

080011d4 <lcd_clear>:
/**
  * @brief  Membersihkan layar LCD.
  * @param  None
  * @retval None
  */
void lcd_clear(void) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
    lcd_send_cmd(LCD_CLEARDISPLAY);
 80011d8:	2001      	movs	r0, #1
 80011da:	f7ff ff59 	bl	8001090 <lcd_send_cmd>
    HAL_Delay(10); // BUG FIX: Clear display membutuhkan waktu lebih lama (~1.52ms), beri spare lebih banyak
 80011de:	200a      	movs	r0, #10
 80011e0:	f000 fcb6 	bl	8001b50 <HAL_Delay>
}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <lcd_send_string>:
/**
  * @brief  Mengirimkan string ke LCD.
  * @param  str Pointer ke string karakter.
  * @retval None
  */
void lcd_send_string(char *str) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
    while (*str) {
 80011f0:	e006      	b.n	8001200 <lcd_send_string+0x18>
        lcd_send_data(*str++);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	1c5a      	adds	r2, r3, #1
 80011f6:	607a      	str	r2, [r7, #4]
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff ff63 	bl	80010c6 <lcd_send_data>
    while (*str) {
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d1f4      	bne.n	80011f2 <lcd_send_string+0xa>
    }
}
 8001208:	bf00      	nop
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
	...

08001214 <HAL_TIM_PeriodElapsedCallback>:
    if (GPIO_Pin == GPIO_PIN_0) {
        pulse_count++;
    }
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001224:	d113      	bne.n	800124e <HAL_TIM_PeriodElapsedCallback+0x3a>
        speed = calculate_speed(pulse_count);
 8001226:	4b0c      	ldr	r3, [pc, #48]	@ (8001258 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4618      	mov	r0, r3
 800122c:	f000 f8a8 	bl	8001380 <calculate_speed>
 8001230:	4603      	mov	r3, r0
 8001232:	4a0a      	ldr	r2, [pc, #40]	@ (800125c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001234:	6013      	str	r3, [r2, #0]
        pulse_count = 0;
 8001236:	4b08      	ldr	r3, [pc, #32]	@ (8001258 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]

        if (current_mode == MODE_NORMAL) {
 800123c:	4b08      	ldr	r3, [pc, #32]	@ (8001260 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d104      	bne.n	800124e <HAL_TIM_PeriodElapsedCallback+0x3a>
            display_speed(speed);
 8001244:	4b05      	ldr	r3, [pc, #20]	@ (800125c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4618      	mov	r0, r3
 800124a:	f000 f827 	bl	800129c <display_speed>
        }
    }
}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000270 	.word	0x20000270
 800125c:	20000274 	.word	0x20000274
 8001260:	20000278 	.word	0x20000278

08001264 <lcd_put_cur>:

void lcd_put_cur(uint8_t row, uint8_t col) {
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	460a      	mov	r2, r1
 800126e:	71fb      	strb	r3, [r7, #7]
 8001270:	4613      	mov	r3, r2
 8001272:	71bb      	strb	r3, [r7, #6]
    uint8_t pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d103      	bne.n	8001282 <lcd_put_cur+0x1e>
 800127a:	79bb      	ldrb	r3, [r7, #6]
 800127c:	3b80      	subs	r3, #128	@ 0x80
 800127e:	b2db      	uxtb	r3, r3
 8001280:	e002      	b.n	8001288 <lcd_put_cur+0x24>
 8001282:	79bb      	ldrb	r3, [r7, #6]
 8001284:	3b40      	subs	r3, #64	@ 0x40
 8001286:	b2db      	uxtb	r3, r3
 8001288:	73fb      	strb	r3, [r7, #15]
    lcd_send_cmd(pos);
 800128a:	7bfb      	ldrb	r3, [r7, #15]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff feff 	bl	8001090 <lcd_send_cmd>
}
 8001292:	bf00      	nop
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <display_speed>:

void display_speed(uint32_t speed) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
    char buf[16];
    sprintf(buf, "Speed: %2lu km/h", speed);
 80012a4:	f107 0308 	add.w	r3, r7, #8
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	490c      	ldr	r1, [pc, #48]	@ (80012dc <display_speed+0x40>)
 80012ac:	4618      	mov	r0, r3
 80012ae:	f005 fe4d 	bl	8006f4c <siprintf>
    lcd_put_cur(0, 0);
 80012b2:	2100      	movs	r1, #0
 80012b4:	2000      	movs	r0, #0
 80012b6:	f7ff ffd5 	bl	8001264 <lcd_put_cur>
    lcd_send_string("                ");
 80012ba:	4809      	ldr	r0, [pc, #36]	@ (80012e0 <display_speed+0x44>)
 80012bc:	f7ff ff94 	bl	80011e8 <lcd_send_string>
    lcd_put_cur(0, 0);
 80012c0:	2100      	movs	r1, #0
 80012c2:	2000      	movs	r0, #0
 80012c4:	f7ff ffce 	bl	8001264 <lcd_put_cur>
    lcd_send_string(buf);
 80012c8:	f107 0308 	add.w	r3, r7, #8
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff ff8b 	bl	80011e8 <lcd_send_string>
}
 80012d2:	bf00      	nop
 80012d4:	3718      	adds	r7, #24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	08009258 	.word	0x08009258
 80012e0:	0800926c 	.word	0x0800926c

080012e4 <show_menu>:

void show_menu() {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
    lcd_put_cur(0, 0);
 80012e8:	2100      	movs	r1, #0
 80012ea:	2000      	movs	r0, #0
 80012ec:	f7ff ffba 	bl	8001264 <lcd_put_cur>
    lcd_send_string("                ");
 80012f0:	4808      	ldr	r0, [pc, #32]	@ (8001314 <show_menu+0x30>)
 80012f2:	f7ff ff79 	bl	80011e8 <lcd_send_string>
    lcd_put_cur(0, 0);
 80012f6:	2100      	movs	r1, #0
 80012f8:	2000      	movs	r0, #0
 80012fa:	f7ff ffb3 	bl	8001264 <lcd_put_cur>
    lcd_send_string((char*)menu_items[menu_index]);
 80012fe:	4b06      	ldr	r3, [pc, #24]	@ (8001318 <show_menu+0x34>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a06      	ldr	r2, [pc, #24]	@ (800131c <show_menu+0x38>)
 8001304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff ff6d 	bl	80011e8 <lcd_send_string>
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	0800926c 	.word	0x0800926c
 8001318:	2000027c 	.word	0x2000027c
 800131c:	20000000 	.word	0x20000000

08001320 <read_buttons>:

void read_buttons() {
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
    menu_button_pressed = !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);
 8001324:	2108      	movs	r1, #8
 8001326:	4812      	ldr	r0, [pc, #72]	@ (8001370 <read_buttons+0x50>)
 8001328:	f000 ff88 	bl	800223c <HAL_GPIO_ReadPin>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	bf0c      	ite	eq
 8001332:	2301      	moveq	r3, #1
 8001334:	2300      	movne	r3, #0
 8001336:	b2da      	uxtb	r2, r3
 8001338:	4b0e      	ldr	r3, [pc, #56]	@ (8001374 <read_buttons+0x54>)
 800133a:	701a      	strb	r2, [r3, #0]
    up_button_pressed   = !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 800133c:	2110      	movs	r1, #16
 800133e:	480c      	ldr	r0, [pc, #48]	@ (8001370 <read_buttons+0x50>)
 8001340:	f000 ff7c 	bl	800223c <HAL_GPIO_ReadPin>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	bf0c      	ite	eq
 800134a:	2301      	moveq	r3, #1
 800134c:	2300      	movne	r3, #0
 800134e:	b2da      	uxtb	r2, r3
 8001350:	4b09      	ldr	r3, [pc, #36]	@ (8001378 <read_buttons+0x58>)
 8001352:	701a      	strb	r2, [r3, #0]
    down_button_pressed = !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8001354:	2120      	movs	r1, #32
 8001356:	4806      	ldr	r0, [pc, #24]	@ (8001370 <read_buttons+0x50>)
 8001358:	f000 ff70 	bl	800223c <HAL_GPIO_ReadPin>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	bf0c      	ite	eq
 8001362:	2301      	moveq	r3, #1
 8001364:	2300      	movne	r3, #0
 8001366:	b2da      	uxtb	r2, r3
 8001368:	4b04      	ldr	r3, [pc, #16]	@ (800137c <read_buttons+0x5c>)
 800136a:	701a      	strb	r2, [r3, #0]
}
 800136c:	bf00      	nop
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40010c00 	.word	0x40010c00
 8001374:	20000280 	.word	0x20000280
 8001378:	20000281 	.word	0x20000281
 800137c:	20000282 	.word	0x20000282

08001380 <calculate_speed>:

uint32_t calculate_speed(uint32_t pulses) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
    float pulses_per_sec = pulses * 10.0f;
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff fce7 	bl	8000d5c <__aeabi_ui2f>
 800138e:	4603      	mov	r3, r0
 8001390:	490c      	ldr	r1, [pc, #48]	@ (80013c4 <calculate_speed+0x44>)
 8001392:	4618      	mov	r0, r3
 8001394:	f7fe fee4 	bl	8000160 <__aeabi_fmul>
 8001398:	4603      	mov	r3, r0
 800139a:	60fb      	str	r3, [r7, #12]
    float speed_mps = pulses_per_sec * 2.0f;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	4619      	mov	r1, r3
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff fc2b 	bl	8000bfc <__addsf3>
 80013a6:	4603      	mov	r3, r0
 80013a8:	60bb      	str	r3, [r7, #8]
    return (uint32_t)(speed_mps * 3.6f);
 80013aa:	4907      	ldr	r1, [pc, #28]	@ (80013c8 <calculate_speed+0x48>)
 80013ac:	68b8      	ldr	r0, [r7, #8]
 80013ae:	f7fe fed7 	bl	8000160 <__aeabi_fmul>
 80013b2:	4603      	mov	r3, r0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff fd29 	bl	8000e0c <__aeabi_f2uiz>
 80013ba:	4603      	mov	r3, r0
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3710      	adds	r7, #16
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	41200000 	.word	0x41200000
 80013c8:	40666666 	.word	0x40666666

080013cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013d2:	f000 fb5b 	bl	8001a8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013d6:	f000 f885 	bl	80014e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013da:	f7ff fd37 	bl	8000e4c <MX_GPIO_Init>
  MX_I2C1_Init();
 80013de:	f7ff fd8d 	bl	8000efc <MX_I2C1_Init>
  MX_TIM2_Init();
 80013e2:	f000 fa19 	bl	8001818 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80013e6:	f000 faad 	bl	8001944 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(&hi2c1, LCD_ADDR, 1, 100);
 80013ea:	2364      	movs	r3, #100	@ 0x64
 80013ec:	2201      	movs	r2, #1
 80013ee:	214e      	movs	r1, #78	@ 0x4e
 80013f0:	4832      	ldr	r0, [pc, #200]	@ (80014bc <main+0xf0>)
 80013f2:	f001 f9a9 	bl	8002748 <HAL_I2C_IsDeviceReady>
 80013f6:	4603      	mov	r3, r0
 80013f8:	71fb      	strb	r3, [r7, #7]
  if (status == HAL_OK) {
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d106      	bne.n	800140e <main+0x42>
	  HAL_UART_Transmit(&huart1, (uint8_t*)"LCD OK\r\n", 9, 100);
 8001400:	2364      	movs	r3, #100	@ 0x64
 8001402:	2209      	movs	r2, #9
 8001404:	492e      	ldr	r1, [pc, #184]	@ (80014c0 <main+0xf4>)
 8001406:	482f      	ldr	r0, [pc, #188]	@ (80014c4 <main+0xf8>)
 8001408:	f004 fabe 	bl	8005988 <HAL_UART_Transmit>
 800140c:	e005      	b.n	800141a <main+0x4e>

  } else {
	  HAL_UART_Transmit(&huart1, (uint8_t*)"LCD FAIL\r\n", 11, 100);
 800140e:	2364      	movs	r3, #100	@ 0x64
 8001410:	220b      	movs	r2, #11
 8001412:	492d      	ldr	r1, [pc, #180]	@ (80014c8 <main+0xfc>)
 8001414:	482b      	ldr	r0, [pc, #172]	@ (80014c4 <main+0xf8>)
 8001416:	f004 fab7 	bl	8005988 <HAL_UART_Transmit>

  }

  lcd_init(&hi2c1);
 800141a:	4828      	ldr	r0, [pc, #160]	@ (80014bc <main+0xf0>)
 800141c:	f7ff fe6e 	bl	80010fc <lcd_init>
  lcd_clear();
 8001420:	f7ff fed8 	bl	80011d4 <lcd_clear>
  HAL_TIM_Base_Start_IT(&htim2);
 8001424:	4829      	ldr	r0, [pc, #164]	@ (80014cc <main+0x100>)
 8001426:	f003 fe21 	bl	800506c <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    read_buttons();
 800142a:	f7ff ff79 	bl	8001320 <read_buttons>

    switch (current_mode) {
 800142e:	4b28      	ldr	r3, [pc, #160]	@ (80014d0 <main+0x104>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d002      	beq.n	800143c <main+0x70>
 8001436:	2b01      	cmp	r3, #1
 8001438:	d00f      	beq.n	800145a <main+0x8e>
 800143a:	e03d      	b.n	80014b8 <main+0xec>
        case MODE_NORMAL:
            if (menu_button_pressed) {
 800143c:	4b25      	ldr	r3, [pc, #148]	@ (80014d4 <main+0x108>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d036      	beq.n	80014b2 <main+0xe6>
                current_mode = MODE_MENU;
 8001444:	4b22      	ldr	r3, [pc, #136]	@ (80014d0 <main+0x104>)
 8001446:	2201      	movs	r2, #1
 8001448:	701a      	strb	r2, [r3, #0]
                menu_index = 0;
 800144a:	4b23      	ldr	r3, [pc, #140]	@ (80014d8 <main+0x10c>)
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
                lcd_clear();
 8001450:	f7ff fec0 	bl	80011d4 <lcd_clear>
                show_menu();
 8001454:	f7ff ff46 	bl	80012e4 <show_menu>
            }
            break;
 8001458:	e02b      	b.n	80014b2 <main+0xe6>

        case MODE_MENU:
            if (up_button_pressed) {
 800145a:	4b20      	ldr	r3, [pc, #128]	@ (80014dc <main+0x110>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d00c      	beq.n	800147c <main+0xb0>
                menu_index = (menu_index + 1) % MENU_COUNT;
 8001462:	4b1d      	ldr	r3, [pc, #116]	@ (80014d8 <main+0x10c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	3301      	adds	r3, #1
 8001468:	f003 0307 	and.w	r3, r3, #7
 800146c:	4a1a      	ldr	r2, [pc, #104]	@ (80014d8 <main+0x10c>)
 800146e:	6013      	str	r3, [r2, #0]
                show_menu();
 8001470:	f7ff ff38 	bl	80012e4 <show_menu>
                HAL_Delay(200);
 8001474:	20c8      	movs	r0, #200	@ 0xc8
 8001476:	f000 fb6b 	bl	8001b50 <HAL_Delay>
            }
            else if (menu_button_pressed) {
                current_mode = MODE_NORMAL;
                lcd_clear();
            }
            break;
 800147a:	e01c      	b.n	80014b6 <main+0xea>
            else if (down_button_pressed) {
 800147c:	4b18      	ldr	r3, [pc, #96]	@ (80014e0 <main+0x114>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d00c      	beq.n	800149e <main+0xd2>
                menu_index = (menu_index - 1 + MENU_COUNT) % MENU_COUNT;
 8001484:	4b14      	ldr	r3, [pc, #80]	@ (80014d8 <main+0x10c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	3307      	adds	r3, #7
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	4a12      	ldr	r2, [pc, #72]	@ (80014d8 <main+0x10c>)
 8001490:	6013      	str	r3, [r2, #0]
                show_menu();
 8001492:	f7ff ff27 	bl	80012e4 <show_menu>
                HAL_Delay(200);
 8001496:	20c8      	movs	r0, #200	@ 0xc8
 8001498:	f000 fb5a 	bl	8001b50 <HAL_Delay>
            break;
 800149c:	e00b      	b.n	80014b6 <main+0xea>
            else if (menu_button_pressed) {
 800149e:	4b0d      	ldr	r3, [pc, #52]	@ (80014d4 <main+0x108>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d007      	beq.n	80014b6 <main+0xea>
                current_mode = MODE_NORMAL;
 80014a6:	4b0a      	ldr	r3, [pc, #40]	@ (80014d0 <main+0x104>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	701a      	strb	r2, [r3, #0]
                lcd_clear();
 80014ac:	f7ff fe92 	bl	80011d4 <lcd_clear>
            break;
 80014b0:	e001      	b.n	80014b6 <main+0xea>
            break;
 80014b2:	bf00      	nop
 80014b4:	e7b9      	b.n	800142a <main+0x5e>
            break;
 80014b6:	bf00      	nop
    read_buttons();
 80014b8:	e7b7      	b.n	800142a <main+0x5e>
 80014ba:	bf00      	nop
 80014bc:	20000210 	.word	0x20000210
 80014c0:	08009280 	.word	0x08009280
 80014c4:	200002d0 	.word	0x200002d0
 80014c8:	0800928c 	.word	0x0800928c
 80014cc:	20000288 	.word	0x20000288
 80014d0:	20000278 	.word	0x20000278
 80014d4:	20000280 	.word	0x20000280
 80014d8:	2000027c 	.word	0x2000027c
 80014dc:	20000281 	.word	0x20000281
 80014e0:	20000282 	.word	0x20000282

080014e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b090      	sub	sp, #64	@ 0x40
 80014e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ea:	f107 0318 	add.w	r3, r7, #24
 80014ee:	2228      	movs	r2, #40	@ 0x28
 80014f0:	2100      	movs	r1, #0
 80014f2:	4618      	mov	r0, r3
 80014f4:	f005 fd8f 	bl	8007016 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014f8:	1d3b      	adds	r3, r7, #4
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
 8001504:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001506:	2301      	movs	r3, #1
 8001508:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800150a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800150e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001510:	2300      	movs	r3, #0
 8001512:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001514:	2301      	movs	r3, #1
 8001516:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001518:	2302      	movs	r3, #2
 800151a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800151c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001520:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001522:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001526:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001528:	f107 0318 	add.w	r3, r7, #24
 800152c:	4618      	mov	r0, r3
 800152e:	f003 f98d 	bl	800484c <HAL_RCC_OscConfig>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001538:	f000 f819 	bl	800156e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800153c:	230f      	movs	r3, #15
 800153e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001540:	2302      	movs	r3, #2
 8001542:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001544:	2300      	movs	r3, #0
 8001546:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001548:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800154c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800154e:	2300      	movs	r3, #0
 8001550:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001552:	1d3b      	adds	r3, r7, #4
 8001554:	2102      	movs	r1, #2
 8001556:	4618      	mov	r0, r3
 8001558:	f003 fbfa 	bl	8004d50 <HAL_RCC_ClockConfig>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001562:	f000 f804 	bl	800156e <Error_Handler>
  }
}
 8001566:	bf00      	nop
 8001568:	3740      	adds	r7, #64	@ 0x40
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800156e:	b480      	push	{r7}
 8001570:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001572:	b672      	cpsid	i
}
 8001574:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001576:	bf00      	nop
 8001578:	e7fd      	b.n	8001576 <Error_Handler+0x8>
	...

0800157c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001582:	4b15      	ldr	r3, [pc, #84]	@ (80015d8 <HAL_MspInit+0x5c>)
 8001584:	699b      	ldr	r3, [r3, #24]
 8001586:	4a14      	ldr	r2, [pc, #80]	@ (80015d8 <HAL_MspInit+0x5c>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	6193      	str	r3, [r2, #24]
 800158e:	4b12      	ldr	r3, [pc, #72]	@ (80015d8 <HAL_MspInit+0x5c>)
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	60bb      	str	r3, [r7, #8]
 8001598:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800159a:	4b0f      	ldr	r3, [pc, #60]	@ (80015d8 <HAL_MspInit+0x5c>)
 800159c:	69db      	ldr	r3, [r3, #28]
 800159e:	4a0e      	ldr	r2, [pc, #56]	@ (80015d8 <HAL_MspInit+0x5c>)
 80015a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015a4:	61d3      	str	r3, [r2, #28]
 80015a6:	4b0c      	ldr	r3, [pc, #48]	@ (80015d8 <HAL_MspInit+0x5c>)
 80015a8:	69db      	ldr	r3, [r3, #28]
 80015aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ae:	607b      	str	r3, [r7, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015b2:	4b0a      	ldr	r3, [pc, #40]	@ (80015dc <HAL_MspInit+0x60>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	4a04      	ldr	r2, [pc, #16]	@ (80015dc <HAL_MspInit+0x60>)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ce:	bf00      	nop
 80015d0:	3714      	adds	r7, #20
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr
 80015d8:	40021000 	.word	0x40021000
 80015dc:	40010000 	.word	0x40010000

080015e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015e4:	bf00      	nop
 80015e6:	e7fd      	b.n	80015e4 <NMI_Handler+0x4>

080015e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ec:	bf00      	nop
 80015ee:	e7fd      	b.n	80015ec <HardFault_Handler+0x4>

080015f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f4:	bf00      	nop
 80015f6:	e7fd      	b.n	80015f4 <MemManage_Handler+0x4>

080015f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015fc:	bf00      	nop
 80015fe:	e7fd      	b.n	80015fc <BusFault_Handler+0x4>

08001600 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001604:	bf00      	nop
 8001606:	e7fd      	b.n	8001604 <UsageFault_Handler+0x4>

08001608 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr

08001614 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr

08001620 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	bc80      	pop	{r7}
 800162a:	4770      	bx	lr

0800162c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001630:	f000 fa72 	bl	8001b18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001634:	bf00      	nop
 8001636:	bd80      	pop	{r7, pc}

08001638 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800163c:	4802      	ldr	r0, [pc, #8]	@ (8001648 <TIM2_IRQHandler+0x10>)
 800163e:	f003 fdb6 	bl	80051ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000288 	.word	0x20000288

0800164c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001650:	4802      	ldr	r0, [pc, #8]	@ (800165c <I2C1_EV_IRQHandler+0x10>)
 8001652:	f001 f9a7 	bl	80029a4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	20000210 	.word	0x20000210

08001660 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001664:	4802      	ldr	r0, [pc, #8]	@ (8001670 <I2C1_ER_IRQHandler+0x10>)
 8001666:	f001 fb0e 	bl	8002c86 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20000210 	.word	0x20000210

08001674 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001678:	4802      	ldr	r0, [pc, #8]	@ (8001684 <USART1_IRQHandler+0x10>)
 800167a:	f004 fa11 	bl	8005aa0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	200002d0 	.word	0x200002d0

08001688 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  return 1;
 800168c:	2301      	movs	r3, #1
}
 800168e:	4618      	mov	r0, r3
 8001690:	46bd      	mov	sp, r7
 8001692:	bc80      	pop	{r7}
 8001694:	4770      	bx	lr

08001696 <_kill>:

int _kill(int pid, int sig)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b082      	sub	sp, #8
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
 800169e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016a0:	f005 fd0c 	bl	80070bc <__errno>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2216      	movs	r2, #22
 80016a8:	601a      	str	r2, [r3, #0]
  return -1;
 80016aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <_exit>:

void _exit (int status)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b082      	sub	sp, #8
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016be:	f04f 31ff 	mov.w	r1, #4294967295
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f7ff ffe7 	bl	8001696 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016c8:	bf00      	nop
 80016ca:	e7fd      	b.n	80016c8 <_exit+0x12>

080016cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d8:	2300      	movs	r3, #0
 80016da:	617b      	str	r3, [r7, #20]
 80016dc:	e00a      	b.n	80016f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016de:	f3af 8000 	nop.w
 80016e2:	4601      	mov	r1, r0
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	1c5a      	adds	r2, r3, #1
 80016e8:	60ba      	str	r2, [r7, #8]
 80016ea:	b2ca      	uxtb	r2, r1
 80016ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	3301      	adds	r3, #1
 80016f2:	617b      	str	r3, [r7, #20]
 80016f4:	697a      	ldr	r2, [r7, #20]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	dbf0      	blt.n	80016de <_read+0x12>
  }

  return len;
 80016fc:	687b      	ldr	r3, [r7, #4]
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3718      	adds	r7, #24
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b086      	sub	sp, #24
 800170a:	af00      	add	r7, sp, #0
 800170c:	60f8      	str	r0, [r7, #12]
 800170e:	60b9      	str	r1, [r7, #8]
 8001710:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001712:	2300      	movs	r3, #0
 8001714:	617b      	str	r3, [r7, #20]
 8001716:	e009      	b.n	800172c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	1c5a      	adds	r2, r3, #1
 800171c:	60ba      	str	r2, [r7, #8]
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	4618      	mov	r0, r3
 8001722:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	3301      	adds	r3, #1
 800172a:	617b      	str	r3, [r7, #20]
 800172c:	697a      	ldr	r2, [r7, #20]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	429a      	cmp	r2, r3
 8001732:	dbf1      	blt.n	8001718 <_write+0x12>
  }
  return len;
 8001734:	687b      	ldr	r3, [r7, #4]
}
 8001736:	4618      	mov	r0, r3
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <_close>:

int _close(int file)
{
 800173e:	b480      	push	{r7}
 8001740:	b083      	sub	sp, #12
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001746:	f04f 33ff 	mov.w	r3, #4294967295
}
 800174a:	4618      	mov	r0, r3
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	bc80      	pop	{r7}
 8001752:	4770      	bx	lr

08001754 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001764:	605a      	str	r2, [r3, #4]
  return 0;
 8001766:	2300      	movs	r3, #0
}
 8001768:	4618      	mov	r0, r3
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	bc80      	pop	{r7}
 8001770:	4770      	bx	lr

08001772 <_isatty>:

int _isatty(int file)
{
 8001772:	b480      	push	{r7}
 8001774:	b083      	sub	sp, #12
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800177a:	2301      	movs	r3, #1
}
 800177c:	4618      	mov	r0, r3
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	bc80      	pop	{r7}
 8001784:	4770      	bx	lr

08001786 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001786:	b480      	push	{r7}
 8001788:	b085      	sub	sp, #20
 800178a:	af00      	add	r7, sp, #0
 800178c:	60f8      	str	r0, [r7, #12]
 800178e:	60b9      	str	r1, [r7, #8]
 8001790:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001792:	2300      	movs	r3, #0
}
 8001794:	4618      	mov	r0, r3
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	bc80      	pop	{r7}
 800179c:	4770      	bx	lr
	...

080017a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017a8:	4a14      	ldr	r2, [pc, #80]	@ (80017fc <_sbrk+0x5c>)
 80017aa:	4b15      	ldr	r3, [pc, #84]	@ (8001800 <_sbrk+0x60>)
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017b4:	4b13      	ldr	r3, [pc, #76]	@ (8001804 <_sbrk+0x64>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d102      	bne.n	80017c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017bc:	4b11      	ldr	r3, [pc, #68]	@ (8001804 <_sbrk+0x64>)
 80017be:	4a12      	ldr	r2, [pc, #72]	@ (8001808 <_sbrk+0x68>)
 80017c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017c2:	4b10      	ldr	r3, [pc, #64]	@ (8001804 <_sbrk+0x64>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4413      	add	r3, r2
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d207      	bcs.n	80017e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017d0:	f005 fc74 	bl	80070bc <__errno>
 80017d4:	4603      	mov	r3, r0
 80017d6:	220c      	movs	r2, #12
 80017d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017da:	f04f 33ff 	mov.w	r3, #4294967295
 80017de:	e009      	b.n	80017f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017e0:	4b08      	ldr	r3, [pc, #32]	@ (8001804 <_sbrk+0x64>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017e6:	4b07      	ldr	r3, [pc, #28]	@ (8001804 <_sbrk+0x64>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4413      	add	r3, r2
 80017ee:	4a05      	ldr	r2, [pc, #20]	@ (8001804 <_sbrk+0x64>)
 80017f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017f2:	68fb      	ldr	r3, [r7, #12]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3718      	adds	r7, #24
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20005000 	.word	0x20005000
 8001800:	00000400 	.word	0x00000400
 8001804:	20000284 	.word	0x20000284
 8001808:	20000468 	.word	0x20000468

0800180c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr

08001818 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800181e:	f107 0310 	add.w	r3, r7, #16
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001828:	463b      	mov	r3, r7
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	605a      	str	r2, [r3, #4]
 8001830:	609a      	str	r2, [r3, #8]
 8001832:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001834:	4b20      	ldr	r3, [pc, #128]	@ (80018b8 <MX_TIM2_Init+0xa0>)
 8001836:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800183a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 800183c:	4b1e      	ldr	r3, [pc, #120]	@ (80018b8 <MX_TIM2_Init+0xa0>)
 800183e:	2247      	movs	r2, #71	@ 0x47
 8001840:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001842:	4b1d      	ldr	r3, [pc, #116]	@ (80018b8 <MX_TIM2_Init+0xa0>)
 8001844:	2200      	movs	r2, #0
 8001846:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001848:	4b1b      	ldr	r3, [pc, #108]	@ (80018b8 <MX_TIM2_Init+0xa0>)
 800184a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800184e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001850:	4b19      	ldr	r3, [pc, #100]	@ (80018b8 <MX_TIM2_Init+0xa0>)
 8001852:	2200      	movs	r2, #0
 8001854:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001856:	4b18      	ldr	r3, [pc, #96]	@ (80018b8 <MX_TIM2_Init+0xa0>)
 8001858:	2200      	movs	r2, #0
 800185a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800185c:	4816      	ldr	r0, [pc, #88]	@ (80018b8 <MX_TIM2_Init+0xa0>)
 800185e:	f003 fc57 	bl	8005110 <HAL_TIM_IC_Init>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001868:	f7ff fe81 	bl	800156e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800186c:	2300      	movs	r3, #0
 800186e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001874:	f107 0310 	add.w	r3, r7, #16
 8001878:	4619      	mov	r1, r3
 800187a:	480f      	ldr	r0, [pc, #60]	@ (80018b8 <MX_TIM2_Init+0xa0>)
 800187c:	f003 ffc4 	bl	8005808 <HAL_TIMEx_MasterConfigSynchronization>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001886:	f7ff fe72 	bl	800156e <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800188a:	2300      	movs	r3, #0
 800188c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800188e:	2301      	movs	r3, #1
 8001890:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001892:	2300      	movs	r3, #0
 8001894:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001896:	2300      	movs	r3, #0
 8001898:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800189a:	463b      	mov	r3, r7
 800189c:	2200      	movs	r2, #0
 800189e:	4619      	mov	r1, r3
 80018a0:	4805      	ldr	r0, [pc, #20]	@ (80018b8 <MX_TIM2_Init+0xa0>)
 80018a2:	f003 fd74 	bl	800538e <HAL_TIM_IC_ConfigChannel>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80018ac:	f7ff fe5f 	bl	800156e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018b0:	bf00      	nop
 80018b2:	3718      	adds	r7, #24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20000288 	.word	0x20000288

080018bc <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b088      	sub	sp, #32
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c4:	f107 0310 	add.w	r3, r7, #16
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
  if(tim_icHandle->Instance==TIM2)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018da:	d12b      	bne.n	8001934 <HAL_TIM_IC_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018dc:	4b17      	ldr	r3, [pc, #92]	@ (800193c <HAL_TIM_IC_MspInit+0x80>)
 80018de:	69db      	ldr	r3, [r3, #28]
 80018e0:	4a16      	ldr	r2, [pc, #88]	@ (800193c <HAL_TIM_IC_MspInit+0x80>)
 80018e2:	f043 0301 	orr.w	r3, r3, #1
 80018e6:	61d3      	str	r3, [r2, #28]
 80018e8:	4b14      	ldr	r3, [pc, #80]	@ (800193c <HAL_TIM_IC_MspInit+0x80>)
 80018ea:	69db      	ldr	r3, [r3, #28]
 80018ec:	f003 0301 	and.w	r3, r3, #1
 80018f0:	60fb      	str	r3, [r7, #12]
 80018f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f4:	4b11      	ldr	r3, [pc, #68]	@ (800193c <HAL_TIM_IC_MspInit+0x80>)
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	4a10      	ldr	r2, [pc, #64]	@ (800193c <HAL_TIM_IC_MspInit+0x80>)
 80018fa:	f043 0304 	orr.w	r3, r3, #4
 80018fe:	6193      	str	r3, [r2, #24]
 8001900:	4b0e      	ldr	r3, [pc, #56]	@ (800193c <HAL_TIM_IC_MspInit+0x80>)
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	f003 0304 	and.w	r3, r3, #4
 8001908:	60bb      	str	r3, [r7, #8]
 800190a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800190c:	2301      	movs	r3, #1
 800190e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001918:	f107 0310 	add.w	r3, r7, #16
 800191c:	4619      	mov	r1, r3
 800191e:	4808      	ldr	r0, [pc, #32]	@ (8001940 <HAL_TIM_IC_MspInit+0x84>)
 8001920:	f000 fb08 	bl	8001f34 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001924:	2200      	movs	r2, #0
 8001926:	2100      	movs	r1, #0
 8001928:	201c      	movs	r0, #28
 800192a:	f000 fa0c 	bl	8001d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800192e:	201c      	movs	r0, #28
 8001930:	f000 fa25 	bl	8001d7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001934:	bf00      	nop
 8001936:	3720      	adds	r7, #32
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40021000 	.word	0x40021000
 8001940:	40010800 	.word	0x40010800

08001944 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001948:	4b11      	ldr	r3, [pc, #68]	@ (8001990 <MX_USART1_UART_Init+0x4c>)
 800194a:	4a12      	ldr	r2, [pc, #72]	@ (8001994 <MX_USART1_UART_Init+0x50>)
 800194c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800194e:	4b10      	ldr	r3, [pc, #64]	@ (8001990 <MX_USART1_UART_Init+0x4c>)
 8001950:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001954:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001956:	4b0e      	ldr	r3, [pc, #56]	@ (8001990 <MX_USART1_UART_Init+0x4c>)
 8001958:	2200      	movs	r2, #0
 800195a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800195c:	4b0c      	ldr	r3, [pc, #48]	@ (8001990 <MX_USART1_UART_Init+0x4c>)
 800195e:	2200      	movs	r2, #0
 8001960:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001962:	4b0b      	ldr	r3, [pc, #44]	@ (8001990 <MX_USART1_UART_Init+0x4c>)
 8001964:	2200      	movs	r2, #0
 8001966:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001968:	4b09      	ldr	r3, [pc, #36]	@ (8001990 <MX_USART1_UART_Init+0x4c>)
 800196a:	220c      	movs	r2, #12
 800196c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800196e:	4b08      	ldr	r3, [pc, #32]	@ (8001990 <MX_USART1_UART_Init+0x4c>)
 8001970:	2200      	movs	r2, #0
 8001972:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001974:	4b06      	ldr	r3, [pc, #24]	@ (8001990 <MX_USART1_UART_Init+0x4c>)
 8001976:	2200      	movs	r2, #0
 8001978:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800197a:	4805      	ldr	r0, [pc, #20]	@ (8001990 <MX_USART1_UART_Init+0x4c>)
 800197c:	f003 ffb4 	bl	80058e8 <HAL_UART_Init>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001986:	f7ff fdf2 	bl	800156e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	200002d0 	.word	0x200002d0
 8001994:	40013800 	.word	0x40013800

08001998 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b088      	sub	sp, #32
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a0:	f107 0310 	add.w	r3, r7, #16
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a20      	ldr	r2, [pc, #128]	@ (8001a34 <HAL_UART_MspInit+0x9c>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d139      	bne.n	8001a2c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001a38 <HAL_UART_MspInit+0xa0>)
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	4a1e      	ldr	r2, [pc, #120]	@ (8001a38 <HAL_UART_MspInit+0xa0>)
 80019be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019c2:	6193      	str	r3, [r2, #24]
 80019c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001a38 <HAL_UART_MspInit+0xa0>)
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d0:	4b19      	ldr	r3, [pc, #100]	@ (8001a38 <HAL_UART_MspInit+0xa0>)
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	4a18      	ldr	r2, [pc, #96]	@ (8001a38 <HAL_UART_MspInit+0xa0>)
 80019d6:	f043 0304 	orr.w	r3, r3, #4
 80019da:	6193      	str	r3, [r2, #24]
 80019dc:	4b16      	ldr	r3, [pc, #88]	@ (8001a38 <HAL_UART_MspInit+0xa0>)
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	f003 0304 	and.w	r3, r3, #4
 80019e4:	60bb      	str	r3, [r7, #8]
 80019e6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ee:	2302      	movs	r3, #2
 80019f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019f2:	2303      	movs	r3, #3
 80019f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f6:	f107 0310 	add.w	r3, r7, #16
 80019fa:	4619      	mov	r1, r3
 80019fc:	480f      	ldr	r0, [pc, #60]	@ (8001a3c <HAL_UART_MspInit+0xa4>)
 80019fe:	f000 fa99 	bl	8001f34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a10:	f107 0310 	add.w	r3, r7, #16
 8001a14:	4619      	mov	r1, r3
 8001a16:	4809      	ldr	r0, [pc, #36]	@ (8001a3c <HAL_UART_MspInit+0xa4>)
 8001a18:	f000 fa8c 	bl	8001f34 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	2100      	movs	r1, #0
 8001a20:	2025      	movs	r0, #37	@ 0x25
 8001a22:	f000 f990 	bl	8001d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a26:	2025      	movs	r0, #37	@ 0x25
 8001a28:	f000 f9a9 	bl	8001d7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001a2c:	bf00      	nop
 8001a2e:	3720      	adds	r7, #32
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40013800 	.word	0x40013800
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	40010800 	.word	0x40010800

08001a40 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a40:	f7ff fee4 	bl	800180c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a44:	480b      	ldr	r0, [pc, #44]	@ (8001a74 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a46:	490c      	ldr	r1, [pc, #48]	@ (8001a78 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a48:	4a0c      	ldr	r2, [pc, #48]	@ (8001a7c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a4c:	e002      	b.n	8001a54 <LoopCopyDataInit>

08001a4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a52:	3304      	adds	r3, #4

08001a54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a58:	d3f9      	bcc.n	8001a4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a5a:	4a09      	ldr	r2, [pc, #36]	@ (8001a80 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a5c:	4c09      	ldr	r4, [pc, #36]	@ (8001a84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a60:	e001      	b.n	8001a66 <LoopFillZerobss>

08001a62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a64:	3204      	adds	r2, #4

08001a66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a68:	d3fb      	bcc.n	8001a62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a6a:	f005 fb2d 	bl	80070c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a6e:	f7ff fcad 	bl	80013cc <main>
  bx lr
 8001a72:	4770      	bx	lr
  ldr r0, =_sdata
 8001a74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a78:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8001a7c:	08009644 	.word	0x08009644
  ldr r2, =_sbss
 8001a80:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8001a84:	20000468 	.word	0x20000468

08001a88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a88:	e7fe      	b.n	8001a88 <ADC1_2_IRQHandler>
	...

08001a8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a90:	4b08      	ldr	r3, [pc, #32]	@ (8001ab4 <HAL_Init+0x28>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a07      	ldr	r2, [pc, #28]	@ (8001ab4 <HAL_Init+0x28>)
 8001a96:	f043 0310 	orr.w	r3, r3, #16
 8001a9a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a9c:	2003      	movs	r0, #3
 8001a9e:	f000 f947 	bl	8001d30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aa2:	200f      	movs	r0, #15
 8001aa4:	f000 f808 	bl	8001ab8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aa8:	f7ff fd68 	bl	800157c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40022000 	.word	0x40022000

08001ab8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ac0:	4b12      	ldr	r3, [pc, #72]	@ (8001b0c <HAL_InitTick+0x54>)
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	4b12      	ldr	r3, [pc, #72]	@ (8001b10 <HAL_InitTick+0x58>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ace:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f000 f95f 	bl	8001d9a <HAL_SYSTICK_Config>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e00e      	b.n	8001b04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b0f      	cmp	r3, #15
 8001aea:	d80a      	bhi.n	8001b02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aec:	2200      	movs	r2, #0
 8001aee:	6879      	ldr	r1, [r7, #4]
 8001af0:	f04f 30ff 	mov.w	r0, #4294967295
 8001af4:	f000 f927 	bl	8001d46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001af8:	4a06      	ldr	r2, [pc, #24]	@ (8001b14 <HAL_InitTick+0x5c>)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001afe:	2300      	movs	r3, #0
 8001b00:	e000      	b.n	8001b04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	20000020 	.word	0x20000020
 8001b10:	20000028 	.word	0x20000028
 8001b14:	20000024 	.word	0x20000024

08001b18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b1c:	4b05      	ldr	r3, [pc, #20]	@ (8001b34 <HAL_IncTick+0x1c>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	461a      	mov	r2, r3
 8001b22:	4b05      	ldr	r3, [pc, #20]	@ (8001b38 <HAL_IncTick+0x20>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4413      	add	r3, r2
 8001b28:	4a03      	ldr	r2, [pc, #12]	@ (8001b38 <HAL_IncTick+0x20>)
 8001b2a:	6013      	str	r3, [r2, #0]
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bc80      	pop	{r7}
 8001b32:	4770      	bx	lr
 8001b34:	20000028 	.word	0x20000028
 8001b38:	20000318 	.word	0x20000318

08001b3c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b40:	4b02      	ldr	r3, [pc, #8]	@ (8001b4c <HAL_GetTick+0x10>)
 8001b42:	681b      	ldr	r3, [r3, #0]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bc80      	pop	{r7}
 8001b4a:	4770      	bx	lr
 8001b4c:	20000318 	.word	0x20000318

08001b50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b58:	f7ff fff0 	bl	8001b3c <HAL_GetTick>
 8001b5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b68:	d005      	beq.n	8001b76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b94 <HAL_Delay+0x44>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	461a      	mov	r2, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	4413      	add	r3, r2
 8001b74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b76:	bf00      	nop
 8001b78:	f7ff ffe0 	bl	8001b3c <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	68fa      	ldr	r2, [r7, #12]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d8f7      	bhi.n	8001b78 <HAL_Delay+0x28>
  {
  }
}
 8001b88:	bf00      	nop
 8001b8a:	bf00      	nop
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	20000028 	.word	0x20000028

08001b98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8001bdc <__NVIC_SetPriorityGrouping+0x44>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bae:	68ba      	ldr	r2, [r7, #8]
 8001bb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bc0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bca:	4a04      	ldr	r2, [pc, #16]	@ (8001bdc <__NVIC_SetPriorityGrouping+0x44>)
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	60d3      	str	r3, [r2, #12]
}
 8001bd0:	bf00      	nop
 8001bd2:	3714      	adds	r7, #20
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc80      	pop	{r7}
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001be4:	4b04      	ldr	r3, [pc, #16]	@ (8001bf8 <__NVIC_GetPriorityGrouping+0x18>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	0a1b      	lsrs	r3, r3, #8
 8001bea:	f003 0307 	and.w	r3, r3, #7
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bc80      	pop	{r7}
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	e000ed00 	.word	0xe000ed00

08001bfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	db0b      	blt.n	8001c26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	f003 021f 	and.w	r2, r3, #31
 8001c14:	4906      	ldr	r1, [pc, #24]	@ (8001c30 <__NVIC_EnableIRQ+0x34>)
 8001c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1a:	095b      	lsrs	r3, r3, #5
 8001c1c:	2001      	movs	r0, #1
 8001c1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bc80      	pop	{r7}
 8001c2e:	4770      	bx	lr
 8001c30:	e000e100 	.word	0xe000e100

08001c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	6039      	str	r1, [r7, #0]
 8001c3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	db0a      	blt.n	8001c5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	490c      	ldr	r1, [pc, #48]	@ (8001c80 <__NVIC_SetPriority+0x4c>)
 8001c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c52:	0112      	lsls	r2, r2, #4
 8001c54:	b2d2      	uxtb	r2, r2
 8001c56:	440b      	add	r3, r1
 8001c58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c5c:	e00a      	b.n	8001c74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	4908      	ldr	r1, [pc, #32]	@ (8001c84 <__NVIC_SetPriority+0x50>)
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	f003 030f 	and.w	r3, r3, #15
 8001c6a:	3b04      	subs	r3, #4
 8001c6c:	0112      	lsls	r2, r2, #4
 8001c6e:	b2d2      	uxtb	r2, r2
 8001c70:	440b      	add	r3, r1
 8001c72:	761a      	strb	r2, [r3, #24]
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bc80      	pop	{r7}
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	e000e100 	.word	0xe000e100
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b089      	sub	sp, #36	@ 0x24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	f1c3 0307 	rsb	r3, r3, #7
 8001ca2:	2b04      	cmp	r3, #4
 8001ca4:	bf28      	it	cs
 8001ca6:	2304      	movcs	r3, #4
 8001ca8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	3304      	adds	r3, #4
 8001cae:	2b06      	cmp	r3, #6
 8001cb0:	d902      	bls.n	8001cb8 <NVIC_EncodePriority+0x30>
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	3b03      	subs	r3, #3
 8001cb6:	e000      	b.n	8001cba <NVIC_EncodePriority+0x32>
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43da      	mvns	r2, r3
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	401a      	ands	r2, r3
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cda:	43d9      	mvns	r1, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce0:	4313      	orrs	r3, r2
         );
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3724      	adds	r7, #36	@ 0x24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bc80      	pop	{r7}
 8001cea:	4770      	bx	lr

08001cec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cfc:	d301      	bcc.n	8001d02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e00f      	b.n	8001d22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d02:	4a0a      	ldr	r2, [pc, #40]	@ (8001d2c <SysTick_Config+0x40>)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3b01      	subs	r3, #1
 8001d08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d0a:	210f      	movs	r1, #15
 8001d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d10:	f7ff ff90 	bl	8001c34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d14:	4b05      	ldr	r3, [pc, #20]	@ (8001d2c <SysTick_Config+0x40>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d1a:	4b04      	ldr	r3, [pc, #16]	@ (8001d2c <SysTick_Config+0x40>)
 8001d1c:	2207      	movs	r2, #7
 8001d1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	e000e010 	.word	0xe000e010

08001d30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f7ff ff2d 	bl	8001b98 <__NVIC_SetPriorityGrouping>
}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b086      	sub	sp, #24
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	60b9      	str	r1, [r7, #8]
 8001d50:	607a      	str	r2, [r7, #4]
 8001d52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d58:	f7ff ff42 	bl	8001be0 <__NVIC_GetPriorityGrouping>
 8001d5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	68b9      	ldr	r1, [r7, #8]
 8001d62:	6978      	ldr	r0, [r7, #20]
 8001d64:	f7ff ff90 	bl	8001c88 <NVIC_EncodePriority>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d6e:	4611      	mov	r1, r2
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff ff5f 	bl	8001c34 <__NVIC_SetPriority>
}
 8001d76:	bf00      	nop
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b082      	sub	sp, #8
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	4603      	mov	r3, r0
 8001d86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff ff35 	bl	8001bfc <__NVIC_EnableIRQ>
}
 8001d92:	bf00      	nop
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b082      	sub	sp, #8
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7ff ffa2 	bl	8001cec <SysTick_Config>
 8001da8:	4603      	mov	r3, r0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001db2:	b480      	push	{r7}
 8001db4:	b085      	sub	sp, #20
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d008      	beq.n	8001ddc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2204      	movs	r2, #4
 8001dce:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e020      	b.n	8001e1e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f022 020e 	bic.w	r2, r2, #14
 8001dea:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f022 0201 	bic.w	r2, r2, #1
 8001dfa:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e04:	2101      	movs	r1, #1
 8001e06:	fa01 f202 	lsl.w	r2, r1, r2
 8001e0a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3714      	adds	r7, #20
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bc80      	pop	{r7}
 8001e26:	4770      	bx	lr

08001e28 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e30:	2300      	movs	r3, #0
 8001e32:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d005      	beq.n	8001e4c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2204      	movs	r2, #4
 8001e44:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	73fb      	strb	r3, [r7, #15]
 8001e4a:	e051      	b.n	8001ef0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f022 020e 	bic.w	r2, r2, #14
 8001e5a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f022 0201 	bic.w	r2, r2, #1
 8001e6a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a22      	ldr	r2, [pc, #136]	@ (8001efc <HAL_DMA_Abort_IT+0xd4>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d029      	beq.n	8001eca <HAL_DMA_Abort_IT+0xa2>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a21      	ldr	r2, [pc, #132]	@ (8001f00 <HAL_DMA_Abort_IT+0xd8>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d022      	beq.n	8001ec6 <HAL_DMA_Abort_IT+0x9e>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a1f      	ldr	r2, [pc, #124]	@ (8001f04 <HAL_DMA_Abort_IT+0xdc>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d01a      	beq.n	8001ec0 <HAL_DMA_Abort_IT+0x98>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a1e      	ldr	r2, [pc, #120]	@ (8001f08 <HAL_DMA_Abort_IT+0xe0>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d012      	beq.n	8001eba <HAL_DMA_Abort_IT+0x92>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a1c      	ldr	r2, [pc, #112]	@ (8001f0c <HAL_DMA_Abort_IT+0xe4>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d00a      	beq.n	8001eb4 <HAL_DMA_Abort_IT+0x8c>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a1b      	ldr	r2, [pc, #108]	@ (8001f10 <HAL_DMA_Abort_IT+0xe8>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d102      	bne.n	8001eae <HAL_DMA_Abort_IT+0x86>
 8001ea8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001eac:	e00e      	b.n	8001ecc <HAL_DMA_Abort_IT+0xa4>
 8001eae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001eb2:	e00b      	b.n	8001ecc <HAL_DMA_Abort_IT+0xa4>
 8001eb4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001eb8:	e008      	b.n	8001ecc <HAL_DMA_Abort_IT+0xa4>
 8001eba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ebe:	e005      	b.n	8001ecc <HAL_DMA_Abort_IT+0xa4>
 8001ec0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ec4:	e002      	b.n	8001ecc <HAL_DMA_Abort_IT+0xa4>
 8001ec6:	2310      	movs	r3, #16
 8001ec8:	e000      	b.n	8001ecc <HAL_DMA_Abort_IT+0xa4>
 8001eca:	2301      	movs	r3, #1
 8001ecc:	4a11      	ldr	r2, [pc, #68]	@ (8001f14 <HAL_DMA_Abort_IT+0xec>)
 8001ece:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d003      	beq.n	8001ef0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	4798      	blx	r3
    } 
  }
  return status;
 8001ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40020008 	.word	0x40020008
 8001f00:	4002001c 	.word	0x4002001c
 8001f04:	40020030 	.word	0x40020030
 8001f08:	40020044 	.word	0x40020044
 8001f0c:	40020058 	.word	0x40020058
 8001f10:	4002006c 	.word	0x4002006c
 8001f14:	40020000 	.word	0x40020000

08001f18 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001f26:	b2db      	uxtb	r3, r3
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bc80      	pop	{r7}
 8001f30:	4770      	bx	lr
	...

08001f34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b08b      	sub	sp, #44	@ 0x2c
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f42:	2300      	movs	r3, #0
 8001f44:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f46:	e169      	b.n	800221c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f48:	2201      	movs	r2, #1
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	69fa      	ldr	r2, [r7, #28]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	f040 8158 	bne.w	8002216 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	4a9a      	ldr	r2, [pc, #616]	@ (80021d4 <HAL_GPIO_Init+0x2a0>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d05e      	beq.n	800202e <HAL_GPIO_Init+0xfa>
 8001f70:	4a98      	ldr	r2, [pc, #608]	@ (80021d4 <HAL_GPIO_Init+0x2a0>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d875      	bhi.n	8002062 <HAL_GPIO_Init+0x12e>
 8001f76:	4a98      	ldr	r2, [pc, #608]	@ (80021d8 <HAL_GPIO_Init+0x2a4>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d058      	beq.n	800202e <HAL_GPIO_Init+0xfa>
 8001f7c:	4a96      	ldr	r2, [pc, #600]	@ (80021d8 <HAL_GPIO_Init+0x2a4>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d86f      	bhi.n	8002062 <HAL_GPIO_Init+0x12e>
 8001f82:	4a96      	ldr	r2, [pc, #600]	@ (80021dc <HAL_GPIO_Init+0x2a8>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d052      	beq.n	800202e <HAL_GPIO_Init+0xfa>
 8001f88:	4a94      	ldr	r2, [pc, #592]	@ (80021dc <HAL_GPIO_Init+0x2a8>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d869      	bhi.n	8002062 <HAL_GPIO_Init+0x12e>
 8001f8e:	4a94      	ldr	r2, [pc, #592]	@ (80021e0 <HAL_GPIO_Init+0x2ac>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d04c      	beq.n	800202e <HAL_GPIO_Init+0xfa>
 8001f94:	4a92      	ldr	r2, [pc, #584]	@ (80021e0 <HAL_GPIO_Init+0x2ac>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d863      	bhi.n	8002062 <HAL_GPIO_Init+0x12e>
 8001f9a:	4a92      	ldr	r2, [pc, #584]	@ (80021e4 <HAL_GPIO_Init+0x2b0>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d046      	beq.n	800202e <HAL_GPIO_Init+0xfa>
 8001fa0:	4a90      	ldr	r2, [pc, #576]	@ (80021e4 <HAL_GPIO_Init+0x2b0>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d85d      	bhi.n	8002062 <HAL_GPIO_Init+0x12e>
 8001fa6:	2b12      	cmp	r3, #18
 8001fa8:	d82a      	bhi.n	8002000 <HAL_GPIO_Init+0xcc>
 8001faa:	2b12      	cmp	r3, #18
 8001fac:	d859      	bhi.n	8002062 <HAL_GPIO_Init+0x12e>
 8001fae:	a201      	add	r2, pc, #4	@ (adr r2, 8001fb4 <HAL_GPIO_Init+0x80>)
 8001fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fb4:	0800202f 	.word	0x0800202f
 8001fb8:	08002009 	.word	0x08002009
 8001fbc:	0800201b 	.word	0x0800201b
 8001fc0:	0800205d 	.word	0x0800205d
 8001fc4:	08002063 	.word	0x08002063
 8001fc8:	08002063 	.word	0x08002063
 8001fcc:	08002063 	.word	0x08002063
 8001fd0:	08002063 	.word	0x08002063
 8001fd4:	08002063 	.word	0x08002063
 8001fd8:	08002063 	.word	0x08002063
 8001fdc:	08002063 	.word	0x08002063
 8001fe0:	08002063 	.word	0x08002063
 8001fe4:	08002063 	.word	0x08002063
 8001fe8:	08002063 	.word	0x08002063
 8001fec:	08002063 	.word	0x08002063
 8001ff0:	08002063 	.word	0x08002063
 8001ff4:	08002063 	.word	0x08002063
 8001ff8:	08002011 	.word	0x08002011
 8001ffc:	08002025 	.word	0x08002025
 8002000:	4a79      	ldr	r2, [pc, #484]	@ (80021e8 <HAL_GPIO_Init+0x2b4>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d013      	beq.n	800202e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002006:	e02c      	b.n	8002062 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	623b      	str	r3, [r7, #32]
          break;
 800200e:	e029      	b.n	8002064 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	3304      	adds	r3, #4
 8002016:	623b      	str	r3, [r7, #32]
          break;
 8002018:	e024      	b.n	8002064 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	3308      	adds	r3, #8
 8002020:	623b      	str	r3, [r7, #32]
          break;
 8002022:	e01f      	b.n	8002064 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	330c      	adds	r3, #12
 800202a:	623b      	str	r3, [r7, #32]
          break;
 800202c:	e01a      	b.n	8002064 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d102      	bne.n	800203c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002036:	2304      	movs	r3, #4
 8002038:	623b      	str	r3, [r7, #32]
          break;
 800203a:	e013      	b.n	8002064 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d105      	bne.n	8002050 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002044:	2308      	movs	r3, #8
 8002046:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	69fa      	ldr	r2, [r7, #28]
 800204c:	611a      	str	r2, [r3, #16]
          break;
 800204e:	e009      	b.n	8002064 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002050:	2308      	movs	r3, #8
 8002052:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	69fa      	ldr	r2, [r7, #28]
 8002058:	615a      	str	r2, [r3, #20]
          break;
 800205a:	e003      	b.n	8002064 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800205c:	2300      	movs	r3, #0
 800205e:	623b      	str	r3, [r7, #32]
          break;
 8002060:	e000      	b.n	8002064 <HAL_GPIO_Init+0x130>
          break;
 8002062:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	2bff      	cmp	r3, #255	@ 0xff
 8002068:	d801      	bhi.n	800206e <HAL_GPIO_Init+0x13a>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	e001      	b.n	8002072 <HAL_GPIO_Init+0x13e>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	3304      	adds	r3, #4
 8002072:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	2bff      	cmp	r3, #255	@ 0xff
 8002078:	d802      	bhi.n	8002080 <HAL_GPIO_Init+0x14c>
 800207a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	e002      	b.n	8002086 <HAL_GPIO_Init+0x152>
 8002080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002082:	3b08      	subs	r3, #8
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	210f      	movs	r1, #15
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	fa01 f303 	lsl.w	r3, r1, r3
 8002094:	43db      	mvns	r3, r3
 8002096:	401a      	ands	r2, r3
 8002098:	6a39      	ldr	r1, [r7, #32]
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	fa01 f303 	lsl.w	r3, r1, r3
 80020a0:	431a      	orrs	r2, r3
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f000 80b1 	beq.w	8002216 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020b4:	4b4d      	ldr	r3, [pc, #308]	@ (80021ec <HAL_GPIO_Init+0x2b8>)
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	4a4c      	ldr	r2, [pc, #304]	@ (80021ec <HAL_GPIO_Init+0x2b8>)
 80020ba:	f043 0301 	orr.w	r3, r3, #1
 80020be:	6193      	str	r3, [r2, #24]
 80020c0:	4b4a      	ldr	r3, [pc, #296]	@ (80021ec <HAL_GPIO_Init+0x2b8>)
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	60bb      	str	r3, [r7, #8]
 80020ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020cc:	4a48      	ldr	r2, [pc, #288]	@ (80021f0 <HAL_GPIO_Init+0x2bc>)
 80020ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d0:	089b      	lsrs	r3, r3, #2
 80020d2:	3302      	adds	r3, #2
 80020d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020dc:	f003 0303 	and.w	r3, r3, #3
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	220f      	movs	r2, #15
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	43db      	mvns	r3, r3
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	4013      	ands	r3, r2
 80020ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a40      	ldr	r2, [pc, #256]	@ (80021f4 <HAL_GPIO_Init+0x2c0>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d013      	beq.n	8002120 <HAL_GPIO_Init+0x1ec>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4a3f      	ldr	r2, [pc, #252]	@ (80021f8 <HAL_GPIO_Init+0x2c4>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d00d      	beq.n	800211c <HAL_GPIO_Init+0x1e8>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a3e      	ldr	r2, [pc, #248]	@ (80021fc <HAL_GPIO_Init+0x2c8>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d007      	beq.n	8002118 <HAL_GPIO_Init+0x1e4>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a3d      	ldr	r2, [pc, #244]	@ (8002200 <HAL_GPIO_Init+0x2cc>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d101      	bne.n	8002114 <HAL_GPIO_Init+0x1e0>
 8002110:	2303      	movs	r3, #3
 8002112:	e006      	b.n	8002122 <HAL_GPIO_Init+0x1ee>
 8002114:	2304      	movs	r3, #4
 8002116:	e004      	b.n	8002122 <HAL_GPIO_Init+0x1ee>
 8002118:	2302      	movs	r3, #2
 800211a:	e002      	b.n	8002122 <HAL_GPIO_Init+0x1ee>
 800211c:	2301      	movs	r3, #1
 800211e:	e000      	b.n	8002122 <HAL_GPIO_Init+0x1ee>
 8002120:	2300      	movs	r3, #0
 8002122:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002124:	f002 0203 	and.w	r2, r2, #3
 8002128:	0092      	lsls	r2, r2, #2
 800212a:	4093      	lsls	r3, r2
 800212c:	68fa      	ldr	r2, [r7, #12]
 800212e:	4313      	orrs	r3, r2
 8002130:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002132:	492f      	ldr	r1, [pc, #188]	@ (80021f0 <HAL_GPIO_Init+0x2bc>)
 8002134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002136:	089b      	lsrs	r3, r3, #2
 8002138:	3302      	adds	r3, #2
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d006      	beq.n	800215a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800214c:	4b2d      	ldr	r3, [pc, #180]	@ (8002204 <HAL_GPIO_Init+0x2d0>)
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	492c      	ldr	r1, [pc, #176]	@ (8002204 <HAL_GPIO_Init+0x2d0>)
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	4313      	orrs	r3, r2
 8002156:	608b      	str	r3, [r1, #8]
 8002158:	e006      	b.n	8002168 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800215a:	4b2a      	ldr	r3, [pc, #168]	@ (8002204 <HAL_GPIO_Init+0x2d0>)
 800215c:	689a      	ldr	r2, [r3, #8]
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	43db      	mvns	r3, r3
 8002162:	4928      	ldr	r1, [pc, #160]	@ (8002204 <HAL_GPIO_Init+0x2d0>)
 8002164:	4013      	ands	r3, r2
 8002166:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d006      	beq.n	8002182 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002174:	4b23      	ldr	r3, [pc, #140]	@ (8002204 <HAL_GPIO_Init+0x2d0>)
 8002176:	68da      	ldr	r2, [r3, #12]
 8002178:	4922      	ldr	r1, [pc, #136]	@ (8002204 <HAL_GPIO_Init+0x2d0>)
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	4313      	orrs	r3, r2
 800217e:	60cb      	str	r3, [r1, #12]
 8002180:	e006      	b.n	8002190 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002182:	4b20      	ldr	r3, [pc, #128]	@ (8002204 <HAL_GPIO_Init+0x2d0>)
 8002184:	68da      	ldr	r2, [r3, #12]
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	43db      	mvns	r3, r3
 800218a:	491e      	ldr	r1, [pc, #120]	@ (8002204 <HAL_GPIO_Init+0x2d0>)
 800218c:	4013      	ands	r3, r2
 800218e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d006      	beq.n	80021aa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800219c:	4b19      	ldr	r3, [pc, #100]	@ (8002204 <HAL_GPIO_Init+0x2d0>)
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	4918      	ldr	r1, [pc, #96]	@ (8002204 <HAL_GPIO_Init+0x2d0>)
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	604b      	str	r3, [r1, #4]
 80021a8:	e006      	b.n	80021b8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021aa:	4b16      	ldr	r3, [pc, #88]	@ (8002204 <HAL_GPIO_Init+0x2d0>)
 80021ac:	685a      	ldr	r2, [r3, #4]
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	43db      	mvns	r3, r3
 80021b2:	4914      	ldr	r1, [pc, #80]	@ (8002204 <HAL_GPIO_Init+0x2d0>)
 80021b4:	4013      	ands	r3, r2
 80021b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d021      	beq.n	8002208 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80021c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002204 <HAL_GPIO_Init+0x2d0>)
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	490e      	ldr	r1, [pc, #56]	@ (8002204 <HAL_GPIO_Init+0x2d0>)
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	600b      	str	r3, [r1, #0]
 80021d0:	e021      	b.n	8002216 <HAL_GPIO_Init+0x2e2>
 80021d2:	bf00      	nop
 80021d4:	10320000 	.word	0x10320000
 80021d8:	10310000 	.word	0x10310000
 80021dc:	10220000 	.word	0x10220000
 80021e0:	10210000 	.word	0x10210000
 80021e4:	10120000 	.word	0x10120000
 80021e8:	10110000 	.word	0x10110000
 80021ec:	40021000 	.word	0x40021000
 80021f0:	40010000 	.word	0x40010000
 80021f4:	40010800 	.word	0x40010800
 80021f8:	40010c00 	.word	0x40010c00
 80021fc:	40011000 	.word	0x40011000
 8002200:	40011400 	.word	0x40011400
 8002204:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002208:	4b0b      	ldr	r3, [pc, #44]	@ (8002238 <HAL_GPIO_Init+0x304>)
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	43db      	mvns	r3, r3
 8002210:	4909      	ldr	r1, [pc, #36]	@ (8002238 <HAL_GPIO_Init+0x304>)
 8002212:	4013      	ands	r3, r2
 8002214:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002218:	3301      	adds	r3, #1
 800221a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002222:	fa22 f303 	lsr.w	r3, r2, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	f47f ae8e 	bne.w	8001f48 <HAL_GPIO_Init+0x14>
  }
}
 800222c:	bf00      	nop
 800222e:	bf00      	nop
 8002230:	372c      	adds	r7, #44	@ 0x2c
 8002232:	46bd      	mov	sp, r7
 8002234:	bc80      	pop	{r7}
 8002236:	4770      	bx	lr
 8002238:	40010400 	.word	0x40010400

0800223c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	460b      	mov	r3, r1
 8002246:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	887b      	ldrh	r3, [r7, #2]
 800224e:	4013      	ands	r3, r2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d002      	beq.n	800225a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002254:	2301      	movs	r3, #1
 8002256:	73fb      	strb	r3, [r7, #15]
 8002258:	e001      	b.n	800225e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800225a:	2300      	movs	r3, #0
 800225c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800225e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002260:	4618      	mov	r0, r3
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	bc80      	pop	{r7}
 8002268:	4770      	bx	lr

0800226a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800226a:	b480      	push	{r7}
 800226c:	b083      	sub	sp, #12
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
 8002272:	460b      	mov	r3, r1
 8002274:	807b      	strh	r3, [r7, #2]
 8002276:	4613      	mov	r3, r2
 8002278:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800227a:	787b      	ldrb	r3, [r7, #1]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d003      	beq.n	8002288 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002280:	887a      	ldrh	r2, [r7, #2]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002286:	e003      	b.n	8002290 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002288:	887b      	ldrh	r3, [r7, #2]
 800228a:	041a      	lsls	r2, r3, #16
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	611a      	str	r2, [r3, #16]
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	bc80      	pop	{r7}
 8002298:	4770      	bx	lr
	...

0800229c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e12b      	b.n	8002506 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d106      	bne.n	80022c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f7fe fe48 	bl	8000f58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2224      	movs	r2, #36	@ 0x24
 80022cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f022 0201 	bic.w	r2, r2, #1
 80022de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80022ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80022fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002300:	f002 fe6e 	bl	8004fe0 <HAL_RCC_GetPCLK1Freq>
 8002304:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	4a81      	ldr	r2, [pc, #516]	@ (8002510 <HAL_I2C_Init+0x274>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d807      	bhi.n	8002320 <HAL_I2C_Init+0x84>
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	4a80      	ldr	r2, [pc, #512]	@ (8002514 <HAL_I2C_Init+0x278>)
 8002314:	4293      	cmp	r3, r2
 8002316:	bf94      	ite	ls
 8002318:	2301      	movls	r3, #1
 800231a:	2300      	movhi	r3, #0
 800231c:	b2db      	uxtb	r3, r3
 800231e:	e006      	b.n	800232e <HAL_I2C_Init+0x92>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	4a7d      	ldr	r2, [pc, #500]	@ (8002518 <HAL_I2C_Init+0x27c>)
 8002324:	4293      	cmp	r3, r2
 8002326:	bf94      	ite	ls
 8002328:	2301      	movls	r3, #1
 800232a:	2300      	movhi	r3, #0
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e0e7      	b.n	8002506 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	4a78      	ldr	r2, [pc, #480]	@ (800251c <HAL_I2C_Init+0x280>)
 800233a:	fba2 2303 	umull	r2, r3, r2, r3
 800233e:	0c9b      	lsrs	r3, r3, #18
 8002340:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68ba      	ldr	r2, [r7, #8]
 8002352:	430a      	orrs	r2, r1
 8002354:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	4a6a      	ldr	r2, [pc, #424]	@ (8002510 <HAL_I2C_Init+0x274>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d802      	bhi.n	8002370 <HAL_I2C_Init+0xd4>
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	3301      	adds	r3, #1
 800236e:	e009      	b.n	8002384 <HAL_I2C_Init+0xe8>
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002376:	fb02 f303 	mul.w	r3, r2, r3
 800237a:	4a69      	ldr	r2, [pc, #420]	@ (8002520 <HAL_I2C_Init+0x284>)
 800237c:	fba2 2303 	umull	r2, r3, r2, r3
 8002380:	099b      	lsrs	r3, r3, #6
 8002382:	3301      	adds	r3, #1
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	6812      	ldr	r2, [r2, #0]
 8002388:	430b      	orrs	r3, r1
 800238a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002396:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	495c      	ldr	r1, [pc, #368]	@ (8002510 <HAL_I2C_Init+0x274>)
 80023a0:	428b      	cmp	r3, r1
 80023a2:	d819      	bhi.n	80023d8 <HAL_I2C_Init+0x13c>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	1e59      	subs	r1, r3, #1
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80023b2:	1c59      	adds	r1, r3, #1
 80023b4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80023b8:	400b      	ands	r3, r1
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00a      	beq.n	80023d4 <HAL_I2C_Init+0x138>
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	1e59      	subs	r1, r3, #1
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80023cc:	3301      	adds	r3, #1
 80023ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023d2:	e051      	b.n	8002478 <HAL_I2C_Init+0x1dc>
 80023d4:	2304      	movs	r3, #4
 80023d6:	e04f      	b.n	8002478 <HAL_I2C_Init+0x1dc>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d111      	bne.n	8002404 <HAL_I2C_Init+0x168>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	1e58      	subs	r0, r3, #1
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6859      	ldr	r1, [r3, #4]
 80023e8:	460b      	mov	r3, r1
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	440b      	add	r3, r1
 80023ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80023f2:	3301      	adds	r3, #1
 80023f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	bf0c      	ite	eq
 80023fc:	2301      	moveq	r3, #1
 80023fe:	2300      	movne	r3, #0
 8002400:	b2db      	uxtb	r3, r3
 8002402:	e012      	b.n	800242a <HAL_I2C_Init+0x18e>
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	1e58      	subs	r0, r3, #1
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6859      	ldr	r1, [r3, #4]
 800240c:	460b      	mov	r3, r1
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	440b      	add	r3, r1
 8002412:	0099      	lsls	r1, r3, #2
 8002414:	440b      	add	r3, r1
 8002416:	fbb0 f3f3 	udiv	r3, r0, r3
 800241a:	3301      	adds	r3, #1
 800241c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002420:	2b00      	cmp	r3, #0
 8002422:	bf0c      	ite	eq
 8002424:	2301      	moveq	r3, #1
 8002426:	2300      	movne	r3, #0
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <HAL_I2C_Init+0x196>
 800242e:	2301      	movs	r3, #1
 8002430:	e022      	b.n	8002478 <HAL_I2C_Init+0x1dc>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10e      	bne.n	8002458 <HAL_I2C_Init+0x1bc>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	1e58      	subs	r0, r3, #1
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6859      	ldr	r1, [r3, #4]
 8002442:	460b      	mov	r3, r1
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	440b      	add	r3, r1
 8002448:	fbb0 f3f3 	udiv	r3, r0, r3
 800244c:	3301      	adds	r3, #1
 800244e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002452:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002456:	e00f      	b.n	8002478 <HAL_I2C_Init+0x1dc>
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	1e58      	subs	r0, r3, #1
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6859      	ldr	r1, [r3, #4]
 8002460:	460b      	mov	r3, r1
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	440b      	add	r3, r1
 8002466:	0099      	lsls	r1, r3, #2
 8002468:	440b      	add	r3, r1
 800246a:	fbb0 f3f3 	udiv	r3, r0, r3
 800246e:	3301      	adds	r3, #1
 8002470:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002474:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002478:	6879      	ldr	r1, [r7, #4]
 800247a:	6809      	ldr	r1, [r1, #0]
 800247c:	4313      	orrs	r3, r2
 800247e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	69da      	ldr	r2, [r3, #28]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	431a      	orrs	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	430a      	orrs	r2, r1
 800249a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80024a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	6911      	ldr	r1, [r2, #16]
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	68d2      	ldr	r2, [r2, #12]
 80024b2:	4311      	orrs	r1, r2
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	6812      	ldr	r2, [r2, #0]
 80024b8:	430b      	orrs	r3, r1
 80024ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	695a      	ldr	r2, [r3, #20]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	431a      	orrs	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	430a      	orrs	r2, r1
 80024d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f042 0201 	orr.w	r2, r2, #1
 80024e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2220      	movs	r2, #32
 80024f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	000186a0 	.word	0x000186a0
 8002514:	001e847f 	.word	0x001e847f
 8002518:	003d08ff 	.word	0x003d08ff
 800251c:	431bde83 	.word	0x431bde83
 8002520:	10624dd3 	.word	0x10624dd3

08002524 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002536:	2b80      	cmp	r3, #128	@ 0x80
 8002538:	d103      	bne.n	8002542 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2200      	movs	r2, #0
 8002540:	611a      	str	r2, [r3, #16]
  }
}
 8002542:	bf00      	nop
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr

0800254c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b088      	sub	sp, #32
 8002550:	af02      	add	r7, sp, #8
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	607a      	str	r2, [r7, #4]
 8002556:	461a      	mov	r2, r3
 8002558:	460b      	mov	r3, r1
 800255a:	817b      	strh	r3, [r7, #10]
 800255c:	4613      	mov	r3, r2
 800255e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002560:	f7ff faec 	bl	8001b3c <HAL_GetTick>
 8002564:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b20      	cmp	r3, #32
 8002570:	f040 80e0 	bne.w	8002734 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	9300      	str	r3, [sp, #0]
 8002578:	2319      	movs	r3, #25
 800257a:	2201      	movs	r2, #1
 800257c:	4970      	ldr	r1, [pc, #448]	@ (8002740 <HAL_I2C_Master_Transmit+0x1f4>)
 800257e:	68f8      	ldr	r0, [r7, #12]
 8002580:	f001 ff40 	bl	8004404 <I2C_WaitOnFlagUntilTimeout>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800258a:	2302      	movs	r3, #2
 800258c:	e0d3      	b.n	8002736 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002594:	2b01      	cmp	r3, #1
 8002596:	d101      	bne.n	800259c <HAL_I2C_Master_Transmit+0x50>
 8002598:	2302      	movs	r3, #2
 800259a:	e0cc      	b.n	8002736 <HAL_I2C_Master_Transmit+0x1ea>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d007      	beq.n	80025c2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f042 0201 	orr.w	r2, r2, #1
 80025c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2221      	movs	r2, #33	@ 0x21
 80025d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2210      	movs	r2, #16
 80025de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2200      	movs	r2, #0
 80025e6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	893a      	ldrh	r2, [r7, #8]
 80025f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	4a50      	ldr	r2, [pc, #320]	@ (8002744 <HAL_I2C_Master_Transmit+0x1f8>)
 8002602:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002604:	8979      	ldrh	r1, [r7, #10]
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	6a3a      	ldr	r2, [r7, #32]
 800260a:	68f8      	ldr	r0, [r7, #12]
 800260c:	f001 fdd0 	bl	80041b0 <I2C_MasterRequestWrite>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e08d      	b.n	8002736 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800261a:	2300      	movs	r3, #0
 800261c:	613b      	str	r3, [r7, #16]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	695b      	ldr	r3, [r3, #20]
 8002624:	613b      	str	r3, [r7, #16]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	613b      	str	r3, [r7, #16]
 800262e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002630:	e066      	b.n	8002700 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	6a39      	ldr	r1, [r7, #32]
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f001 fffe 	bl	8004638 <I2C_WaitOnTXEFlagUntilTimeout>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00d      	beq.n	800265e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002646:	2b04      	cmp	r3, #4
 8002648:	d107      	bne.n	800265a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002658:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e06b      	b.n	8002736 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002662:	781a      	ldrb	r2, [r3, #0]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800266e:	1c5a      	adds	r2, r3, #1
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002678:	b29b      	uxth	r3, r3
 800267a:	3b01      	subs	r3, #1
 800267c:	b29a      	uxth	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002686:	3b01      	subs	r3, #1
 8002688:	b29a      	uxth	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	695b      	ldr	r3, [r3, #20]
 8002694:	f003 0304 	and.w	r3, r3, #4
 8002698:	2b04      	cmp	r3, #4
 800269a:	d11b      	bne.n	80026d4 <HAL_I2C_Master_Transmit+0x188>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d017      	beq.n	80026d4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a8:	781a      	ldrb	r2, [r3, #0]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b4:	1c5a      	adds	r2, r3, #1
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026be:	b29b      	uxth	r3, r3
 80026c0:	3b01      	subs	r3, #1
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026cc:	3b01      	subs	r3, #1
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026d4:	697a      	ldr	r2, [r7, #20]
 80026d6:	6a39      	ldr	r1, [r7, #32]
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f001 fff5 	bl	80046c8 <I2C_WaitOnBTFFlagUntilTimeout>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d00d      	beq.n	8002700 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e8:	2b04      	cmp	r3, #4
 80026ea:	d107      	bne.n	80026fc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026fa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e01a      	b.n	8002736 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002704:	2b00      	cmp	r3, #0
 8002706:	d194      	bne.n	8002632 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002716:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2220      	movs	r2, #32
 800271c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002730:	2300      	movs	r3, #0
 8002732:	e000      	b.n	8002736 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002734:	2302      	movs	r3, #2
  }
}
 8002736:	4618      	mov	r0, r3
 8002738:	3718      	adds	r7, #24
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	00100002 	.word	0x00100002
 8002744:	ffff0000 	.word	0xffff0000

08002748 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b08a      	sub	sp, #40	@ 0x28
 800274c:	af02      	add	r7, sp, #8
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	607a      	str	r2, [r7, #4]
 8002752:	603b      	str	r3, [r7, #0]
 8002754:	460b      	mov	r3, r1
 8002756:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002758:	f7ff f9f0 	bl	8001b3c <HAL_GetTick>
 800275c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800275e:	2300      	movs	r3, #0
 8002760:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b20      	cmp	r3, #32
 800276c:	f040 8111 	bne.w	8002992 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	9300      	str	r3, [sp, #0]
 8002774:	2319      	movs	r3, #25
 8002776:	2201      	movs	r2, #1
 8002778:	4988      	ldr	r1, [pc, #544]	@ (800299c <HAL_I2C_IsDeviceReady+0x254>)
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f001 fe42 	bl	8004404 <I2C_WaitOnFlagUntilTimeout>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002786:	2302      	movs	r3, #2
 8002788:	e104      	b.n	8002994 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002790:	2b01      	cmp	r3, #1
 8002792:	d101      	bne.n	8002798 <HAL_I2C_IsDeviceReady+0x50>
 8002794:	2302      	movs	r3, #2
 8002796:	e0fd      	b.n	8002994 <HAL_I2C_IsDeviceReady+0x24c>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d007      	beq.n	80027be <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f042 0201 	orr.w	r2, r2, #1
 80027bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2224      	movs	r2, #36	@ 0x24
 80027d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2200      	movs	r2, #0
 80027da:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	4a70      	ldr	r2, [pc, #448]	@ (80029a0 <HAL_I2C_IsDeviceReady+0x258>)
 80027e0:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027f0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	f001 fe00 	bl	8004404 <I2C_WaitOnFlagUntilTimeout>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00d      	beq.n	8002826 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002814:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002818:	d103      	bne.n	8002822 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002820:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e0b6      	b.n	8002994 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002826:	897b      	ldrh	r3, [r7, #10]
 8002828:	b2db      	uxtb	r3, r3
 800282a:	461a      	mov	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002834:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002836:	f7ff f981 	bl	8001b3c <HAL_GetTick>
 800283a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b02      	cmp	r3, #2
 8002848:	bf0c      	ite	eq
 800284a:	2301      	moveq	r3, #1
 800284c:	2300      	movne	r3, #0
 800284e:	b2db      	uxtb	r3, r3
 8002850:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	695b      	ldr	r3, [r3, #20]
 8002858:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800285c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002860:	bf0c      	ite	eq
 8002862:	2301      	moveq	r3, #1
 8002864:	2300      	movne	r3, #0
 8002866:	b2db      	uxtb	r3, r3
 8002868:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800286a:	e025      	b.n	80028b8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800286c:	f7ff f966 	bl	8001b3c <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	429a      	cmp	r2, r3
 800287a:	d302      	bcc.n	8002882 <HAL_I2C_IsDeviceReady+0x13a>
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d103      	bne.n	800288a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	22a0      	movs	r2, #160	@ 0xa0
 8002886:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	695b      	ldr	r3, [r3, #20]
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b02      	cmp	r3, #2
 8002896:	bf0c      	ite	eq
 8002898:	2301      	moveq	r3, #1
 800289a:	2300      	movne	r3, #0
 800289c:	b2db      	uxtb	r3, r3
 800289e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028ae:	bf0c      	ite	eq
 80028b0:	2301      	moveq	r3, #1
 80028b2:	2300      	movne	r3, #0
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	2ba0      	cmp	r3, #160	@ 0xa0
 80028c2:	d005      	beq.n	80028d0 <HAL_I2C_IsDeviceReady+0x188>
 80028c4:	7dfb      	ldrb	r3, [r7, #23]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d102      	bne.n	80028d0 <HAL_I2C_IsDeviceReady+0x188>
 80028ca:	7dbb      	ldrb	r3, [r7, #22]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d0cd      	beq.n	800286c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2220      	movs	r2, #32
 80028d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d129      	bne.n	800293a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028f4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028f6:	2300      	movs	r3, #0
 80028f8:	613b      	str	r3, [r7, #16]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	695b      	ldr	r3, [r3, #20]
 8002900:	613b      	str	r3, [r7, #16]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	613b      	str	r3, [r7, #16]
 800290a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	9300      	str	r3, [sp, #0]
 8002910:	2319      	movs	r3, #25
 8002912:	2201      	movs	r2, #1
 8002914:	4921      	ldr	r1, [pc, #132]	@ (800299c <HAL_I2C_IsDeviceReady+0x254>)
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f001 fd74 	bl	8004404 <I2C_WaitOnFlagUntilTimeout>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e036      	b.n	8002994 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2220      	movs	r2, #32
 800292a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002936:	2300      	movs	r3, #0
 8002938:	e02c      	b.n	8002994 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002948:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002952:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	9300      	str	r3, [sp, #0]
 8002958:	2319      	movs	r3, #25
 800295a:	2201      	movs	r2, #1
 800295c:	490f      	ldr	r1, [pc, #60]	@ (800299c <HAL_I2C_IsDeviceReady+0x254>)
 800295e:	68f8      	ldr	r0, [r7, #12]
 8002960:	f001 fd50 	bl	8004404 <I2C_WaitOnFlagUntilTimeout>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e012      	b.n	8002994 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	3301      	adds	r3, #1
 8002972:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	429a      	cmp	r2, r3
 800297a:	f4ff af32 	bcc.w	80027e2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2220      	movs	r2, #32
 8002982:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e000      	b.n	8002994 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002992:	2302      	movs	r3, #2
  }
}
 8002994:	4618      	mov	r0, r3
 8002996:	3720      	adds	r7, #32
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	00100002 	.word	0x00100002
 80029a0:	ffff0000 	.word	0xffff0000

080029a4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b088      	sub	sp, #32
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80029ac:	2300      	movs	r3, #0
 80029ae:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029bc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80029c4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029cc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80029ce:	7bfb      	ldrb	r3, [r7, #15]
 80029d0:	2b10      	cmp	r3, #16
 80029d2:	d003      	beq.n	80029dc <HAL_I2C_EV_IRQHandler+0x38>
 80029d4:	7bfb      	ldrb	r3, [r7, #15]
 80029d6:	2b40      	cmp	r3, #64	@ 0x40
 80029d8:	f040 80c1 	bne.w	8002b5e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d10d      	bne.n	8002a12 <HAL_I2C_EV_IRQHandler+0x6e>
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80029fc:	d003      	beq.n	8002a06 <HAL_I2C_EV_IRQHandler+0x62>
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002a04:	d101      	bne.n	8002a0a <HAL_I2C_EV_IRQHandler+0x66>
 8002a06:	2301      	movs	r3, #1
 8002a08:	e000      	b.n	8002a0c <HAL_I2C_EV_IRQHandler+0x68>
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	f000 8132 	beq.w	8002c76 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00c      	beq.n	8002a36 <HAL_I2C_EV_IRQHandler+0x92>
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	0a5b      	lsrs	r3, r3, #9
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d006      	beq.n	8002a36 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f001 fef5 	bl	8004818 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 fd99 	bl	8003566 <I2C_Master_SB>
 8002a34:	e092      	b.n	8002b5c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	08db      	lsrs	r3, r3, #3
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d009      	beq.n	8002a56 <HAL_I2C_EV_IRQHandler+0xb2>
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	0a5b      	lsrs	r3, r3, #9
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d003      	beq.n	8002a56 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 fe0e 	bl	8003670 <I2C_Master_ADD10>
 8002a54:	e082      	b.n	8002b5c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	085b      	lsrs	r3, r3, #1
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d009      	beq.n	8002a76 <HAL_I2C_EV_IRQHandler+0xd2>
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	0a5b      	lsrs	r3, r3, #9
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d003      	beq.n	8002a76 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 fe27 	bl	80036c2 <I2C_Master_ADDR>
 8002a74:	e072      	b.n	8002b5c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	089b      	lsrs	r3, r3, #2
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d03b      	beq.n	8002afa <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a90:	f000 80f3 	beq.w	8002c7a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	09db      	lsrs	r3, r3, #7
 8002a98:	f003 0301 	and.w	r3, r3, #1
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00f      	beq.n	8002ac0 <HAL_I2C_EV_IRQHandler+0x11c>
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	0a9b      	lsrs	r3, r3, #10
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d009      	beq.n	8002ac0 <HAL_I2C_EV_IRQHandler+0x11c>
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	089b      	lsrs	r3, r3, #2
 8002ab0:	f003 0301 	and.w	r3, r3, #1
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d103      	bne.n	8002ac0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 f9f1 	bl	8002ea0 <I2C_MasterTransmit_TXE>
 8002abe:	e04d      	b.n	8002b5c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	089b      	lsrs	r3, r3, #2
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 80d6 	beq.w	8002c7a <HAL_I2C_EV_IRQHandler+0x2d6>
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	0a5b      	lsrs	r3, r3, #9
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f000 80cf 	beq.w	8002c7a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002adc:	7bbb      	ldrb	r3, [r7, #14]
 8002ade:	2b21      	cmp	r3, #33	@ 0x21
 8002ae0:	d103      	bne.n	8002aea <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 fa78 	bl	8002fd8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ae8:	e0c7      	b.n	8002c7a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002aea:	7bfb      	ldrb	r3, [r7, #15]
 8002aec:	2b40      	cmp	r3, #64	@ 0x40
 8002aee:	f040 80c4 	bne.w	8002c7a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 fae6 	bl	80030c4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002af8:	e0bf      	b.n	8002c7a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b08:	f000 80b7 	beq.w	8002c7a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	099b      	lsrs	r3, r3, #6
 8002b10:	f003 0301 	and.w	r3, r3, #1
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00f      	beq.n	8002b38 <HAL_I2C_EV_IRQHandler+0x194>
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	0a9b      	lsrs	r3, r3, #10
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d009      	beq.n	8002b38 <HAL_I2C_EV_IRQHandler+0x194>
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	089b      	lsrs	r3, r3, #2
 8002b28:	f003 0301 	and.w	r3, r3, #1
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d103      	bne.n	8002b38 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 fb5f 	bl	80031f4 <I2C_MasterReceive_RXNE>
 8002b36:	e011      	b.n	8002b5c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	089b      	lsrs	r3, r3, #2
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f000 809a 	beq.w	8002c7a <HAL_I2C_EV_IRQHandler+0x2d6>
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	0a5b      	lsrs	r3, r3, #9
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f000 8093 	beq.w	8002c7a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 fc15 	bl	8003384 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b5a:	e08e      	b.n	8002c7a <HAL_I2C_EV_IRQHandler+0x2d6>
 8002b5c:	e08d      	b.n	8002c7a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d004      	beq.n	8002b70 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	695b      	ldr	r3, [r3, #20]
 8002b6c:	61fb      	str	r3, [r7, #28]
 8002b6e:	e007      	b.n	8002b80 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	085b      	lsrs	r3, r3, #1
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d012      	beq.n	8002bb2 <HAL_I2C_EV_IRQHandler+0x20e>
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	0a5b      	lsrs	r3, r3, #9
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d00c      	beq.n	8002bb2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d003      	beq.n	8002ba8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002ba8:	69b9      	ldr	r1, [r7, #24]
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 ffe0 	bl	8003b70 <I2C_Slave_ADDR>
 8002bb0:	e066      	b.n	8002c80 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	091b      	lsrs	r3, r3, #4
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d009      	beq.n	8002bd2 <HAL_I2C_EV_IRQHandler+0x22e>
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	0a5b      	lsrs	r3, r3, #9
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d003      	beq.n	8002bd2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f001 f81a 	bl	8003c04 <I2C_Slave_STOPF>
 8002bd0:	e056      	b.n	8002c80 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002bd2:	7bbb      	ldrb	r3, [r7, #14]
 8002bd4:	2b21      	cmp	r3, #33	@ 0x21
 8002bd6:	d002      	beq.n	8002bde <HAL_I2C_EV_IRQHandler+0x23a>
 8002bd8:	7bbb      	ldrb	r3, [r7, #14]
 8002bda:	2b29      	cmp	r3, #41	@ 0x29
 8002bdc:	d125      	bne.n	8002c2a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	09db      	lsrs	r3, r3, #7
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00f      	beq.n	8002c0a <HAL_I2C_EV_IRQHandler+0x266>
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	0a9b      	lsrs	r3, r3, #10
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d009      	beq.n	8002c0a <HAL_I2C_EV_IRQHandler+0x266>
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	089b      	lsrs	r3, r3, #2
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d103      	bne.n	8002c0a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 fef8 	bl	80039f8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c08:	e039      	b.n	8002c7e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	089b      	lsrs	r3, r3, #2
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d033      	beq.n	8002c7e <HAL_I2C_EV_IRQHandler+0x2da>
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	0a5b      	lsrs	r3, r3, #9
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d02d      	beq.n	8002c7e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 ff25 	bl	8003a72 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c28:	e029      	b.n	8002c7e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	099b      	lsrs	r3, r3, #6
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00f      	beq.n	8002c56 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	0a9b      	lsrs	r3, r3, #10
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d009      	beq.n	8002c56 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	089b      	lsrs	r3, r3, #2
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d103      	bne.n	8002c56 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 ff2f 	bl	8003ab2 <I2C_SlaveReceive_RXNE>
 8002c54:	e014      	b.n	8002c80 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	089b      	lsrs	r3, r3, #2
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00e      	beq.n	8002c80 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	0a5b      	lsrs	r3, r3, #9
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d008      	beq.n	8002c80 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 ff5d 	bl	8003b2e <I2C_SlaveReceive_BTF>
 8002c74:	e004      	b.n	8002c80 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002c76:	bf00      	nop
 8002c78:	e002      	b.n	8002c80 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c7a:	bf00      	nop
 8002c7c:	e000      	b.n	8002c80 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c7e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002c80:	3720      	adds	r7, #32
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b08a      	sub	sp, #40	@ 0x28
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	695b      	ldr	r3, [r3, #20]
 8002c94:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ca8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002caa:	6a3b      	ldr	r3, [r7, #32]
 8002cac:	0a1b      	lsrs	r3, r3, #8
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d016      	beq.n	8002ce4 <HAL_I2C_ER_IRQHandler+0x5e>
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	0a1b      	lsrs	r3, r3, #8
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d010      	beq.n	8002ce4 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc4:	f043 0301 	orr.w	r3, r3, #1
 8002cc8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002cd2:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ce2:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002ce4:	6a3b      	ldr	r3, [r7, #32]
 8002ce6:	0a5b      	lsrs	r3, r3, #9
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00e      	beq.n	8002d0e <HAL_I2C_ER_IRQHandler+0x88>
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	0a1b      	lsrs	r3, r3, #8
 8002cf4:	f003 0301 	and.w	r3, r3, #1
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d008      	beq.n	8002d0e <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfe:	f043 0302 	orr.w	r3, r3, #2
 8002d02:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8002d0c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002d0e:	6a3b      	ldr	r3, [r7, #32]
 8002d10:	0a9b      	lsrs	r3, r3, #10
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d03f      	beq.n	8002d9a <HAL_I2C_ER_IRQHandler+0x114>
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	0a1b      	lsrs	r3, r3, #8
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d039      	beq.n	8002d9a <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8002d26:	7efb      	ldrb	r3, [r7, #27]
 8002d28:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d38:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d3e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002d40:	7ebb      	ldrb	r3, [r7, #26]
 8002d42:	2b20      	cmp	r3, #32
 8002d44:	d112      	bne.n	8002d6c <HAL_I2C_ER_IRQHandler+0xe6>
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10f      	bne.n	8002d6c <HAL_I2C_ER_IRQHandler+0xe6>
 8002d4c:	7cfb      	ldrb	r3, [r7, #19]
 8002d4e:	2b21      	cmp	r3, #33	@ 0x21
 8002d50:	d008      	beq.n	8002d64 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002d52:	7cfb      	ldrb	r3, [r7, #19]
 8002d54:	2b29      	cmp	r3, #41	@ 0x29
 8002d56:	d005      	beq.n	8002d64 <HAL_I2C_ER_IRQHandler+0xde>
 8002d58:	7cfb      	ldrb	r3, [r7, #19]
 8002d5a:	2b28      	cmp	r3, #40	@ 0x28
 8002d5c:	d106      	bne.n	8002d6c <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2b21      	cmp	r3, #33	@ 0x21
 8002d62:	d103      	bne.n	8002d6c <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f001 f87d 	bl	8003e64 <I2C_Slave_AF>
 8002d6a:	e016      	b.n	8002d9a <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002d74:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d78:	f043 0304 	orr.w	r3, r3, #4
 8002d7c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002d7e:	7efb      	ldrb	r3, [r7, #27]
 8002d80:	2b10      	cmp	r3, #16
 8002d82:	d002      	beq.n	8002d8a <HAL_I2C_ER_IRQHandler+0x104>
 8002d84:	7efb      	ldrb	r3, [r7, #27]
 8002d86:	2b40      	cmp	r3, #64	@ 0x40
 8002d88:	d107      	bne.n	8002d9a <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d98:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002d9a:	6a3b      	ldr	r3, [r7, #32]
 8002d9c:	0adb      	lsrs	r3, r3, #11
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00e      	beq.n	8002dc4 <HAL_I2C_ER_IRQHandler+0x13e>
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	0a1b      	lsrs	r3, r3, #8
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d008      	beq.n	8002dc4 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db4:	f043 0308 	orr.w	r3, r3, #8
 8002db8:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8002dc2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d008      	beq.n	8002ddc <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd0:	431a      	orrs	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f001 f8b8 	bl	8003f4c <I2C_ITError>
  }
}
 8002ddc:	bf00      	nop
 8002dde:	3728      	adds	r7, #40	@ 0x28
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bc80      	pop	{r7}
 8002df4:	4770      	bx	lr

08002df6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002df6:	b480      	push	{r7}
 8002df8:	b083      	sub	sp, #12
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002dfe:	bf00      	nop
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bc80      	pop	{r7}
 8002e06:	4770      	bx	lr

08002e08 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bc80      	pop	{r7}
 8002e18:	4770      	bx	lr

08002e1a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b083      	sub	sp, #12
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002e22:	bf00      	nop
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bc80      	pop	{r7}
 8002e2a:	4770      	bx	lr

08002e2c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	460b      	mov	r3, r1
 8002e36:	70fb      	strb	r3, [r7, #3]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bc80      	pop	{r7}
 8002e44:	4770      	bx	lr

08002e46 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e46:	b480      	push	{r7}
 8002e48:	b083      	sub	sp, #12
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002e4e:	bf00      	nop
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bc80      	pop	{r7}
 8002e56:	4770      	bx	lr

08002e58 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bc80      	pop	{r7}
 8002e68:	4770      	bx	lr

08002e6a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b083      	sub	sp, #12
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bc80      	pop	{r7}
 8002e7a:	4770      	bx	lr

08002e7c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bc80      	pop	{r7}
 8002e8c:	4770      	bx	lr

08002e8e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b083      	sub	sp, #12
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002e96:	bf00      	nop
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bc80      	pop	{r7}
 8002e9e:	4770      	bx	lr

08002ea0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002eae:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002eb6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ebc:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d150      	bne.n	8002f68 <I2C_MasterTransmit_TXE+0xc8>
 8002ec6:	7bfb      	ldrb	r3, [r7, #15]
 8002ec8:	2b21      	cmp	r3, #33	@ 0x21
 8002eca:	d14d      	bne.n	8002f68 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	2b08      	cmp	r3, #8
 8002ed0:	d01d      	beq.n	8002f0e <I2C_MasterTransmit_TXE+0x6e>
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	2b20      	cmp	r3, #32
 8002ed6:	d01a      	beq.n	8002f0e <I2C_MasterTransmit_TXE+0x6e>
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002ede:	d016      	beq.n	8002f0e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	685a      	ldr	r2, [r3, #4]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002eee:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2211      	movs	r2, #17
 8002ef4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2220      	movs	r2, #32
 8002f02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f7ff ff6c 	bl	8002de4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002f0c:	e060      	b.n	8002fd0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002f1c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f2c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2220      	movs	r2, #32
 8002f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	2b40      	cmp	r3, #64	@ 0x40
 8002f46:	d107      	bne.n	8002f58 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f7ff ff81 	bl	8002e58 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002f56:	e03b      	b.n	8002fd0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f7ff ff3f 	bl	8002de4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002f66:	e033      	b.n	8002fd0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002f68:	7bfb      	ldrb	r3, [r7, #15]
 8002f6a:	2b21      	cmp	r3, #33	@ 0x21
 8002f6c:	d005      	beq.n	8002f7a <I2C_MasterTransmit_TXE+0xda>
 8002f6e:	7bbb      	ldrb	r3, [r7, #14]
 8002f70:	2b40      	cmp	r3, #64	@ 0x40
 8002f72:	d12d      	bne.n	8002fd0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002f74:	7bfb      	ldrb	r3, [r7, #15]
 8002f76:	2b22      	cmp	r3, #34	@ 0x22
 8002f78:	d12a      	bne.n	8002fd0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d108      	bne.n	8002f96 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	685a      	ldr	r2, [r3, #4]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f92:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002f94:	e01c      	b.n	8002fd0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b40      	cmp	r3, #64	@ 0x40
 8002fa0:	d103      	bne.n	8002faa <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 f88e 	bl	80030c4 <I2C_MemoryTransmit_TXE_BTF>
}
 8002fa8:	e012      	b.n	8002fd0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fae:	781a      	ldrb	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fba:	1c5a      	adds	r2, r3, #1
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002fce:	e7ff      	b.n	8002fd0 <I2C_MasterTransmit_TXE+0x130>
 8002fd0:	bf00      	nop
 8002fd2:	3710      	adds	r7, #16
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fe4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b21      	cmp	r3, #33	@ 0x21
 8002ff0:	d164      	bne.n	80030bc <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d012      	beq.n	8003022 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003000:	781a      	ldrb	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800300c:	1c5a      	adds	r2, r3, #1
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003016:	b29b      	uxth	r3, r3
 8003018:	3b01      	subs	r3, #1
 800301a:	b29a      	uxth	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003020:	e04c      	b.n	80030bc <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2b08      	cmp	r3, #8
 8003026:	d01d      	beq.n	8003064 <I2C_MasterTransmit_BTF+0x8c>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2b20      	cmp	r3, #32
 800302c:	d01a      	beq.n	8003064 <I2C_MasterTransmit_BTF+0x8c>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003034:	d016      	beq.n	8003064 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	685a      	ldr	r2, [r3, #4]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003044:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2211      	movs	r2, #17
 800304a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2220      	movs	r2, #32
 8003058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f7ff fec1 	bl	8002de4 <HAL_I2C_MasterTxCpltCallback>
}
 8003062:	e02b      	b.n	80030bc <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	685a      	ldr	r2, [r3, #4]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003072:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003082:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2220      	movs	r2, #32
 800308e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b40      	cmp	r3, #64	@ 0x40
 800309c:	d107      	bne.n	80030ae <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f7ff fed6 	bl	8002e58 <HAL_I2C_MemTxCpltCallback>
}
 80030ac:	e006      	b.n	80030bc <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7ff fe94 	bl	8002de4 <HAL_I2C_MasterTxCpltCallback>
}
 80030bc:	bf00      	nop
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030d2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d11d      	bne.n	8003118 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d10b      	bne.n	80030fc <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030e8:	b2da      	uxtb	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030f4:	1c9a      	adds	r2, r3, #2
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80030fa:	e077      	b.n	80031ec <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003100:	b29b      	uxth	r3, r3
 8003102:	121b      	asrs	r3, r3, #8
 8003104:	b2da      	uxtb	r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003110:	1c5a      	adds	r2, r3, #1
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003116:	e069      	b.n	80031ec <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800311c:	2b01      	cmp	r3, #1
 800311e:	d10b      	bne.n	8003138 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003124:	b2da      	uxtb	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003130:	1c5a      	adds	r2, r3, #1
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003136:	e059      	b.n	80031ec <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800313c:	2b02      	cmp	r3, #2
 800313e:	d152      	bne.n	80031e6 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003140:	7bfb      	ldrb	r3, [r7, #15]
 8003142:	2b22      	cmp	r3, #34	@ 0x22
 8003144:	d10d      	bne.n	8003162 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003154:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800315a:	1c5a      	adds	r2, r3, #1
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003160:	e044      	b.n	80031ec <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003166:	b29b      	uxth	r3, r3
 8003168:	2b00      	cmp	r3, #0
 800316a:	d015      	beq.n	8003198 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800316c:	7bfb      	ldrb	r3, [r7, #15]
 800316e:	2b21      	cmp	r3, #33	@ 0x21
 8003170:	d112      	bne.n	8003198 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003176:	781a      	ldrb	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003182:	1c5a      	adds	r2, r3, #1
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800318c:	b29b      	uxth	r3, r3
 800318e:	3b01      	subs	r3, #1
 8003190:	b29a      	uxth	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003196:	e029      	b.n	80031ec <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800319c:	b29b      	uxth	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d124      	bne.n	80031ec <I2C_MemoryTransmit_TXE_BTF+0x128>
 80031a2:	7bfb      	ldrb	r3, [r7, #15]
 80031a4:	2b21      	cmp	r3, #33	@ 0x21
 80031a6:	d121      	bne.n	80031ec <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	685a      	ldr	r2, [r3, #4]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80031b6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031c6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2220      	movs	r2, #32
 80031d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f7ff fe3a 	bl	8002e58 <HAL_I2C_MemTxCpltCallback>
}
 80031e4:	e002      	b.n	80031ec <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f7ff f99c 	bl	8002524 <I2C_Flush_DR>
}
 80031ec:	bf00      	nop
 80031ee:	3710      	adds	r7, #16
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b22      	cmp	r3, #34	@ 0x22
 8003206:	f040 80b9 	bne.w	800337c <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800320e:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003214:	b29b      	uxth	r3, r3
 8003216:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	2b03      	cmp	r3, #3
 800321c:	d921      	bls.n	8003262 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	691a      	ldr	r2, [r3, #16]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003228:	b2d2      	uxtb	r2, r2
 800322a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003230:	1c5a      	adds	r2, r3, #1
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800323a:	b29b      	uxth	r3, r3
 800323c:	3b01      	subs	r3, #1
 800323e:	b29a      	uxth	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003248:	b29b      	uxth	r3, r3
 800324a:	2b03      	cmp	r3, #3
 800324c:	f040 8096 	bne.w	800337c <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800325e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003260:	e08c      	b.n	800337c <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003266:	2b02      	cmp	r3, #2
 8003268:	d07f      	beq.n	800336a <I2C_MasterReceive_RXNE+0x176>
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d002      	beq.n	8003276 <I2C_MasterReceive_RXNE+0x82>
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d179      	bne.n	800336a <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f001 fa6e 	bl	8004758 <I2C_WaitOnSTOPRequestThroughIT>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d14c      	bne.n	800331c <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003290:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	685a      	ldr	r2, [r3, #4]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80032a0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	691a      	ldr	r2, [r3, #16]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ac:	b2d2      	uxtb	r2, r2
 80032ae:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b4:	1c5a      	adds	r2, r3, #1
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032be:	b29b      	uxth	r3, r3
 80032c0:	3b01      	subs	r3, #1
 80032c2:	b29a      	uxth	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2220      	movs	r2, #32
 80032cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b40      	cmp	r3, #64	@ 0x40
 80032da:	d10a      	bne.n	80032f2 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f7ff fdbd 	bl	8002e6a <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80032f0:	e044      	b.n	800337c <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2b08      	cmp	r3, #8
 80032fe:	d002      	beq.n	8003306 <I2C_MasterReceive_RXNE+0x112>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2b20      	cmp	r3, #32
 8003304:	d103      	bne.n	800330e <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	631a      	str	r2, [r3, #48]	@ 0x30
 800330c:	e002      	b.n	8003314 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2212      	movs	r2, #18
 8003312:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f7ff fd6e 	bl	8002df6 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800331a:	e02f      	b.n	800337c <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	685a      	ldr	r2, [r3, #4]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800332a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	691a      	ldr	r2, [r3, #16]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003336:	b2d2      	uxtb	r2, r2
 8003338:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800333e:	1c5a      	adds	r2, r3, #1
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003348:	b29b      	uxth	r3, r3
 800334a:	3b01      	subs	r3, #1
 800334c:	b29a      	uxth	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2220      	movs	r2, #32
 8003356:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f7ff fd8a 	bl	8002e7c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003368:	e008      	b.n	800337c <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	685a      	ldr	r2, [r3, #4]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003378:	605a      	str	r2, [r3, #4]
}
 800337a:	e7ff      	b.n	800337c <I2C_MasterReceive_RXNE+0x188>
 800337c:	bf00      	nop
 800337e:	3710      	adds	r7, #16
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003390:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003396:	b29b      	uxth	r3, r3
 8003398:	2b04      	cmp	r3, #4
 800339a:	d11b      	bne.n	80033d4 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	685a      	ldr	r2, [r3, #4]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033aa:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	691a      	ldr	r2, [r3, #16]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b6:	b2d2      	uxtb	r2, r2
 80033b8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033be:	1c5a      	adds	r2, r3, #1
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	3b01      	subs	r3, #1
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80033d2:	e0c4      	b.n	800355e <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033d8:	b29b      	uxth	r3, r3
 80033da:	2b03      	cmp	r3, #3
 80033dc:	d129      	bne.n	8003432 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	685a      	ldr	r2, [r3, #4]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033ec:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2b04      	cmp	r3, #4
 80033f2:	d00a      	beq.n	800340a <I2C_MasterReceive_BTF+0x86>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d007      	beq.n	800340a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003408:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	691a      	ldr	r2, [r3, #16]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003414:	b2d2      	uxtb	r2, r2
 8003416:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341c:	1c5a      	adds	r2, r3, #1
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003426:	b29b      	uxth	r3, r3
 8003428:	3b01      	subs	r3, #1
 800342a:	b29a      	uxth	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003430:	e095      	b.n	800355e <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003436:	b29b      	uxth	r3, r3
 8003438:	2b02      	cmp	r3, #2
 800343a:	d17d      	bne.n	8003538 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d002      	beq.n	8003448 <I2C_MasterReceive_BTF+0xc4>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2b10      	cmp	r3, #16
 8003446:	d108      	bne.n	800345a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003456:	601a      	str	r2, [r3, #0]
 8003458:	e016      	b.n	8003488 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2b04      	cmp	r3, #4
 800345e:	d002      	beq.n	8003466 <I2C_MasterReceive_BTF+0xe2>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2b02      	cmp	r3, #2
 8003464:	d108      	bne.n	8003478 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003474:	601a      	str	r2, [r3, #0]
 8003476:	e007      	b.n	8003488 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003486:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	691a      	ldr	r2, [r3, #16]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003492:	b2d2      	uxtb	r2, r2
 8003494:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800349a:	1c5a      	adds	r2, r3, #1
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	3b01      	subs	r3, #1
 80034a8:	b29a      	uxth	r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	691a      	ldr	r2, [r3, #16]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b8:	b2d2      	uxtb	r2, r2
 80034ba:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c0:	1c5a      	adds	r2, r3, #1
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	3b01      	subs	r3, #1
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	685a      	ldr	r2, [r3, #4]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80034e2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2220      	movs	r2, #32
 80034e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	2b40      	cmp	r3, #64	@ 0x40
 80034f6:	d10a      	bne.n	800350e <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f7ff fcaf 	bl	8002e6a <HAL_I2C_MemRxCpltCallback>
}
 800350c:	e027      	b.n	800355e <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2b08      	cmp	r3, #8
 800351a:	d002      	beq.n	8003522 <I2C_MasterReceive_BTF+0x19e>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2b20      	cmp	r3, #32
 8003520:	d103      	bne.n	800352a <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	631a      	str	r2, [r3, #48]	@ 0x30
 8003528:	e002      	b.n	8003530 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2212      	movs	r2, #18
 800352e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f7ff fc60 	bl	8002df6 <HAL_I2C_MasterRxCpltCallback>
}
 8003536:	e012      	b.n	800355e <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	691a      	ldr	r2, [r3, #16]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003542:	b2d2      	uxtb	r2, r2
 8003544:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800354a:	1c5a      	adds	r2, r3, #1
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003554:	b29b      	uxth	r3, r3
 8003556:	3b01      	subs	r3, #1
 8003558:	b29a      	uxth	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800355e:	bf00      	nop
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003566:	b480      	push	{r7}
 8003568:	b083      	sub	sp, #12
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b40      	cmp	r3, #64	@ 0x40
 8003578:	d117      	bne.n	80035aa <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800357e:	2b00      	cmp	r3, #0
 8003580:	d109      	bne.n	8003596 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003586:	b2db      	uxtb	r3, r3
 8003588:	461a      	mov	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003592:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003594:	e067      	b.n	8003666 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800359a:	b2db      	uxtb	r3, r3
 800359c:	f043 0301 	orr.w	r3, r3, #1
 80035a0:	b2da      	uxtb	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	611a      	str	r2, [r3, #16]
}
 80035a8:	e05d      	b.n	8003666 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80035b2:	d133      	bne.n	800361c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b21      	cmp	r3, #33	@ 0x21
 80035be:	d109      	bne.n	80035d4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	461a      	mov	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80035d0:	611a      	str	r2, [r3, #16]
 80035d2:	e008      	b.n	80035e6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	f043 0301 	orr.w	r3, r3, #1
 80035de:	b2da      	uxtb	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d004      	beq.n	80035f8 <I2C_Master_SB+0x92>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d108      	bne.n	800360a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d032      	beq.n	8003666 <I2C_Master_SB+0x100>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003606:	2b00      	cmp	r3, #0
 8003608:	d02d      	beq.n	8003666 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	685a      	ldr	r2, [r3, #4]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003618:	605a      	str	r2, [r3, #4]
}
 800361a:	e024      	b.n	8003666 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10e      	bne.n	8003642 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003628:	b29b      	uxth	r3, r3
 800362a:	11db      	asrs	r3, r3, #7
 800362c:	b2db      	uxtb	r3, r3
 800362e:	f003 0306 	and.w	r3, r3, #6
 8003632:	b2db      	uxtb	r3, r3
 8003634:	f063 030f 	orn	r3, r3, #15
 8003638:	b2da      	uxtb	r2, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	611a      	str	r2, [r3, #16]
}
 8003640:	e011      	b.n	8003666 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003646:	2b01      	cmp	r3, #1
 8003648:	d10d      	bne.n	8003666 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800364e:	b29b      	uxth	r3, r3
 8003650:	11db      	asrs	r3, r3, #7
 8003652:	b2db      	uxtb	r3, r3
 8003654:	f003 0306 	and.w	r3, r3, #6
 8003658:	b2db      	uxtb	r3, r3
 800365a:	f063 030e 	orn	r3, r3, #14
 800365e:	b2da      	uxtb	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	611a      	str	r2, [r3, #16]
}
 8003666:	bf00      	nop
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	bc80      	pop	{r7}
 800366e:	4770      	bx	lr

08003670 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800367c:	b2da      	uxtb	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003688:	2b00      	cmp	r3, #0
 800368a:	d004      	beq.n	8003696 <I2C_Master_ADD10+0x26>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003692:	2b00      	cmp	r3, #0
 8003694:	d108      	bne.n	80036a8 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00c      	beq.n	80036b8 <I2C_Master_ADD10+0x48>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d007      	beq.n	80036b8 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685a      	ldr	r2, [r3, #4]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036b6:	605a      	str	r2, [r3, #4]
  }
}
 80036b8:	bf00      	nop
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	bc80      	pop	{r7}
 80036c0:	4770      	bx	lr

080036c2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80036c2:	b480      	push	{r7}
 80036c4:	b091      	sub	sp, #68	@ 0x44
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80036d0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036de:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	2b22      	cmp	r3, #34	@ 0x22
 80036ea:	f040 8174 	bne.w	80039d6 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10f      	bne.n	8003716 <I2C_Master_ADDR+0x54>
 80036f6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80036fa:	2b40      	cmp	r3, #64	@ 0x40
 80036fc:	d10b      	bne.n	8003716 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036fe:	2300      	movs	r3, #0
 8003700:	633b      	str	r3, [r7, #48]	@ 0x30
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	695b      	ldr	r3, [r3, #20]
 8003708:	633b      	str	r3, [r7, #48]	@ 0x30
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	633b      	str	r3, [r7, #48]	@ 0x30
 8003712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003714:	e16b      	b.n	80039ee <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800371a:	2b00      	cmp	r3, #0
 800371c:	d11d      	bne.n	800375a <I2C_Master_ADDR+0x98>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003726:	d118      	bne.n	800375a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003728:	2300      	movs	r3, #0
 800372a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800373c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800374c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003752:	1c5a      	adds	r2, r3, #1
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	651a      	str	r2, [r3, #80]	@ 0x50
 8003758:	e149      	b.n	80039ee <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800375e:	b29b      	uxth	r3, r3
 8003760:	2b00      	cmp	r3, #0
 8003762:	d113      	bne.n	800378c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003764:	2300      	movs	r3, #0
 8003766:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003778:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003788:	601a      	str	r2, [r3, #0]
 800378a:	e120      	b.n	80039ce <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003790:	b29b      	uxth	r3, r3
 8003792:	2b01      	cmp	r3, #1
 8003794:	f040 808a 	bne.w	80038ac <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800379a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800379e:	d137      	bne.n	8003810 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037ae:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037be:	d113      	bne.n	80037e8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037ce:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037d0:	2300      	movs	r3, #0
 80037d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	627b      	str	r3, [r7, #36]	@ 0x24
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80037e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e6:	e0f2      	b.n	80039ce <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037e8:	2300      	movs	r3, #0
 80037ea:	623b      	str	r3, [r7, #32]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	623b      	str	r3, [r7, #32]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	623b      	str	r3, [r7, #32]
 80037fc:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800380c:	601a      	str	r2, [r3, #0]
 800380e:	e0de      	b.n	80039ce <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003812:	2b08      	cmp	r3, #8
 8003814:	d02e      	beq.n	8003874 <I2C_Master_ADDR+0x1b2>
 8003816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003818:	2b20      	cmp	r3, #32
 800381a:	d02b      	beq.n	8003874 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800381c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800381e:	2b12      	cmp	r3, #18
 8003820:	d102      	bne.n	8003828 <I2C_Master_ADDR+0x166>
 8003822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003824:	2b01      	cmp	r3, #1
 8003826:	d125      	bne.n	8003874 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800382a:	2b04      	cmp	r3, #4
 800382c:	d00e      	beq.n	800384c <I2C_Master_ADDR+0x18a>
 800382e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003830:	2b02      	cmp	r3, #2
 8003832:	d00b      	beq.n	800384c <I2C_Master_ADDR+0x18a>
 8003834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003836:	2b10      	cmp	r3, #16
 8003838:	d008      	beq.n	800384c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003848:	601a      	str	r2, [r3, #0]
 800384a:	e007      	b.n	800385c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800385a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800385c:	2300      	movs	r3, #0
 800385e:	61fb      	str	r3, [r7, #28]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	61fb      	str	r3, [r7, #28]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	61fb      	str	r3, [r7, #28]
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	e0ac      	b.n	80039ce <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003882:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003884:	2300      	movs	r3, #0
 8003886:	61bb      	str	r3, [r7, #24]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	61bb      	str	r3, [r7, #24]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	61bb      	str	r3, [r7, #24]
 8003898:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038a8:	601a      	str	r2, [r3, #0]
 80038aa:	e090      	b.n	80039ce <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d158      	bne.n	8003968 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80038b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038b8:	2b04      	cmp	r3, #4
 80038ba:	d021      	beq.n	8003900 <I2C_Master_ADDR+0x23e>
 80038bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d01e      	beq.n	8003900 <I2C_Master_ADDR+0x23e>
 80038c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038c4:	2b10      	cmp	r3, #16
 80038c6:	d01b      	beq.n	8003900 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038d6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038d8:	2300      	movs	r3, #0
 80038da:	617b      	str	r3, [r7, #20]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	617b      	str	r3, [r7, #20]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	617b      	str	r3, [r7, #20]
 80038ec:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038fc:	601a      	str	r2, [r3, #0]
 80038fe:	e012      	b.n	8003926 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800390e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003910:	2300      	movs	r3, #0
 8003912:	613b      	str	r3, [r7, #16]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	613b      	str	r3, [r7, #16]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	613b      	str	r3, [r7, #16]
 8003924:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003930:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003934:	d14b      	bne.n	80039ce <I2C_Master_ADDR+0x30c>
 8003936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003938:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800393c:	d00b      	beq.n	8003956 <I2C_Master_ADDR+0x294>
 800393e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003940:	2b01      	cmp	r3, #1
 8003942:	d008      	beq.n	8003956 <I2C_Master_ADDR+0x294>
 8003944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003946:	2b08      	cmp	r3, #8
 8003948:	d005      	beq.n	8003956 <I2C_Master_ADDR+0x294>
 800394a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800394c:	2b10      	cmp	r3, #16
 800394e:	d002      	beq.n	8003956 <I2C_Master_ADDR+0x294>
 8003950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003952:	2b20      	cmp	r3, #32
 8003954:	d13b      	bne.n	80039ce <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	685a      	ldr	r2, [r3, #4]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003964:	605a      	str	r2, [r3, #4]
 8003966:	e032      	b.n	80039ce <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003976:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003982:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003986:	d117      	bne.n	80039b8 <I2C_Master_ADDR+0x2f6>
 8003988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800398a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800398e:	d00b      	beq.n	80039a8 <I2C_Master_ADDR+0x2e6>
 8003990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003992:	2b01      	cmp	r3, #1
 8003994:	d008      	beq.n	80039a8 <I2C_Master_ADDR+0x2e6>
 8003996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003998:	2b08      	cmp	r3, #8
 800399a:	d005      	beq.n	80039a8 <I2C_Master_ADDR+0x2e6>
 800399c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800399e:	2b10      	cmp	r3, #16
 80039a0:	d002      	beq.n	80039a8 <I2C_Master_ADDR+0x2e6>
 80039a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039a4:	2b20      	cmp	r3, #32
 80039a6:	d107      	bne.n	80039b8 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80039b6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039b8:	2300      	movs	r3, #0
 80039ba:	60fb      	str	r3, [r7, #12]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	60fb      	str	r3, [r7, #12]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	60fb      	str	r3, [r7, #12]
 80039cc:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80039d4:	e00b      	b.n	80039ee <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039d6:	2300      	movs	r3, #0
 80039d8:	60bb      	str	r3, [r7, #8]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	695b      	ldr	r3, [r3, #20]
 80039e0:	60bb      	str	r3, [r7, #8]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	60bb      	str	r3, [r7, #8]
 80039ea:	68bb      	ldr	r3, [r7, #8]
}
 80039ec:	e7ff      	b.n	80039ee <I2C_Master_ADDR+0x32c>
 80039ee:	bf00      	nop
 80039f0:	3744      	adds	r7, #68	@ 0x44
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bc80      	pop	{r7}
 80039f6:	4770      	bx	lr

080039f8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a06:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d02b      	beq.n	8003a6a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a16:	781a      	ldrb	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a22:	1c5a      	adds	r2, r3, #1
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	b29a      	uxth	r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d114      	bne.n	8003a6a <I2C_SlaveTransmit_TXE+0x72>
 8003a40:	7bfb      	ldrb	r3, [r7, #15]
 8003a42:	2b29      	cmp	r3, #41	@ 0x29
 8003a44:	d111      	bne.n	8003a6a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	685a      	ldr	r2, [r3, #4]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a54:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2221      	movs	r2, #33	@ 0x21
 8003a5a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2228      	movs	r2, #40	@ 0x28
 8003a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f7ff f9cf 	bl	8002e08 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003a6a:	bf00      	nop
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a72:	b480      	push	{r7}
 8003a74:	b083      	sub	sp, #12
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d011      	beq.n	8003aa8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a88:	781a      	ldrb	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a94:	1c5a      	adds	r2, r3, #1
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003aa8:	bf00      	nop
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bc80      	pop	{r7}
 8003ab0:	4770      	bx	lr

08003ab2 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b084      	sub	sp, #16
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ac0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d02c      	beq.n	8003b26 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	691a      	ldr	r2, [r3, #16]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad6:	b2d2      	uxtb	r2, r2
 8003ad8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ade:	1c5a      	adds	r2, r3, #1
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	3b01      	subs	r3, #1
 8003aec:	b29a      	uxth	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d114      	bne.n	8003b26 <I2C_SlaveReceive_RXNE+0x74>
 8003afc:	7bfb      	ldrb	r3, [r7, #15]
 8003afe:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b00:	d111      	bne.n	8003b26 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	685a      	ldr	r2, [r3, #4]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b10:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2222      	movs	r2, #34	@ 0x22
 8003b16:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2228      	movs	r2, #40	@ 0x28
 8003b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f7ff f97a 	bl	8002e1a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003b26:	bf00      	nop
 8003b28:	3710      	adds	r7, #16
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003b2e:	b480      	push	{r7}
 8003b30:	b083      	sub	sp, #12
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d012      	beq.n	8003b66 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	691a      	ldr	r2, [r3, #16]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4a:	b2d2      	uxtb	r2, r2
 8003b4c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b52:	1c5a      	adds	r2, r3, #1
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003b66:	bf00      	nop
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bc80      	pop	{r7}
 8003b6e:	4770      	bx	lr

08003b70 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003b8a:	2b28      	cmp	r3, #40	@ 0x28
 8003b8c:	d127      	bne.n	8003bde <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	685a      	ldr	r2, [r3, #4]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b9c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	089b      	lsrs	r3, r3, #2
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003baa:	2301      	movs	r3, #1
 8003bac:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	09db      	lsrs	r3, r3, #7
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d103      	bne.n	8003bc2 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	81bb      	strh	r3, [r7, #12]
 8003bc0:	e002      	b.n	8003bc8 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003bd0:	89ba      	ldrh	r2, [r7, #12]
 8003bd2:	7bfb      	ldrb	r3, [r7, #15]
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f7ff f928 	bl	8002e2c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003bdc:	e00e      	b.n	8003bfc <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bde:	2300      	movs	r3, #0
 8003be0:	60bb      	str	r3, [r7, #8]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	695b      	ldr	r3, [r3, #20]
 8003be8:	60bb      	str	r3, [r7, #8]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	699b      	ldr	r3, [r3, #24]
 8003bf0:	60bb      	str	r3, [r7, #8]
 8003bf2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8003bfc:	bf00      	nop
 8003bfe:	3710      	adds	r7, #16
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c12:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	685a      	ldr	r2, [r3, #4]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003c22:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003c24:	2300      	movs	r3, #0
 8003c26:	60bb      	str	r3, [r7, #8]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	60bb      	str	r3, [r7, #8]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f042 0201 	orr.w	r2, r2, #1
 8003c3e:	601a      	str	r2, [r3, #0]
 8003c40:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c50:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c60:	d172      	bne.n	8003d48 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003c62:	7bfb      	ldrb	r3, [r7, #15]
 8003c64:	2b22      	cmp	r3, #34	@ 0x22
 8003c66:	d002      	beq.n	8003c6e <I2C_Slave_STOPF+0x6a>
 8003c68:	7bfb      	ldrb	r3, [r7, #15]
 8003c6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c6c:	d135      	bne.n	8003cda <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d005      	beq.n	8003c92 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c8a:	f043 0204 	orr.w	r2, r3, #4
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	685a      	ldr	r2, [r3, #4]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ca0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7fe f936 	bl	8001f18 <HAL_DMA_GetState>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d049      	beq.n	8003d46 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cb6:	4a69      	ldr	r2, [pc, #420]	@ (8003e5c <I2C_Slave_STOPF+0x258>)
 8003cb8:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7fe f8b2 	bl	8001e28 <HAL_DMA_Abort_IT>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d03d      	beq.n	8003d46 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003cd4:	4610      	mov	r0, r2
 8003cd6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003cd8:	e035      	b.n	8003d46 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d005      	beq.n	8003cfe <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf6:	f043 0204 	orr.w	r2, r3, #4
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	685a      	ldr	r2, [r3, #4]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d0c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7fe f900 	bl	8001f18 <HAL_DMA_GetState>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d014      	beq.n	8003d48 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d22:	4a4e      	ldr	r2, [pc, #312]	@ (8003e5c <I2C_Slave_STOPF+0x258>)
 8003d24:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7fe f87c 	bl	8001e28 <HAL_DMA_Abort_IT>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d008      	beq.n	8003d48 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003d40:	4610      	mov	r0, r2
 8003d42:	4798      	blx	r3
 8003d44:	e000      	b.n	8003d48 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003d46:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d03e      	beq.n	8003dd0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	f003 0304 	and.w	r3, r3, #4
 8003d5c:	2b04      	cmp	r3, #4
 8003d5e:	d112      	bne.n	8003d86 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	691a      	ldr	r2, [r3, #16]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d6a:	b2d2      	uxtb	r2, r2
 8003d6c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d72:	1c5a      	adds	r2, r3, #1
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	695b      	ldr	r3, [r3, #20]
 8003d8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d90:	2b40      	cmp	r3, #64	@ 0x40
 8003d92:	d112      	bne.n	8003dba <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	691a      	ldr	r2, [r3, #16]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d9e:	b2d2      	uxtb	r2, r2
 8003da0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da6:	1c5a      	adds	r2, r3, #1
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	3b01      	subs	r3, #1
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d005      	beq.n	8003dd0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc8:	f043 0204 	orr.w	r2, r3, #4
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d003      	beq.n	8003de0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 f8b7 	bl	8003f4c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003dde:	e039      	b.n	8003e54 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003de0:	7bfb      	ldrb	r3, [r7, #15]
 8003de2:	2b2a      	cmp	r3, #42	@ 0x2a
 8003de4:	d109      	bne.n	8003dfa <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2228      	movs	r2, #40	@ 0x28
 8003df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f7ff f810 	bl	8002e1a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b28      	cmp	r3, #40	@ 0x28
 8003e04:	d111      	bne.n	8003e2a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a15      	ldr	r2, [pc, #84]	@ (8003e60 <I2C_Slave_STOPF+0x25c>)
 8003e0a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2220      	movs	r2, #32
 8003e16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f7ff f80f 	bl	8002e46 <HAL_I2C_ListenCpltCallback>
}
 8003e28:	e014      	b.n	8003e54 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e2e:	2b22      	cmp	r3, #34	@ 0x22
 8003e30:	d002      	beq.n	8003e38 <I2C_Slave_STOPF+0x234>
 8003e32:	7bfb      	ldrb	r3, [r7, #15]
 8003e34:	2b22      	cmp	r3, #34	@ 0x22
 8003e36:	d10d      	bne.n	8003e54 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2220      	movs	r2, #32
 8003e42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f7fe ffe3 	bl	8002e1a <HAL_I2C_SlaveRxCpltCallback>
}
 8003e54:	bf00      	nop
 8003e56:	3710      	adds	r7, #16
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	080042b5 	.word	0x080042b5
 8003e60:	ffff0000 	.word	0xffff0000

08003e64 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e72:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e78:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	2b08      	cmp	r3, #8
 8003e7e:	d002      	beq.n	8003e86 <I2C_Slave_AF+0x22>
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	2b20      	cmp	r3, #32
 8003e84:	d129      	bne.n	8003eda <I2C_Slave_AF+0x76>
 8003e86:	7bfb      	ldrb	r3, [r7, #15]
 8003e88:	2b28      	cmp	r3, #40	@ 0x28
 8003e8a:	d126      	bne.n	8003eda <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a2e      	ldr	r2, [pc, #184]	@ (8003f48 <I2C_Slave_AF+0xe4>)
 8003e90:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	685a      	ldr	r2, [r3, #4]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003ea0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003eaa:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003eba:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2220      	movs	r2, #32
 8003ec6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7fe ffb7 	bl	8002e46 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003ed8:	e031      	b.n	8003f3e <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003eda:	7bfb      	ldrb	r3, [r7, #15]
 8003edc:	2b21      	cmp	r3, #33	@ 0x21
 8003ede:	d129      	bne.n	8003f34 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a19      	ldr	r2, [pc, #100]	@ (8003f48 <I2C_Slave_AF+0xe4>)
 8003ee4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2221      	movs	r2, #33	@ 0x21
 8003eea:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2220      	movs	r2, #32
 8003ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	685a      	ldr	r2, [r3, #4]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003f0a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f14:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f24:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f7fe fafc 	bl	8002524 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f7fe ff6b 	bl	8002e08 <HAL_I2C_SlaveTxCpltCallback>
}
 8003f32:	e004      	b.n	8003f3e <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f3c:	615a      	str	r2, [r3, #20]
}
 8003f3e:	bf00      	nop
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	ffff0000 	.word	0xffff0000

08003f4c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f5a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f62:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003f64:	7bbb      	ldrb	r3, [r7, #14]
 8003f66:	2b10      	cmp	r3, #16
 8003f68:	d002      	beq.n	8003f70 <I2C_ITError+0x24>
 8003f6a:	7bbb      	ldrb	r3, [r7, #14]
 8003f6c:	2b40      	cmp	r3, #64	@ 0x40
 8003f6e:	d10a      	bne.n	8003f86 <I2C_ITError+0x3a>
 8003f70:	7bfb      	ldrb	r3, [r7, #15]
 8003f72:	2b22      	cmp	r3, #34	@ 0x22
 8003f74:	d107      	bne.n	8003f86 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f84:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003f86:	7bfb      	ldrb	r3, [r7, #15]
 8003f88:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003f8c:	2b28      	cmp	r3, #40	@ 0x28
 8003f8e:	d107      	bne.n	8003fa0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2228      	movs	r2, #40	@ 0x28
 8003f9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003f9e:	e015      	b.n	8003fcc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003faa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fae:	d00a      	beq.n	8003fc6 <I2C_ITError+0x7a>
 8003fb0:	7bfb      	ldrb	r3, [r7, #15]
 8003fb2:	2b60      	cmp	r3, #96	@ 0x60
 8003fb4:	d007      	beq.n	8003fc6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2220      	movs	r2, #32
 8003fba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fd6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fda:	d162      	bne.n	80040a2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	685a      	ldr	r2, [r3, #4]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fea:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ff0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d020      	beq.n	800403c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ffe:	4a6a      	ldr	r2, [pc, #424]	@ (80041a8 <I2C_ITError+0x25c>)
 8004000:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004006:	4618      	mov	r0, r3
 8004008:	f7fd ff0e 	bl	8001e28 <HAL_DMA_Abort_IT>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	f000 8089 	beq.w	8004126 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f022 0201 	bic.w	r2, r2, #1
 8004022:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2220      	movs	r2, #32
 8004028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004030:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004036:	4610      	mov	r0, r2
 8004038:	4798      	blx	r3
 800403a:	e074      	b.n	8004126 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004040:	4a59      	ldr	r2, [pc, #356]	@ (80041a8 <I2C_ITError+0x25c>)
 8004042:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004048:	4618      	mov	r0, r3
 800404a:	f7fd feed 	bl	8001e28 <HAL_DMA_Abort_IT>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d068      	beq.n	8004126 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800405e:	2b40      	cmp	r3, #64	@ 0x40
 8004060:	d10b      	bne.n	800407a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	691a      	ldr	r2, [r3, #16]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800406c:	b2d2      	uxtb	r2, r2
 800406e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004074:	1c5a      	adds	r2, r3, #1
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f022 0201 	bic.w	r2, r2, #1
 8004088:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2220      	movs	r2, #32
 800408e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004096:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800409c:	4610      	mov	r0, r2
 800409e:	4798      	blx	r3
 80040a0:	e041      	b.n	8004126 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b60      	cmp	r3, #96	@ 0x60
 80040ac:	d125      	bne.n	80040fa <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2220      	movs	r2, #32
 80040b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040c6:	2b40      	cmp	r3, #64	@ 0x40
 80040c8:	d10b      	bne.n	80040e2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	691a      	ldr	r2, [r3, #16]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d4:	b2d2      	uxtb	r2, r2
 80040d6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040dc:	1c5a      	adds	r2, r3, #1
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f022 0201 	bic.w	r2, r2, #1
 80040f0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f7fe fecb 	bl	8002e8e <HAL_I2C_AbortCpltCallback>
 80040f8:	e015      	b.n	8004126 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	695b      	ldr	r3, [r3, #20]
 8004100:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004104:	2b40      	cmp	r3, #64	@ 0x40
 8004106:	d10b      	bne.n	8004120 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	691a      	ldr	r2, [r3, #16]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004112:	b2d2      	uxtb	r2, r2
 8004114:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800411a:	1c5a      	adds	r2, r3, #1
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f7fe feab 	bl	8002e7c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800412a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b00      	cmp	r3, #0
 8004134:	d10e      	bne.n	8004154 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800413c:	2b00      	cmp	r3, #0
 800413e:	d109      	bne.n	8004154 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004146:	2b00      	cmp	r3, #0
 8004148:	d104      	bne.n	8004154 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004150:	2b00      	cmp	r3, #0
 8004152:	d007      	beq.n	8004164 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	685a      	ldr	r2, [r3, #4]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004162:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800416a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004170:	f003 0304 	and.w	r3, r3, #4
 8004174:	2b04      	cmp	r3, #4
 8004176:	d113      	bne.n	80041a0 <I2C_ITError+0x254>
 8004178:	7bfb      	ldrb	r3, [r7, #15]
 800417a:	2b28      	cmp	r3, #40	@ 0x28
 800417c:	d110      	bne.n	80041a0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a0a      	ldr	r2, [pc, #40]	@ (80041ac <I2C_ITError+0x260>)
 8004182:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2220      	movs	r2, #32
 800418e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f7fe fe53 	bl	8002e46 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80041a0:	bf00      	nop
 80041a2:	3710      	adds	r7, #16
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	080042b5 	.word	0x080042b5
 80041ac:	ffff0000 	.word	0xffff0000

080041b0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b088      	sub	sp, #32
 80041b4:	af02      	add	r7, sp, #8
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	607a      	str	r2, [r7, #4]
 80041ba:	603b      	str	r3, [r7, #0]
 80041bc:	460b      	mov	r3, r1
 80041be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041c4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	2b08      	cmp	r3, #8
 80041ca:	d006      	beq.n	80041da <I2C_MasterRequestWrite+0x2a>
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d003      	beq.n	80041da <I2C_MasterRequestWrite+0x2a>
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80041d8:	d108      	bne.n	80041ec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041e8:	601a      	str	r2, [r3, #0]
 80041ea:	e00b      	b.n	8004204 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041f0:	2b12      	cmp	r3, #18
 80041f2:	d107      	bne.n	8004204 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004202:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	9300      	str	r3, [sp, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004210:	68f8      	ldr	r0, [r7, #12]
 8004212:	f000 f8f7 	bl	8004404 <I2C_WaitOnFlagUntilTimeout>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d00d      	beq.n	8004238 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004226:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800422a:	d103      	bne.n	8004234 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004232:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e035      	b.n	80042a4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004240:	d108      	bne.n	8004254 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004242:	897b      	ldrh	r3, [r7, #10]
 8004244:	b2db      	uxtb	r3, r3
 8004246:	461a      	mov	r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004250:	611a      	str	r2, [r3, #16]
 8004252:	e01b      	b.n	800428c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004254:	897b      	ldrh	r3, [r7, #10]
 8004256:	11db      	asrs	r3, r3, #7
 8004258:	b2db      	uxtb	r3, r3
 800425a:	f003 0306 	and.w	r3, r3, #6
 800425e:	b2db      	uxtb	r3, r3
 8004260:	f063 030f 	orn	r3, r3, #15
 8004264:	b2da      	uxtb	r2, r3
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	490e      	ldr	r1, [pc, #56]	@ (80042ac <I2C_MasterRequestWrite+0xfc>)
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f000 f940 	bl	80044f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d001      	beq.n	8004282 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e010      	b.n	80042a4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004282:	897b      	ldrh	r3, [r7, #10]
 8004284:	b2da      	uxtb	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	4907      	ldr	r1, [pc, #28]	@ (80042b0 <I2C_MasterRequestWrite+0x100>)
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f000 f930 	bl	80044f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d001      	beq.n	80042a2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e000      	b.n	80042a4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80042a2:	2300      	movs	r3, #0
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3718      	adds	r7, #24
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	00010008 	.word	0x00010008
 80042b0:	00010002 	.word	0x00010002

080042b4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b086      	sub	sp, #24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80042bc:	2300      	movs	r3, #0
 80042be:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042cc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80042ce:	4b4b      	ldr	r3, [pc, #300]	@ (80043fc <I2C_DMAAbort+0x148>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	08db      	lsrs	r3, r3, #3
 80042d4:	4a4a      	ldr	r2, [pc, #296]	@ (8004400 <I2C_DMAAbort+0x14c>)
 80042d6:	fba2 2303 	umull	r2, r3, r2, r3
 80042da:	0a1a      	lsrs	r2, r3, #8
 80042dc:	4613      	mov	r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	4413      	add	r3, r2
 80042e2:	00da      	lsls	r2, r3, #3
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d106      	bne.n	80042fc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f2:	f043 0220 	orr.w	r2, r3, #32
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80042fa:	e00a      	b.n	8004312 <I2C_DMAAbort+0x5e>
    }
    count--;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	3b01      	subs	r3, #1
 8004300:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800430c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004310:	d0ea      	beq.n	80042e8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004316:	2b00      	cmp	r3, #0
 8004318:	d003      	beq.n	8004322 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800431e:	2200      	movs	r2, #0
 8004320:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004326:	2b00      	cmp	r3, #0
 8004328:	d003      	beq.n	8004332 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800432e:	2200      	movs	r2, #0
 8004330:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004340:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	2200      	movs	r2, #0
 8004346:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800434c:	2b00      	cmp	r3, #0
 800434e:	d003      	beq.n	8004358 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004354:	2200      	movs	r2, #0
 8004356:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800435c:	2b00      	cmp	r3, #0
 800435e:	d003      	beq.n	8004368 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004364:	2200      	movs	r2, #0
 8004366:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f022 0201 	bic.w	r2, r2, #1
 8004376:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800437e:	b2db      	uxtb	r3, r3
 8004380:	2b60      	cmp	r3, #96	@ 0x60
 8004382:	d10e      	bne.n	80043a2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	2220      	movs	r2, #32
 8004388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	2200      	movs	r2, #0
 8004390:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	2200      	movs	r2, #0
 8004398:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800439a:	6978      	ldr	r0, [r7, #20]
 800439c:	f7fe fd77 	bl	8002e8e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80043a0:	e027      	b.n	80043f2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80043a2:	7cfb      	ldrb	r3, [r7, #19]
 80043a4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80043a8:	2b28      	cmp	r3, #40	@ 0x28
 80043aa:	d117      	bne.n	80043dc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f042 0201 	orr.w	r2, r2, #1
 80043ba:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80043ca:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	2200      	movs	r2, #0
 80043d0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	2228      	movs	r2, #40	@ 0x28
 80043d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80043da:	e007      	b.n	80043ec <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	2220      	movs	r2, #32
 80043e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80043ec:	6978      	ldr	r0, [r7, #20]
 80043ee:	f7fe fd45 	bl	8002e7c <HAL_I2C_ErrorCallback>
}
 80043f2:	bf00      	nop
 80043f4:	3718      	adds	r7, #24
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	20000020 	.word	0x20000020
 8004400:	14f8b589 	.word	0x14f8b589

08004404 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	603b      	str	r3, [r7, #0]
 8004410:	4613      	mov	r3, r2
 8004412:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004414:	e048      	b.n	80044a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800441c:	d044      	beq.n	80044a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800441e:	f7fd fb8d 	bl	8001b3c <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	683a      	ldr	r2, [r7, #0]
 800442a:	429a      	cmp	r2, r3
 800442c:	d302      	bcc.n	8004434 <I2C_WaitOnFlagUntilTimeout+0x30>
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d139      	bne.n	80044a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	0c1b      	lsrs	r3, r3, #16
 8004438:	b2db      	uxtb	r3, r3
 800443a:	2b01      	cmp	r3, #1
 800443c:	d10d      	bne.n	800445a <I2C_WaitOnFlagUntilTimeout+0x56>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	695b      	ldr	r3, [r3, #20]
 8004444:	43da      	mvns	r2, r3
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	4013      	ands	r3, r2
 800444a:	b29b      	uxth	r3, r3
 800444c:	2b00      	cmp	r3, #0
 800444e:	bf0c      	ite	eq
 8004450:	2301      	moveq	r3, #1
 8004452:	2300      	movne	r3, #0
 8004454:	b2db      	uxtb	r3, r3
 8004456:	461a      	mov	r2, r3
 8004458:	e00c      	b.n	8004474 <I2C_WaitOnFlagUntilTimeout+0x70>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	43da      	mvns	r2, r3
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	4013      	ands	r3, r2
 8004466:	b29b      	uxth	r3, r3
 8004468:	2b00      	cmp	r3, #0
 800446a:	bf0c      	ite	eq
 800446c:	2301      	moveq	r3, #1
 800446e:	2300      	movne	r3, #0
 8004470:	b2db      	uxtb	r3, r3
 8004472:	461a      	mov	r2, r3
 8004474:	79fb      	ldrb	r3, [r7, #7]
 8004476:	429a      	cmp	r2, r3
 8004478:	d116      	bne.n	80044a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2220      	movs	r2, #32
 8004484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004494:	f043 0220 	orr.w	r2, r3, #32
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e023      	b.n	80044f0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	0c1b      	lsrs	r3, r3, #16
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d10d      	bne.n	80044ce <I2C_WaitOnFlagUntilTimeout+0xca>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	43da      	mvns	r2, r3
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	4013      	ands	r3, r2
 80044be:	b29b      	uxth	r3, r3
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	bf0c      	ite	eq
 80044c4:	2301      	moveq	r3, #1
 80044c6:	2300      	movne	r3, #0
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	461a      	mov	r2, r3
 80044cc:	e00c      	b.n	80044e8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	43da      	mvns	r2, r3
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	4013      	ands	r3, r2
 80044da:	b29b      	uxth	r3, r3
 80044dc:	2b00      	cmp	r3, #0
 80044de:	bf0c      	ite	eq
 80044e0:	2301      	moveq	r3, #1
 80044e2:	2300      	movne	r3, #0
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	461a      	mov	r2, r3
 80044e8:	79fb      	ldrb	r3, [r7, #7]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d093      	beq.n	8004416 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3710      	adds	r7, #16
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
 8004504:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004506:	e071      	b.n	80045ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004512:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004516:	d123      	bne.n	8004560 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004526:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004530:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2200      	movs	r2, #0
 8004536:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2220      	movs	r2, #32
 800453c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800454c:	f043 0204 	orr.w	r2, r3, #4
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e067      	b.n	8004630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004566:	d041      	beq.n	80045ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004568:	f7fd fae8 	bl	8001b3c <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	429a      	cmp	r2, r3
 8004576:	d302      	bcc.n	800457e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d136      	bne.n	80045ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	0c1b      	lsrs	r3, r3, #16
 8004582:	b2db      	uxtb	r3, r3
 8004584:	2b01      	cmp	r3, #1
 8004586:	d10c      	bne.n	80045a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	695b      	ldr	r3, [r3, #20]
 800458e:	43da      	mvns	r2, r3
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	4013      	ands	r3, r2
 8004594:	b29b      	uxth	r3, r3
 8004596:	2b00      	cmp	r3, #0
 8004598:	bf14      	ite	ne
 800459a:	2301      	movne	r3, #1
 800459c:	2300      	moveq	r3, #0
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	e00b      	b.n	80045ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	43da      	mvns	r2, r3
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	4013      	ands	r3, r2
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	bf14      	ite	ne
 80045b4:	2301      	movne	r3, #1
 80045b6:	2300      	moveq	r3, #0
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d016      	beq.n	80045ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2220      	movs	r2, #32
 80045c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d8:	f043 0220 	orr.w	r2, r3, #32
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e021      	b.n	8004630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	0c1b      	lsrs	r3, r3, #16
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d10c      	bne.n	8004610 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	695b      	ldr	r3, [r3, #20]
 80045fc:	43da      	mvns	r2, r3
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	4013      	ands	r3, r2
 8004602:	b29b      	uxth	r3, r3
 8004604:	2b00      	cmp	r3, #0
 8004606:	bf14      	ite	ne
 8004608:	2301      	movne	r3, #1
 800460a:	2300      	moveq	r3, #0
 800460c:	b2db      	uxtb	r3, r3
 800460e:	e00b      	b.n	8004628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	43da      	mvns	r2, r3
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	4013      	ands	r3, r2
 800461c:	b29b      	uxth	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	bf14      	ite	ne
 8004622:	2301      	movne	r3, #1
 8004624:	2300      	moveq	r3, #0
 8004626:	b2db      	uxtb	r3, r3
 8004628:	2b00      	cmp	r3, #0
 800462a:	f47f af6d 	bne.w	8004508 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800462e:	2300      	movs	r3, #0
}
 8004630:	4618      	mov	r0, r3
 8004632:	3710      	adds	r7, #16
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004644:	e034      	b.n	80046b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f000 f8b8 	bl	80047bc <I2C_IsAcknowledgeFailed>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d001      	beq.n	8004656 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e034      	b.n	80046c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800465c:	d028      	beq.n	80046b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800465e:	f7fd fa6d 	bl	8001b3c <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	68ba      	ldr	r2, [r7, #8]
 800466a:	429a      	cmp	r2, r3
 800466c:	d302      	bcc.n	8004674 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d11d      	bne.n	80046b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800467e:	2b80      	cmp	r3, #128	@ 0x80
 8004680:	d016      	beq.n	80046b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2220      	movs	r2, #32
 800468c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800469c:	f043 0220 	orr.w	r2, r3, #32
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e007      	b.n	80046c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046ba:	2b80      	cmp	r3, #128	@ 0x80
 80046bc:	d1c3      	bne.n	8004646 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3710      	adds	r7, #16
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046d4:	e034      	b.n	8004740 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	f000 f870 	bl	80047bc <I2C_IsAcknowledgeFailed>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d001      	beq.n	80046e6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e034      	b.n	8004750 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ec:	d028      	beq.n	8004740 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046ee:	f7fd fa25 	bl	8001b3c <HAL_GetTick>
 80046f2:	4602      	mov	r2, r0
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	68ba      	ldr	r2, [r7, #8]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d302      	bcc.n	8004704 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d11d      	bne.n	8004740 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	f003 0304 	and.w	r3, r3, #4
 800470e:	2b04      	cmp	r3, #4
 8004710:	d016      	beq.n	8004740 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2220      	movs	r2, #32
 800471c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800472c:	f043 0220 	orr.w	r2, r3, #32
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e007      	b.n	8004750 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	f003 0304 	and.w	r3, r3, #4
 800474a:	2b04      	cmp	r3, #4
 800474c:	d1c3      	bne.n	80046d6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800474e:	2300      	movs	r3, #0
}
 8004750:	4618      	mov	r0, r3
 8004752:	3710      	adds	r7, #16
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004760:	2300      	movs	r3, #0
 8004762:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004764:	4b13      	ldr	r3, [pc, #76]	@ (80047b4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	08db      	lsrs	r3, r3, #3
 800476a:	4a13      	ldr	r2, [pc, #76]	@ (80047b8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800476c:	fba2 2303 	umull	r2, r3, r2, r3
 8004770:	0a1a      	lsrs	r2, r3, #8
 8004772:	4613      	mov	r3, r2
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	4413      	add	r3, r2
 8004778:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	3b01      	subs	r3, #1
 800477e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d107      	bne.n	8004796 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800478a:	f043 0220 	orr.w	r2, r3, #32
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e008      	b.n	80047a8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047a4:	d0e9      	beq.n	800477a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3714      	adds	r7, #20
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bc80      	pop	{r7}
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop
 80047b4:	20000020 	.word	0x20000020
 80047b8:	14f8b589 	.word	0x14f8b589

080047bc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	695b      	ldr	r3, [r3, #20]
 80047ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047d2:	d11b      	bne.n	800480c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80047dc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2220      	movs	r2, #32
 80047e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f8:	f043 0204 	orr.w	r2, r3, #4
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e000      	b.n	800480e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	370c      	adds	r7, #12
 8004812:	46bd      	mov	sp, r7
 8004814:	bc80      	pop	{r7}
 8004816:	4770      	bx	lr

08004818 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004824:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004828:	d103      	bne.n	8004832 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2201      	movs	r2, #1
 800482e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004830:	e007      	b.n	8004842 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004836:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800483a:	d102      	bne.n	8004842 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2208      	movs	r2, #8
 8004840:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004842:	bf00      	nop
 8004844:	370c      	adds	r7, #12
 8004846:	46bd      	mov	sp, r7
 8004848:	bc80      	pop	{r7}
 800484a:	4770      	bx	lr

0800484c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b086      	sub	sp, #24
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d101      	bne.n	800485e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e272      	b.n	8004d44 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	2b00      	cmp	r3, #0
 8004868:	f000 8087 	beq.w	800497a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800486c:	4b92      	ldr	r3, [pc, #584]	@ (8004ab8 <HAL_RCC_OscConfig+0x26c>)
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f003 030c 	and.w	r3, r3, #12
 8004874:	2b04      	cmp	r3, #4
 8004876:	d00c      	beq.n	8004892 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004878:	4b8f      	ldr	r3, [pc, #572]	@ (8004ab8 <HAL_RCC_OscConfig+0x26c>)
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f003 030c 	and.w	r3, r3, #12
 8004880:	2b08      	cmp	r3, #8
 8004882:	d112      	bne.n	80048aa <HAL_RCC_OscConfig+0x5e>
 8004884:	4b8c      	ldr	r3, [pc, #560]	@ (8004ab8 <HAL_RCC_OscConfig+0x26c>)
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800488c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004890:	d10b      	bne.n	80048aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004892:	4b89      	ldr	r3, [pc, #548]	@ (8004ab8 <HAL_RCC_OscConfig+0x26c>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d06c      	beq.n	8004978 <HAL_RCC_OscConfig+0x12c>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d168      	bne.n	8004978 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e24c      	b.n	8004d44 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048b2:	d106      	bne.n	80048c2 <HAL_RCC_OscConfig+0x76>
 80048b4:	4b80      	ldr	r3, [pc, #512]	@ (8004ab8 <HAL_RCC_OscConfig+0x26c>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a7f      	ldr	r2, [pc, #508]	@ (8004ab8 <HAL_RCC_OscConfig+0x26c>)
 80048ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048be:	6013      	str	r3, [r2, #0]
 80048c0:	e02e      	b.n	8004920 <HAL_RCC_OscConfig+0xd4>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d10c      	bne.n	80048e4 <HAL_RCC_OscConfig+0x98>
 80048ca:	4b7b      	ldr	r3, [pc, #492]	@ (8004ab8 <HAL_RCC_OscConfig+0x26c>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a7a      	ldr	r2, [pc, #488]	@ (8004ab8 <HAL_RCC_OscConfig+0x26c>)
 80048d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048d4:	6013      	str	r3, [r2, #0]
 80048d6:	4b78      	ldr	r3, [pc, #480]	@ (8004ab8 <HAL_RCC_OscConfig+0x26c>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a77      	ldr	r2, [pc, #476]	@ (8004ab8 <HAL_RCC_OscConfig+0x26c>)
 80048dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80048e0:	6013      	str	r3, [r2, #0]
 80048e2:	e01d      	b.n	8004920 <HAL_RCC_OscConfig+0xd4>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80048ec:	d10c      	bne.n	8004908 <HAL_RCC_OscConfig+0xbc>
 80048ee:	4b72      	ldr	r3, [pc, #456]	@ (8004ab8 <HAL_RCC_OscConfig+0x26c>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a71      	ldr	r2, [pc, #452]	@ (8004ab8 <HAL_RCC_OscConfig+0x26c>)
 80048f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80048f8:	6013      	str	r3, [r2, #0]
 80048fa:	4b6f      	ldr	r3, [pc, #444]	@ (8004ab8 <HAL_RCC_OscConfig+0x26c>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a6e      	ldr	r2, [pc, #440]	@ (8004ab8 <HAL_RCC_OscConfig+0x26c>)
 8004900:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004904:	6013      	str	r3, [r2, #0]
 8004906:	e00b      	b.n	8004920 <HAL_RCC_OscConfig+0xd4>
 8004908:	4b6b      	ldr	r3, [pc, #428]	@ (8004ab8 <HAL_RCC_OscConfig+0x26c>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a6a      	ldr	r2, [pc, #424]	@ (8004ab8 <HAL_RCC_OscConfig+0x26c>)
 800490e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004912:	6013      	str	r3, [r2, #0]
 8004914:	4b68      	ldr	r3, [pc, #416]	@ (8004ab8 <HAL_RCC_OscConfig+0x26c>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a67      	ldr	r2, [pc, #412]	@ (8004ab8 <HAL_RCC_OscConfig+0x26c>)
 800491a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800491e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d013      	beq.n	8004950 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004928:	f7fd f908 	bl	8001b3c <HAL_GetTick>
 800492c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800492e:	e008      	b.n	8004942 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004930:	f7fd f904 	bl	8001b3c <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	2b64      	cmp	r3, #100	@ 0x64
 800493c:	d901      	bls.n	8004942 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e200      	b.n	8004d44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004942:	4b5d      	ldr	r3, [pc, #372]	@ (8004ab8 <HAL_RCC_OscConfig+0x26c>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d0f0      	beq.n	8004930 <HAL_RCC_OscConfig+0xe4>
 800494e:	e014      	b.n	800497a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004950:	f7fd f8f4 	bl	8001b3c <HAL_GetTick>
 8004954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004956:	e008      	b.n	800496a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004958:	f7fd f8f0 	bl	8001b3c <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b64      	cmp	r3, #100	@ 0x64
 8004964:	d901      	bls.n	800496a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e1ec      	b.n	8004d44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800496a:	4b53      	ldr	r3, [pc, #332]	@ (8004ab8 <HAL_RCC_OscConfig+0x26c>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1f0      	bne.n	8004958 <HAL_RCC_OscConfig+0x10c>
 8004976:	e000      	b.n	800497a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004978:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0302 	and.w	r3, r3, #2
 8004982:	2b00      	cmp	r3, #0
 8004984:	d063      	beq.n	8004a4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004986:	4b4c      	ldr	r3, [pc, #304]	@ (8004ab8 <HAL_RCC_OscConfig+0x26c>)
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f003 030c 	and.w	r3, r3, #12
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00b      	beq.n	80049aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004992:	4b49      	ldr	r3, [pc, #292]	@ (8004ab8 <HAL_RCC_OscConfig+0x26c>)
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f003 030c 	and.w	r3, r3, #12
 800499a:	2b08      	cmp	r3, #8
 800499c:	d11c      	bne.n	80049d8 <HAL_RCC_OscConfig+0x18c>
 800499e:	4b46      	ldr	r3, [pc, #280]	@ (8004ab8 <HAL_RCC_OscConfig+0x26c>)
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d116      	bne.n	80049d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049aa:	4b43      	ldr	r3, [pc, #268]	@ (8004ab8 <HAL_RCC_OscConfig+0x26c>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0302 	and.w	r3, r3, #2
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d005      	beq.n	80049c2 <HAL_RCC_OscConfig+0x176>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d001      	beq.n	80049c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e1c0      	b.n	8004d44 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049c2:	4b3d      	ldr	r3, [pc, #244]	@ (8004ab8 <HAL_RCC_OscConfig+0x26c>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	00db      	lsls	r3, r3, #3
 80049d0:	4939      	ldr	r1, [pc, #228]	@ (8004ab8 <HAL_RCC_OscConfig+0x26c>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049d6:	e03a      	b.n	8004a4e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d020      	beq.n	8004a22 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049e0:	4b36      	ldr	r3, [pc, #216]	@ (8004abc <HAL_RCC_OscConfig+0x270>)
 80049e2:	2201      	movs	r2, #1
 80049e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049e6:	f7fd f8a9 	bl	8001b3c <HAL_GetTick>
 80049ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ec:	e008      	b.n	8004a00 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049ee:	f7fd f8a5 	bl	8001b3c <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d901      	bls.n	8004a00 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e1a1      	b.n	8004d44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a00:	4b2d      	ldr	r3, [pc, #180]	@ (8004ab8 <HAL_RCC_OscConfig+0x26c>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0302 	and.w	r3, r3, #2
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d0f0      	beq.n	80049ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a0c:	4b2a      	ldr	r3, [pc, #168]	@ (8004ab8 <HAL_RCC_OscConfig+0x26c>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	695b      	ldr	r3, [r3, #20]
 8004a18:	00db      	lsls	r3, r3, #3
 8004a1a:	4927      	ldr	r1, [pc, #156]	@ (8004ab8 <HAL_RCC_OscConfig+0x26c>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	600b      	str	r3, [r1, #0]
 8004a20:	e015      	b.n	8004a4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a22:	4b26      	ldr	r3, [pc, #152]	@ (8004abc <HAL_RCC_OscConfig+0x270>)
 8004a24:	2200      	movs	r2, #0
 8004a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a28:	f7fd f888 	bl	8001b3c <HAL_GetTick>
 8004a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a2e:	e008      	b.n	8004a42 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a30:	f7fd f884 	bl	8001b3c <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e180      	b.n	8004d44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a42:	4b1d      	ldr	r3, [pc, #116]	@ (8004ab8 <HAL_RCC_OscConfig+0x26c>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0302 	and.w	r3, r3, #2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d1f0      	bne.n	8004a30 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0308 	and.w	r3, r3, #8
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d03a      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d019      	beq.n	8004a96 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a62:	4b17      	ldr	r3, [pc, #92]	@ (8004ac0 <HAL_RCC_OscConfig+0x274>)
 8004a64:	2201      	movs	r2, #1
 8004a66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a68:	f7fd f868 	bl	8001b3c <HAL_GetTick>
 8004a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a6e:	e008      	b.n	8004a82 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a70:	f7fd f864 	bl	8001b3c <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d901      	bls.n	8004a82 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e160      	b.n	8004d44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a82:	4b0d      	ldr	r3, [pc, #52]	@ (8004ab8 <HAL_RCC_OscConfig+0x26c>)
 8004a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a86:	f003 0302 	and.w	r3, r3, #2
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d0f0      	beq.n	8004a70 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004a8e:	2001      	movs	r0, #1
 8004a90:	f000 face 	bl	8005030 <RCC_Delay>
 8004a94:	e01c      	b.n	8004ad0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a96:	4b0a      	ldr	r3, [pc, #40]	@ (8004ac0 <HAL_RCC_OscConfig+0x274>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a9c:	f7fd f84e 	bl	8001b3c <HAL_GetTick>
 8004aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004aa2:	e00f      	b.n	8004ac4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004aa4:	f7fd f84a 	bl	8001b3c <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d908      	bls.n	8004ac4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e146      	b.n	8004d44 <HAL_RCC_OscConfig+0x4f8>
 8004ab6:	bf00      	nop
 8004ab8:	40021000 	.word	0x40021000
 8004abc:	42420000 	.word	0x42420000
 8004ac0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ac4:	4b92      	ldr	r3, [pc, #584]	@ (8004d10 <HAL_RCC_OscConfig+0x4c4>)
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac8:	f003 0302 	and.w	r3, r3, #2
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d1e9      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0304 	and.w	r3, r3, #4
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f000 80a6 	beq.w	8004c2a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ae2:	4b8b      	ldr	r3, [pc, #556]	@ (8004d10 <HAL_RCC_OscConfig+0x4c4>)
 8004ae4:	69db      	ldr	r3, [r3, #28]
 8004ae6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d10d      	bne.n	8004b0a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004aee:	4b88      	ldr	r3, [pc, #544]	@ (8004d10 <HAL_RCC_OscConfig+0x4c4>)
 8004af0:	69db      	ldr	r3, [r3, #28]
 8004af2:	4a87      	ldr	r2, [pc, #540]	@ (8004d10 <HAL_RCC_OscConfig+0x4c4>)
 8004af4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004af8:	61d3      	str	r3, [r2, #28]
 8004afa:	4b85      	ldr	r3, [pc, #532]	@ (8004d10 <HAL_RCC_OscConfig+0x4c4>)
 8004afc:	69db      	ldr	r3, [r3, #28]
 8004afe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b02:	60bb      	str	r3, [r7, #8]
 8004b04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b06:	2301      	movs	r3, #1
 8004b08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b0a:	4b82      	ldr	r3, [pc, #520]	@ (8004d14 <HAL_RCC_OscConfig+0x4c8>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d118      	bne.n	8004b48 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b16:	4b7f      	ldr	r3, [pc, #508]	@ (8004d14 <HAL_RCC_OscConfig+0x4c8>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a7e      	ldr	r2, [pc, #504]	@ (8004d14 <HAL_RCC_OscConfig+0x4c8>)
 8004b1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b22:	f7fd f80b 	bl	8001b3c <HAL_GetTick>
 8004b26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b28:	e008      	b.n	8004b3c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b2a:	f7fd f807 	bl	8001b3c <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	2b64      	cmp	r3, #100	@ 0x64
 8004b36:	d901      	bls.n	8004b3c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e103      	b.n	8004d44 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b3c:	4b75      	ldr	r3, [pc, #468]	@ (8004d14 <HAL_RCC_OscConfig+0x4c8>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d0f0      	beq.n	8004b2a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d106      	bne.n	8004b5e <HAL_RCC_OscConfig+0x312>
 8004b50:	4b6f      	ldr	r3, [pc, #444]	@ (8004d10 <HAL_RCC_OscConfig+0x4c4>)
 8004b52:	6a1b      	ldr	r3, [r3, #32]
 8004b54:	4a6e      	ldr	r2, [pc, #440]	@ (8004d10 <HAL_RCC_OscConfig+0x4c4>)
 8004b56:	f043 0301 	orr.w	r3, r3, #1
 8004b5a:	6213      	str	r3, [r2, #32]
 8004b5c:	e02d      	b.n	8004bba <HAL_RCC_OscConfig+0x36e>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d10c      	bne.n	8004b80 <HAL_RCC_OscConfig+0x334>
 8004b66:	4b6a      	ldr	r3, [pc, #424]	@ (8004d10 <HAL_RCC_OscConfig+0x4c4>)
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	4a69      	ldr	r2, [pc, #420]	@ (8004d10 <HAL_RCC_OscConfig+0x4c4>)
 8004b6c:	f023 0301 	bic.w	r3, r3, #1
 8004b70:	6213      	str	r3, [r2, #32]
 8004b72:	4b67      	ldr	r3, [pc, #412]	@ (8004d10 <HAL_RCC_OscConfig+0x4c4>)
 8004b74:	6a1b      	ldr	r3, [r3, #32]
 8004b76:	4a66      	ldr	r2, [pc, #408]	@ (8004d10 <HAL_RCC_OscConfig+0x4c4>)
 8004b78:	f023 0304 	bic.w	r3, r3, #4
 8004b7c:	6213      	str	r3, [r2, #32]
 8004b7e:	e01c      	b.n	8004bba <HAL_RCC_OscConfig+0x36e>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	2b05      	cmp	r3, #5
 8004b86:	d10c      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x356>
 8004b88:	4b61      	ldr	r3, [pc, #388]	@ (8004d10 <HAL_RCC_OscConfig+0x4c4>)
 8004b8a:	6a1b      	ldr	r3, [r3, #32]
 8004b8c:	4a60      	ldr	r2, [pc, #384]	@ (8004d10 <HAL_RCC_OscConfig+0x4c4>)
 8004b8e:	f043 0304 	orr.w	r3, r3, #4
 8004b92:	6213      	str	r3, [r2, #32]
 8004b94:	4b5e      	ldr	r3, [pc, #376]	@ (8004d10 <HAL_RCC_OscConfig+0x4c4>)
 8004b96:	6a1b      	ldr	r3, [r3, #32]
 8004b98:	4a5d      	ldr	r2, [pc, #372]	@ (8004d10 <HAL_RCC_OscConfig+0x4c4>)
 8004b9a:	f043 0301 	orr.w	r3, r3, #1
 8004b9e:	6213      	str	r3, [r2, #32]
 8004ba0:	e00b      	b.n	8004bba <HAL_RCC_OscConfig+0x36e>
 8004ba2:	4b5b      	ldr	r3, [pc, #364]	@ (8004d10 <HAL_RCC_OscConfig+0x4c4>)
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	4a5a      	ldr	r2, [pc, #360]	@ (8004d10 <HAL_RCC_OscConfig+0x4c4>)
 8004ba8:	f023 0301 	bic.w	r3, r3, #1
 8004bac:	6213      	str	r3, [r2, #32]
 8004bae:	4b58      	ldr	r3, [pc, #352]	@ (8004d10 <HAL_RCC_OscConfig+0x4c4>)
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	4a57      	ldr	r2, [pc, #348]	@ (8004d10 <HAL_RCC_OscConfig+0x4c4>)
 8004bb4:	f023 0304 	bic.w	r3, r3, #4
 8004bb8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d015      	beq.n	8004bee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bc2:	f7fc ffbb 	bl	8001b3c <HAL_GetTick>
 8004bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bc8:	e00a      	b.n	8004be0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bca:	f7fc ffb7 	bl	8001b3c <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d901      	bls.n	8004be0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e0b1      	b.n	8004d44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004be0:	4b4b      	ldr	r3, [pc, #300]	@ (8004d10 <HAL_RCC_OscConfig+0x4c4>)
 8004be2:	6a1b      	ldr	r3, [r3, #32]
 8004be4:	f003 0302 	and.w	r3, r3, #2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d0ee      	beq.n	8004bca <HAL_RCC_OscConfig+0x37e>
 8004bec:	e014      	b.n	8004c18 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bee:	f7fc ffa5 	bl	8001b3c <HAL_GetTick>
 8004bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bf4:	e00a      	b.n	8004c0c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bf6:	f7fc ffa1 	bl	8001b3c <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d901      	bls.n	8004c0c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e09b      	b.n	8004d44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c0c:	4b40      	ldr	r3, [pc, #256]	@ (8004d10 <HAL_RCC_OscConfig+0x4c4>)
 8004c0e:	6a1b      	ldr	r3, [r3, #32]
 8004c10:	f003 0302 	and.w	r3, r3, #2
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d1ee      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004c18:	7dfb      	ldrb	r3, [r7, #23]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d105      	bne.n	8004c2a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c1e:	4b3c      	ldr	r3, [pc, #240]	@ (8004d10 <HAL_RCC_OscConfig+0x4c4>)
 8004c20:	69db      	ldr	r3, [r3, #28]
 8004c22:	4a3b      	ldr	r2, [pc, #236]	@ (8004d10 <HAL_RCC_OscConfig+0x4c4>)
 8004c24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c28:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	69db      	ldr	r3, [r3, #28]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	f000 8087 	beq.w	8004d42 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c34:	4b36      	ldr	r3, [pc, #216]	@ (8004d10 <HAL_RCC_OscConfig+0x4c4>)
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f003 030c 	and.w	r3, r3, #12
 8004c3c:	2b08      	cmp	r3, #8
 8004c3e:	d061      	beq.n	8004d04 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	69db      	ldr	r3, [r3, #28]
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d146      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c48:	4b33      	ldr	r3, [pc, #204]	@ (8004d18 <HAL_RCC_OscConfig+0x4cc>)
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c4e:	f7fc ff75 	bl	8001b3c <HAL_GetTick>
 8004c52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c54:	e008      	b.n	8004c68 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c56:	f7fc ff71 	bl	8001b3c <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d901      	bls.n	8004c68 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004c64:	2303      	movs	r3, #3
 8004c66:	e06d      	b.n	8004d44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c68:	4b29      	ldr	r3, [pc, #164]	@ (8004d10 <HAL_RCC_OscConfig+0x4c4>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1f0      	bne.n	8004c56 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a1b      	ldr	r3, [r3, #32]
 8004c78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c7c:	d108      	bne.n	8004c90 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004c7e:	4b24      	ldr	r3, [pc, #144]	@ (8004d10 <HAL_RCC_OscConfig+0x4c4>)
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	4921      	ldr	r1, [pc, #132]	@ (8004d10 <HAL_RCC_OscConfig+0x4c4>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c90:	4b1f      	ldr	r3, [pc, #124]	@ (8004d10 <HAL_RCC_OscConfig+0x4c4>)
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a19      	ldr	r1, [r3, #32]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca0:	430b      	orrs	r3, r1
 8004ca2:	491b      	ldr	r1, [pc, #108]	@ (8004d10 <HAL_RCC_OscConfig+0x4c4>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ca8:	4b1b      	ldr	r3, [pc, #108]	@ (8004d18 <HAL_RCC_OscConfig+0x4cc>)
 8004caa:	2201      	movs	r2, #1
 8004cac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cae:	f7fc ff45 	bl	8001b3c <HAL_GetTick>
 8004cb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004cb4:	e008      	b.n	8004cc8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cb6:	f7fc ff41 	bl	8001b3c <HAL_GetTick>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d901      	bls.n	8004cc8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	e03d      	b.n	8004d44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004cc8:	4b11      	ldr	r3, [pc, #68]	@ (8004d10 <HAL_RCC_OscConfig+0x4c4>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d0f0      	beq.n	8004cb6 <HAL_RCC_OscConfig+0x46a>
 8004cd4:	e035      	b.n	8004d42 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cd6:	4b10      	ldr	r3, [pc, #64]	@ (8004d18 <HAL_RCC_OscConfig+0x4cc>)
 8004cd8:	2200      	movs	r2, #0
 8004cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cdc:	f7fc ff2e 	bl	8001b3c <HAL_GetTick>
 8004ce0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ce2:	e008      	b.n	8004cf6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ce4:	f7fc ff2a 	bl	8001b3c <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d901      	bls.n	8004cf6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e026      	b.n	8004d44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cf6:	4b06      	ldr	r3, [pc, #24]	@ (8004d10 <HAL_RCC_OscConfig+0x4c4>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1f0      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x498>
 8004d02:	e01e      	b.n	8004d42 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	69db      	ldr	r3, [r3, #28]
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d107      	bne.n	8004d1c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e019      	b.n	8004d44 <HAL_RCC_OscConfig+0x4f8>
 8004d10:	40021000 	.word	0x40021000
 8004d14:	40007000 	.word	0x40007000
 8004d18:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8004d4c <HAL_RCC_OscConfig+0x500>)
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a1b      	ldr	r3, [r3, #32]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d106      	bne.n	8004d3e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d001      	beq.n	8004d42 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e000      	b.n	8004d44 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004d42:	2300      	movs	r3, #0
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3718      	adds	r7, #24
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	40021000 	.word	0x40021000

08004d50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d101      	bne.n	8004d64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e0d0      	b.n	8004f06 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d64:	4b6a      	ldr	r3, [pc, #424]	@ (8004f10 <HAL_RCC_ClockConfig+0x1c0>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0307 	and.w	r3, r3, #7
 8004d6c:	683a      	ldr	r2, [r7, #0]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d910      	bls.n	8004d94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d72:	4b67      	ldr	r3, [pc, #412]	@ (8004f10 <HAL_RCC_ClockConfig+0x1c0>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f023 0207 	bic.w	r2, r3, #7
 8004d7a:	4965      	ldr	r1, [pc, #404]	@ (8004f10 <HAL_RCC_ClockConfig+0x1c0>)
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d82:	4b63      	ldr	r3, [pc, #396]	@ (8004f10 <HAL_RCC_ClockConfig+0x1c0>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0307 	and.w	r3, r3, #7
 8004d8a:	683a      	ldr	r2, [r7, #0]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d001      	beq.n	8004d94 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e0b8      	b.n	8004f06 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0302 	and.w	r3, r3, #2
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d020      	beq.n	8004de2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0304 	and.w	r3, r3, #4
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d005      	beq.n	8004db8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004dac:	4b59      	ldr	r3, [pc, #356]	@ (8004f14 <HAL_RCC_ClockConfig+0x1c4>)
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	4a58      	ldr	r2, [pc, #352]	@ (8004f14 <HAL_RCC_ClockConfig+0x1c4>)
 8004db2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004db6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0308 	and.w	r3, r3, #8
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d005      	beq.n	8004dd0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004dc4:	4b53      	ldr	r3, [pc, #332]	@ (8004f14 <HAL_RCC_ClockConfig+0x1c4>)
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	4a52      	ldr	r2, [pc, #328]	@ (8004f14 <HAL_RCC_ClockConfig+0x1c4>)
 8004dca:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004dce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dd0:	4b50      	ldr	r3, [pc, #320]	@ (8004f14 <HAL_RCC_ClockConfig+0x1c4>)
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	494d      	ldr	r1, [pc, #308]	@ (8004f14 <HAL_RCC_ClockConfig+0x1c4>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0301 	and.w	r3, r3, #1
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d040      	beq.n	8004e70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d107      	bne.n	8004e06 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004df6:	4b47      	ldr	r3, [pc, #284]	@ (8004f14 <HAL_RCC_ClockConfig+0x1c4>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d115      	bne.n	8004e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e07f      	b.n	8004f06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d107      	bne.n	8004e1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e0e:	4b41      	ldr	r3, [pc, #260]	@ (8004f14 <HAL_RCC_ClockConfig+0x1c4>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d109      	bne.n	8004e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e073      	b.n	8004f06 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e1e:	4b3d      	ldr	r3, [pc, #244]	@ (8004f14 <HAL_RCC_ClockConfig+0x1c4>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0302 	and.w	r3, r3, #2
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d101      	bne.n	8004e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e06b      	b.n	8004f06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e2e:	4b39      	ldr	r3, [pc, #228]	@ (8004f14 <HAL_RCC_ClockConfig+0x1c4>)
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f023 0203 	bic.w	r2, r3, #3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	4936      	ldr	r1, [pc, #216]	@ (8004f14 <HAL_RCC_ClockConfig+0x1c4>)
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e40:	f7fc fe7c 	bl	8001b3c <HAL_GetTick>
 8004e44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e46:	e00a      	b.n	8004e5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e48:	f7fc fe78 	bl	8001b3c <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d901      	bls.n	8004e5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e053      	b.n	8004f06 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e5e:	4b2d      	ldr	r3, [pc, #180]	@ (8004f14 <HAL_RCC_ClockConfig+0x1c4>)
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f003 020c 	and.w	r2, r3, #12
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d1eb      	bne.n	8004e48 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e70:	4b27      	ldr	r3, [pc, #156]	@ (8004f10 <HAL_RCC_ClockConfig+0x1c0>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0307 	and.w	r3, r3, #7
 8004e78:	683a      	ldr	r2, [r7, #0]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d210      	bcs.n	8004ea0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e7e:	4b24      	ldr	r3, [pc, #144]	@ (8004f10 <HAL_RCC_ClockConfig+0x1c0>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f023 0207 	bic.w	r2, r3, #7
 8004e86:	4922      	ldr	r1, [pc, #136]	@ (8004f10 <HAL_RCC_ClockConfig+0x1c0>)
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e8e:	4b20      	ldr	r3, [pc, #128]	@ (8004f10 <HAL_RCC_ClockConfig+0x1c0>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0307 	and.w	r3, r3, #7
 8004e96:	683a      	ldr	r2, [r7, #0]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d001      	beq.n	8004ea0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e032      	b.n	8004f06 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0304 	and.w	r3, r3, #4
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d008      	beq.n	8004ebe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004eac:	4b19      	ldr	r3, [pc, #100]	@ (8004f14 <HAL_RCC_ClockConfig+0x1c4>)
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	4916      	ldr	r1, [pc, #88]	@ (8004f14 <HAL_RCC_ClockConfig+0x1c4>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0308 	and.w	r3, r3, #8
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d009      	beq.n	8004ede <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004eca:	4b12      	ldr	r3, [pc, #72]	@ (8004f14 <HAL_RCC_ClockConfig+0x1c4>)
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	00db      	lsls	r3, r3, #3
 8004ed8:	490e      	ldr	r1, [pc, #56]	@ (8004f14 <HAL_RCC_ClockConfig+0x1c4>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ede:	f000 f821 	bl	8004f24 <HAL_RCC_GetSysClockFreq>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8004f14 <HAL_RCC_ClockConfig+0x1c4>)
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	091b      	lsrs	r3, r3, #4
 8004eea:	f003 030f 	and.w	r3, r3, #15
 8004eee:	490a      	ldr	r1, [pc, #40]	@ (8004f18 <HAL_RCC_ClockConfig+0x1c8>)
 8004ef0:	5ccb      	ldrb	r3, [r1, r3]
 8004ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ef6:	4a09      	ldr	r2, [pc, #36]	@ (8004f1c <HAL_RCC_ClockConfig+0x1cc>)
 8004ef8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004efa:	4b09      	ldr	r3, [pc, #36]	@ (8004f20 <HAL_RCC_ClockConfig+0x1d0>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7fc fdda 	bl	8001ab8 <HAL_InitTick>

  return HAL_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3710      	adds	r7, #16
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	40022000 	.word	0x40022000
 8004f14:	40021000 	.word	0x40021000
 8004f18:	08009298 	.word	0x08009298
 8004f1c:	20000020 	.word	0x20000020
 8004f20:	20000024 	.word	0x20000024

08004f24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b087      	sub	sp, #28
 8004f28:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	60fb      	str	r3, [r7, #12]
 8004f2e:	2300      	movs	r3, #0
 8004f30:	60bb      	str	r3, [r7, #8]
 8004f32:	2300      	movs	r3, #0
 8004f34:	617b      	str	r3, [r7, #20]
 8004f36:	2300      	movs	r3, #0
 8004f38:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004f3e:	4b1e      	ldr	r3, [pc, #120]	@ (8004fb8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f003 030c 	and.w	r3, r3, #12
 8004f4a:	2b04      	cmp	r3, #4
 8004f4c:	d002      	beq.n	8004f54 <HAL_RCC_GetSysClockFreq+0x30>
 8004f4e:	2b08      	cmp	r3, #8
 8004f50:	d003      	beq.n	8004f5a <HAL_RCC_GetSysClockFreq+0x36>
 8004f52:	e027      	b.n	8004fa4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004f54:	4b19      	ldr	r3, [pc, #100]	@ (8004fbc <HAL_RCC_GetSysClockFreq+0x98>)
 8004f56:	613b      	str	r3, [r7, #16]
      break;
 8004f58:	e027      	b.n	8004faa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	0c9b      	lsrs	r3, r3, #18
 8004f5e:	f003 030f 	and.w	r3, r3, #15
 8004f62:	4a17      	ldr	r2, [pc, #92]	@ (8004fc0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004f64:	5cd3      	ldrb	r3, [r2, r3]
 8004f66:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d010      	beq.n	8004f94 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004f72:	4b11      	ldr	r3, [pc, #68]	@ (8004fb8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	0c5b      	lsrs	r3, r3, #17
 8004f78:	f003 0301 	and.w	r3, r3, #1
 8004f7c:	4a11      	ldr	r2, [pc, #68]	@ (8004fc4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004f7e:	5cd3      	ldrb	r3, [r2, r3]
 8004f80:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a0d      	ldr	r2, [pc, #52]	@ (8004fbc <HAL_RCC_GetSysClockFreq+0x98>)
 8004f86:	fb03 f202 	mul.w	r2, r3, r2
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f90:	617b      	str	r3, [r7, #20]
 8004f92:	e004      	b.n	8004f9e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a0c      	ldr	r2, [pc, #48]	@ (8004fc8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004f98:	fb02 f303 	mul.w	r3, r2, r3
 8004f9c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	613b      	str	r3, [r7, #16]
      break;
 8004fa2:	e002      	b.n	8004faa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004fa4:	4b05      	ldr	r3, [pc, #20]	@ (8004fbc <HAL_RCC_GetSysClockFreq+0x98>)
 8004fa6:	613b      	str	r3, [r7, #16]
      break;
 8004fa8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004faa:	693b      	ldr	r3, [r7, #16]
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	371c      	adds	r7, #28
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bc80      	pop	{r7}
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop
 8004fb8:	40021000 	.word	0x40021000
 8004fbc:	007a1200 	.word	0x007a1200
 8004fc0:	080092b0 	.word	0x080092b0
 8004fc4:	080092c0 	.word	0x080092c0
 8004fc8:	003d0900 	.word	0x003d0900

08004fcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fd0:	4b02      	ldr	r3, [pc, #8]	@ (8004fdc <HAL_RCC_GetHCLKFreq+0x10>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bc80      	pop	{r7}
 8004fda:	4770      	bx	lr
 8004fdc:	20000020 	.word	0x20000020

08004fe0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004fe4:	f7ff fff2 	bl	8004fcc <HAL_RCC_GetHCLKFreq>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	4b05      	ldr	r3, [pc, #20]	@ (8005000 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	0a1b      	lsrs	r3, r3, #8
 8004ff0:	f003 0307 	and.w	r3, r3, #7
 8004ff4:	4903      	ldr	r1, [pc, #12]	@ (8005004 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ff6:	5ccb      	ldrb	r3, [r1, r3]
 8004ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	40021000 	.word	0x40021000
 8005004:	080092a8 	.word	0x080092a8

08005008 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800500c:	f7ff ffde 	bl	8004fcc <HAL_RCC_GetHCLKFreq>
 8005010:	4602      	mov	r2, r0
 8005012:	4b05      	ldr	r3, [pc, #20]	@ (8005028 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	0adb      	lsrs	r3, r3, #11
 8005018:	f003 0307 	and.w	r3, r3, #7
 800501c:	4903      	ldr	r1, [pc, #12]	@ (800502c <HAL_RCC_GetPCLK2Freq+0x24>)
 800501e:	5ccb      	ldrb	r3, [r1, r3]
 8005020:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005024:	4618      	mov	r0, r3
 8005026:	bd80      	pop	{r7, pc}
 8005028:	40021000 	.word	0x40021000
 800502c:	080092a8 	.word	0x080092a8

08005030 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005038:	4b0a      	ldr	r3, [pc, #40]	@ (8005064 <RCC_Delay+0x34>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a0a      	ldr	r2, [pc, #40]	@ (8005068 <RCC_Delay+0x38>)
 800503e:	fba2 2303 	umull	r2, r3, r2, r3
 8005042:	0a5b      	lsrs	r3, r3, #9
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	fb02 f303 	mul.w	r3, r2, r3
 800504a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800504c:	bf00      	nop
  }
  while (Delay --);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	1e5a      	subs	r2, r3, #1
 8005052:	60fa      	str	r2, [r7, #12]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d1f9      	bne.n	800504c <RCC_Delay+0x1c>
}
 8005058:	bf00      	nop
 800505a:	bf00      	nop
 800505c:	3714      	adds	r7, #20
 800505e:	46bd      	mov	sp, r7
 8005060:	bc80      	pop	{r7}
 8005062:	4770      	bx	lr
 8005064:	20000020 	.word	0x20000020
 8005068:	10624dd3 	.word	0x10624dd3

0800506c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800506c:	b480      	push	{r7}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800507a:	b2db      	uxtb	r3, r3
 800507c:	2b01      	cmp	r3, #1
 800507e:	d001      	beq.n	8005084 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e03a      	b.n	80050fa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2202      	movs	r2, #2
 8005088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68da      	ldr	r2, [r3, #12]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f042 0201 	orr.w	r2, r2, #1
 800509a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a18      	ldr	r2, [pc, #96]	@ (8005104 <HAL_TIM_Base_Start_IT+0x98>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d00e      	beq.n	80050c4 <HAL_TIM_Base_Start_IT+0x58>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050ae:	d009      	beq.n	80050c4 <HAL_TIM_Base_Start_IT+0x58>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a14      	ldr	r2, [pc, #80]	@ (8005108 <HAL_TIM_Base_Start_IT+0x9c>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d004      	beq.n	80050c4 <HAL_TIM_Base_Start_IT+0x58>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a13      	ldr	r2, [pc, #76]	@ (800510c <HAL_TIM_Base_Start_IT+0xa0>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d111      	bne.n	80050e8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f003 0307 	and.w	r3, r3, #7
 80050ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2b06      	cmp	r3, #6
 80050d4:	d010      	beq.n	80050f8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f042 0201 	orr.w	r2, r2, #1
 80050e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050e6:	e007      	b.n	80050f8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f042 0201 	orr.w	r2, r2, #1
 80050f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3714      	adds	r7, #20
 80050fe:	46bd      	mov	sp, r7
 8005100:	bc80      	pop	{r7}
 8005102:	4770      	bx	lr
 8005104:	40012c00 	.word	0x40012c00
 8005108:	40000400 	.word	0x40000400
 800510c:	40000800 	.word	0x40000800

08005110 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d101      	bne.n	8005122 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e041      	b.n	80051a6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005128:	b2db      	uxtb	r3, r3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d106      	bne.n	800513c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f7fc fbc0 	bl	80018bc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2202      	movs	r2, #2
 8005140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	3304      	adds	r3, #4
 800514c:	4619      	mov	r1, r3
 800514e:	4610      	mov	r0, r2
 8005150:	f000 f9de 	bl	8005510 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3708      	adds	r7, #8
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}

080051ae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051ae:	b580      	push	{r7, lr}
 80051b0:	b084      	sub	sp, #16
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	f003 0302 	and.w	r3, r3, #2
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d020      	beq.n	8005212 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f003 0302 	and.w	r3, r3, #2
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d01b      	beq.n	8005212 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f06f 0202 	mvn.w	r2, #2
 80051e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	f003 0303 	and.w	r3, r3, #3
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d003      	beq.n	8005200 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f000 f96d 	bl	80054d8 <HAL_TIM_IC_CaptureCallback>
 80051fe:	e005      	b.n	800520c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 f960 	bl	80054c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 f96f 	bl	80054ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	f003 0304 	and.w	r3, r3, #4
 8005218:	2b00      	cmp	r3, #0
 800521a:	d020      	beq.n	800525e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f003 0304 	and.w	r3, r3, #4
 8005222:	2b00      	cmp	r3, #0
 8005224:	d01b      	beq.n	800525e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f06f 0204 	mvn.w	r2, #4
 800522e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2202      	movs	r2, #2
 8005234:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	699b      	ldr	r3, [r3, #24]
 800523c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005240:	2b00      	cmp	r3, #0
 8005242:	d003      	beq.n	800524c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 f947 	bl	80054d8 <HAL_TIM_IC_CaptureCallback>
 800524a:	e005      	b.n	8005258 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 f93a 	bl	80054c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 f949 	bl	80054ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	f003 0308 	and.w	r3, r3, #8
 8005264:	2b00      	cmp	r3, #0
 8005266:	d020      	beq.n	80052aa <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f003 0308 	and.w	r3, r3, #8
 800526e:	2b00      	cmp	r3, #0
 8005270:	d01b      	beq.n	80052aa <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f06f 0208 	mvn.w	r2, #8
 800527a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2204      	movs	r2, #4
 8005280:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	69db      	ldr	r3, [r3, #28]
 8005288:	f003 0303 	and.w	r3, r3, #3
 800528c:	2b00      	cmp	r3, #0
 800528e:	d003      	beq.n	8005298 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f000 f921 	bl	80054d8 <HAL_TIM_IC_CaptureCallback>
 8005296:	e005      	b.n	80052a4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f000 f914 	bl	80054c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 f923 	bl	80054ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	f003 0310 	and.w	r3, r3, #16
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d020      	beq.n	80052f6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f003 0310 	and.w	r3, r3, #16
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d01b      	beq.n	80052f6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f06f 0210 	mvn.w	r2, #16
 80052c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2208      	movs	r2, #8
 80052cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	69db      	ldr	r3, [r3, #28]
 80052d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d003      	beq.n	80052e4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f000 f8fb 	bl	80054d8 <HAL_TIM_IC_CaptureCallback>
 80052e2:	e005      	b.n	80052f0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 f8ee 	bl	80054c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 f8fd 	bl	80054ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	f003 0301 	and.w	r3, r3, #1
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d00c      	beq.n	800531a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f003 0301 	and.w	r3, r3, #1
 8005306:	2b00      	cmp	r3, #0
 8005308:	d007      	beq.n	800531a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f06f 0201 	mvn.w	r2, #1
 8005312:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f7fb ff7d 	bl	8001214 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005320:	2b00      	cmp	r3, #0
 8005322:	d00c      	beq.n	800533e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800532a:	2b00      	cmp	r3, #0
 800532c:	d007      	beq.n	800533e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005336:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 facc 	bl	80058d6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00c      	beq.n	8005362 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800534e:	2b00      	cmp	r3, #0
 8005350:	d007      	beq.n	8005362 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800535a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 f8cd 	bl	80054fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	f003 0320 	and.w	r3, r3, #32
 8005368:	2b00      	cmp	r3, #0
 800536a:	d00c      	beq.n	8005386 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f003 0320 	and.w	r3, r3, #32
 8005372:	2b00      	cmp	r3, #0
 8005374:	d007      	beq.n	8005386 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f06f 0220 	mvn.w	r2, #32
 800537e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f000 fa9f 	bl	80058c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005386:	bf00      	nop
 8005388:	3710      	adds	r7, #16
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}

0800538e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800538e:	b580      	push	{r7, lr}
 8005390:	b086      	sub	sp, #24
 8005392:	af00      	add	r7, sp, #0
 8005394:	60f8      	str	r0, [r7, #12]
 8005396:	60b9      	str	r1, [r7, #8]
 8005398:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800539a:	2300      	movs	r3, #0
 800539c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d101      	bne.n	80053ac <HAL_TIM_IC_ConfigChannel+0x1e>
 80053a8:	2302      	movs	r3, #2
 80053aa:	e088      	b.n	80054be <HAL_TIM_IC_ConfigChannel+0x130>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d11b      	bne.n	80053f2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80053ca:	f000 f90f 	bl	80055ec <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	699a      	ldr	r2, [r3, #24]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f022 020c 	bic.w	r2, r2, #12
 80053dc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	6999      	ldr	r1, [r3, #24]
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	689a      	ldr	r2, [r3, #8]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	430a      	orrs	r2, r1
 80053ee:	619a      	str	r2, [r3, #24]
 80053f0:	e060      	b.n	80054b4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2b04      	cmp	r3, #4
 80053f6:	d11c      	bne.n	8005432 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005408:	f000 f94a 	bl	80056a0 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	699a      	ldr	r2, [r3, #24]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800541a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	6999      	ldr	r1, [r3, #24]
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	021a      	lsls	r2, r3, #8
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	430a      	orrs	r2, r1
 800542e:	619a      	str	r2, [r3, #24]
 8005430:	e040      	b.n	80054b4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2b08      	cmp	r3, #8
 8005436:	d11b      	bne.n	8005470 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005448:	f000 f966 	bl	8005718 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	69da      	ldr	r2, [r3, #28]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f022 020c 	bic.w	r2, r2, #12
 800545a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	69d9      	ldr	r1, [r3, #28]
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	689a      	ldr	r2, [r3, #8]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	430a      	orrs	r2, r1
 800546c:	61da      	str	r2, [r3, #28]
 800546e:	e021      	b.n	80054b4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2b0c      	cmp	r3, #12
 8005474:	d11c      	bne.n	80054b0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005486:	f000 f982 	bl	800578e <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	69da      	ldr	r2, [r3, #28]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005498:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	69d9      	ldr	r1, [r3, #28]
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	021a      	lsls	r2, r3, #8
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	430a      	orrs	r2, r1
 80054ac:	61da      	str	r2, [r3, #28]
 80054ae:	e001      	b.n	80054b4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80054bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3718      	adds	r7, #24
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}

080054c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054c6:	b480      	push	{r7}
 80054c8:	b083      	sub	sp, #12
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054ce:	bf00      	nop
 80054d0:	370c      	adds	r7, #12
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bc80      	pop	{r7}
 80054d6:	4770      	bx	lr

080054d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054e0:	bf00      	nop
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bc80      	pop	{r7}
 80054e8:	4770      	bx	lr

080054ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054ea:	b480      	push	{r7}
 80054ec:	b083      	sub	sp, #12
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054f2:	bf00      	nop
 80054f4:	370c      	adds	r7, #12
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bc80      	pop	{r7}
 80054fa:	4770      	bx	lr

080054fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005504:	bf00      	nop
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	bc80      	pop	{r7}
 800550c:	4770      	bx	lr
	...

08005510 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a2f      	ldr	r2, [pc, #188]	@ (80055e0 <TIM_Base_SetConfig+0xd0>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d00b      	beq.n	8005540 <TIM_Base_SetConfig+0x30>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800552e:	d007      	beq.n	8005540 <TIM_Base_SetConfig+0x30>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a2c      	ldr	r2, [pc, #176]	@ (80055e4 <TIM_Base_SetConfig+0xd4>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d003      	beq.n	8005540 <TIM_Base_SetConfig+0x30>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a2b      	ldr	r2, [pc, #172]	@ (80055e8 <TIM_Base_SetConfig+0xd8>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d108      	bne.n	8005552 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005546:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	4313      	orrs	r3, r2
 8005550:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a22      	ldr	r2, [pc, #136]	@ (80055e0 <TIM_Base_SetConfig+0xd0>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d00b      	beq.n	8005572 <TIM_Base_SetConfig+0x62>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005560:	d007      	beq.n	8005572 <TIM_Base_SetConfig+0x62>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a1f      	ldr	r2, [pc, #124]	@ (80055e4 <TIM_Base_SetConfig+0xd4>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d003      	beq.n	8005572 <TIM_Base_SetConfig+0x62>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a1e      	ldr	r2, [pc, #120]	@ (80055e8 <TIM_Base_SetConfig+0xd8>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d108      	bne.n	8005584 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005578:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	4313      	orrs	r3, r2
 8005582:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	695b      	ldr	r3, [r3, #20]
 800558e:	4313      	orrs	r3, r2
 8005590:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	689a      	ldr	r2, [r3, #8]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4a0d      	ldr	r2, [pc, #52]	@ (80055e0 <TIM_Base_SetConfig+0xd0>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d103      	bne.n	80055b8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	691a      	ldr	r2, [r3, #16]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d005      	beq.n	80055d6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	f023 0201 	bic.w	r2, r3, #1
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	611a      	str	r2, [r3, #16]
  }
}
 80055d6:	bf00      	nop
 80055d8:	3714      	adds	r7, #20
 80055da:	46bd      	mov	sp, r7
 80055dc:	bc80      	pop	{r7}
 80055de:	4770      	bx	lr
 80055e0:	40012c00 	.word	0x40012c00
 80055e4:	40000400 	.word	0x40000400
 80055e8:	40000800 	.word	0x40000800

080055ec <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b087      	sub	sp, #28
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	607a      	str	r2, [r7, #4]
 80055f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6a1b      	ldr	r3, [r3, #32]
 80055fe:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6a1b      	ldr	r3, [r3, #32]
 8005604:	f023 0201 	bic.w	r2, r3, #1
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	699b      	ldr	r3, [r3, #24]
 8005610:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	4a1f      	ldr	r2, [pc, #124]	@ (8005694 <TIM_TI1_SetConfig+0xa8>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d00b      	beq.n	8005632 <TIM_TI1_SetConfig+0x46>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005620:	d007      	beq.n	8005632 <TIM_TI1_SetConfig+0x46>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	4a1c      	ldr	r2, [pc, #112]	@ (8005698 <TIM_TI1_SetConfig+0xac>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d003      	beq.n	8005632 <TIM_TI1_SetConfig+0x46>
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	4a1b      	ldr	r2, [pc, #108]	@ (800569c <TIM_TI1_SetConfig+0xb0>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d101      	bne.n	8005636 <TIM_TI1_SetConfig+0x4a>
 8005632:	2301      	movs	r3, #1
 8005634:	e000      	b.n	8005638 <TIM_TI1_SetConfig+0x4c>
 8005636:	2300      	movs	r3, #0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d008      	beq.n	800564e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	f023 0303 	bic.w	r3, r3, #3
 8005642:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005644:	697a      	ldr	r2, [r7, #20]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4313      	orrs	r3, r2
 800564a:	617b      	str	r3, [r7, #20]
 800564c:	e003      	b.n	8005656 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	f043 0301 	orr.w	r3, r3, #1
 8005654:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800565c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	011b      	lsls	r3, r3, #4
 8005662:	b2db      	uxtb	r3, r3
 8005664:	697a      	ldr	r2, [r7, #20]
 8005666:	4313      	orrs	r3, r2
 8005668:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	f023 030a 	bic.w	r3, r3, #10
 8005670:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	f003 030a 	and.w	r3, r3, #10
 8005678:	693a      	ldr	r2, [r7, #16]
 800567a:	4313      	orrs	r3, r2
 800567c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	697a      	ldr	r2, [r7, #20]
 8005682:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	693a      	ldr	r2, [r7, #16]
 8005688:	621a      	str	r2, [r3, #32]
}
 800568a:	bf00      	nop
 800568c:	371c      	adds	r7, #28
 800568e:	46bd      	mov	sp, r7
 8005690:	bc80      	pop	{r7}
 8005692:	4770      	bx	lr
 8005694:	40012c00 	.word	0x40012c00
 8005698:	40000400 	.word	0x40000400
 800569c:	40000800 	.word	0x40000800

080056a0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b087      	sub	sp, #28
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
 80056ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6a1b      	ldr	r3, [r3, #32]
 80056b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6a1b      	ldr	r3, [r3, #32]
 80056b8:	f023 0210 	bic.w	r2, r3, #16
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	021b      	lsls	r3, r3, #8
 80056d2:	693a      	ldr	r2, [r7, #16]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80056de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	031b      	lsls	r3, r3, #12
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	693a      	ldr	r2, [r7, #16]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80056f2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	011b      	lsls	r3, r3, #4
 80056f8:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80056fc:	697a      	ldr	r2, [r7, #20]
 80056fe:	4313      	orrs	r3, r2
 8005700:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	697a      	ldr	r2, [r7, #20]
 800570c:	621a      	str	r2, [r3, #32]
}
 800570e:	bf00      	nop
 8005710:	371c      	adds	r7, #28
 8005712:	46bd      	mov	sp, r7
 8005714:	bc80      	pop	{r7}
 8005716:	4770      	bx	lr

08005718 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005718:	b480      	push	{r7}
 800571a:	b087      	sub	sp, #28
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]
 8005724:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6a1b      	ldr	r3, [r3, #32]
 800572a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6a1b      	ldr	r3, [r3, #32]
 8005730:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	69db      	ldr	r3, [r3, #28]
 800573c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	f023 0303 	bic.w	r3, r3, #3
 8005744:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005746:	693a      	ldr	r2, [r7, #16]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4313      	orrs	r3, r2
 800574c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005754:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	011b      	lsls	r3, r3, #4
 800575a:	b2db      	uxtb	r3, r3
 800575c:	693a      	ldr	r2, [r7, #16]
 800575e:	4313      	orrs	r3, r2
 8005760:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005768:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	021b      	lsls	r3, r3, #8
 800576e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005772:	697a      	ldr	r2, [r7, #20]
 8005774:	4313      	orrs	r3, r2
 8005776:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	693a      	ldr	r2, [r7, #16]
 800577c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	697a      	ldr	r2, [r7, #20]
 8005782:	621a      	str	r2, [r3, #32]
}
 8005784:	bf00      	nop
 8005786:	371c      	adds	r7, #28
 8005788:	46bd      	mov	sp, r7
 800578a:	bc80      	pop	{r7}
 800578c:	4770      	bx	lr

0800578e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800578e:	b480      	push	{r7}
 8005790:	b087      	sub	sp, #28
 8005792:	af00      	add	r7, sp, #0
 8005794:	60f8      	str	r0, [r7, #12]
 8005796:	60b9      	str	r1, [r7, #8]
 8005798:	607a      	str	r2, [r7, #4]
 800579a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6a1b      	ldr	r3, [r3, #32]
 80057a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6a1b      	ldr	r3, [r3, #32]
 80057a6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	69db      	ldr	r3, [r3, #28]
 80057b2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057ba:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	021b      	lsls	r3, r3, #8
 80057c0:	693a      	ldr	r2, [r7, #16]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80057cc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	031b      	lsls	r3, r3, #12
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80057e0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	031b      	lsls	r3, r3, #12
 80057e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80057ea:	697a      	ldr	r2, [r7, #20]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	693a      	ldr	r2, [r7, #16]
 80057f4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	697a      	ldr	r2, [r7, #20]
 80057fa:	621a      	str	r2, [r3, #32]
}
 80057fc:	bf00      	nop
 80057fe:	371c      	adds	r7, #28
 8005800:	46bd      	mov	sp, r7
 8005802:	bc80      	pop	{r7}
 8005804:	4770      	bx	lr
	...

08005808 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005808:	b480      	push	{r7}
 800580a:	b085      	sub	sp, #20
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005818:	2b01      	cmp	r3, #1
 800581a:	d101      	bne.n	8005820 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800581c:	2302      	movs	r3, #2
 800581e:	e046      	b.n	80058ae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2202      	movs	r2, #2
 800582c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005846:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	4313      	orrs	r3, r2
 8005850:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a16      	ldr	r2, [pc, #88]	@ (80058b8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d00e      	beq.n	8005882 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800586c:	d009      	beq.n	8005882 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a12      	ldr	r2, [pc, #72]	@ (80058bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d004      	beq.n	8005882 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a10      	ldr	r2, [pc, #64]	@ (80058c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d10c      	bne.n	800589c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005888:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	68ba      	ldr	r2, [r7, #8]
 8005890:	4313      	orrs	r3, r2
 8005892:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68ba      	ldr	r2, [r7, #8]
 800589a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3714      	adds	r7, #20
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bc80      	pop	{r7}
 80058b6:	4770      	bx	lr
 80058b8:	40012c00 	.word	0x40012c00
 80058bc:	40000400 	.word	0x40000400
 80058c0:	40000800 	.word	0x40000800

080058c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058cc:	bf00      	nop
 80058ce:	370c      	adds	r7, #12
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bc80      	pop	{r7}
 80058d4:	4770      	bx	lr

080058d6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058d6:	b480      	push	{r7}
 80058d8:	b083      	sub	sp, #12
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058de:	bf00      	nop
 80058e0:	370c      	adds	r7, #12
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bc80      	pop	{r7}
 80058e6:	4770      	bx	lr

080058e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d101      	bne.n	80058fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e042      	b.n	8005980 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005900:	b2db      	uxtb	r3, r3
 8005902:	2b00      	cmp	r3, #0
 8005904:	d106      	bne.n	8005914 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f7fc f842 	bl	8001998 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2224      	movs	r2, #36	@ 0x24
 8005918:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68da      	ldr	r2, [r3, #12]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800592a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 fd63 	bl	80063f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	691a      	ldr	r2, [r3, #16]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005940:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	695a      	ldr	r2, [r3, #20]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005950:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68da      	ldr	r2, [r3, #12]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005960:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2220      	movs	r2, #32
 800596c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2220      	movs	r2, #32
 8005974:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800597e:	2300      	movs	r3, #0
}
 8005980:	4618      	mov	r0, r3
 8005982:	3708      	adds	r7, #8
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b08a      	sub	sp, #40	@ 0x28
 800598c:	af02      	add	r7, sp, #8
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	603b      	str	r3, [r7, #0]
 8005994:	4613      	mov	r3, r2
 8005996:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005998:	2300      	movs	r3, #0
 800599a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	2b20      	cmp	r3, #32
 80059a6:	d175      	bne.n	8005a94 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d002      	beq.n	80059b4 <HAL_UART_Transmit+0x2c>
 80059ae:	88fb      	ldrh	r3, [r7, #6]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d101      	bne.n	80059b8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e06e      	b.n	8005a96 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2200      	movs	r2, #0
 80059bc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2221      	movs	r2, #33	@ 0x21
 80059c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059c6:	f7fc f8b9 	bl	8001b3c <HAL_GetTick>
 80059ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	88fa      	ldrh	r2, [r7, #6]
 80059d0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	88fa      	ldrh	r2, [r7, #6]
 80059d6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059e0:	d108      	bne.n	80059f4 <HAL_UART_Transmit+0x6c>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d104      	bne.n	80059f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80059ea:	2300      	movs	r3, #0
 80059ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	61bb      	str	r3, [r7, #24]
 80059f2:	e003      	b.n	80059fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059f8:	2300      	movs	r3, #0
 80059fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80059fc:	e02e      	b.n	8005a5c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	9300      	str	r3, [sp, #0]
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	2200      	movs	r2, #0
 8005a06:	2180      	movs	r1, #128	@ 0x80
 8005a08:	68f8      	ldr	r0, [r7, #12]
 8005a0a:	f000 fb01 	bl	8006010 <UART_WaitOnFlagUntilTimeout>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d005      	beq.n	8005a20 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2220      	movs	r2, #32
 8005a18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	e03a      	b.n	8005a96 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d10b      	bne.n	8005a3e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	881b      	ldrh	r3, [r3, #0]
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	3302      	adds	r3, #2
 8005a3a:	61bb      	str	r3, [r7, #24]
 8005a3c:	e007      	b.n	8005a4e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	781a      	ldrb	r2, [r3, #0]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	3b01      	subs	r3, #1
 8005a56:	b29a      	uxth	r2, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d1cb      	bne.n	80059fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	9300      	str	r3, [sp, #0]
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	2140      	movs	r1, #64	@ 0x40
 8005a70:	68f8      	ldr	r0, [r7, #12]
 8005a72:	f000 facd 	bl	8006010 <UART_WaitOnFlagUntilTimeout>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d005      	beq.n	8005a88 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2220      	movs	r2, #32
 8005a80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e006      	b.n	8005a96 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2220      	movs	r2, #32
 8005a8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005a90:	2300      	movs	r3, #0
 8005a92:	e000      	b.n	8005a96 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005a94:	2302      	movs	r3, #2
  }
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3720      	adds	r7, #32
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
	...

08005aa0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b0ba      	sub	sp, #232	@ 0xe8
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	695b      	ldr	r3, [r3, #20]
 8005ac2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005acc:	2300      	movs	r3, #0
 8005ace:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ad6:	f003 030f 	and.w	r3, r3, #15
 8005ada:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005ade:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d10f      	bne.n	8005b06 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005aea:	f003 0320 	and.w	r3, r3, #32
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d009      	beq.n	8005b06 <HAL_UART_IRQHandler+0x66>
 8005af2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005af6:	f003 0320 	and.w	r3, r3, #32
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d003      	beq.n	8005b06 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 fbbc 	bl	800627c <UART_Receive_IT>
      return;
 8005b04:	e25b      	b.n	8005fbe <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005b06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	f000 80de 	beq.w	8005ccc <HAL_UART_IRQHandler+0x22c>
 8005b10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b14:	f003 0301 	and.w	r3, r3, #1
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d106      	bne.n	8005b2a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005b1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b20:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	f000 80d1 	beq.w	8005ccc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b2e:	f003 0301 	and.w	r3, r3, #1
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d00b      	beq.n	8005b4e <HAL_UART_IRQHandler+0xae>
 8005b36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d005      	beq.n	8005b4e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b46:	f043 0201 	orr.w	r2, r3, #1
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b52:	f003 0304 	and.w	r3, r3, #4
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d00b      	beq.n	8005b72 <HAL_UART_IRQHandler+0xd2>
 8005b5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b5e:	f003 0301 	and.w	r3, r3, #1
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d005      	beq.n	8005b72 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b6a:	f043 0202 	orr.w	r2, r3, #2
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b76:	f003 0302 	and.w	r3, r3, #2
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00b      	beq.n	8005b96 <HAL_UART_IRQHandler+0xf6>
 8005b7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b82:	f003 0301 	and.w	r3, r3, #1
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d005      	beq.n	8005b96 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b8e:	f043 0204 	orr.w	r2, r3, #4
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b9a:	f003 0308 	and.w	r3, r3, #8
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d011      	beq.n	8005bc6 <HAL_UART_IRQHandler+0x126>
 8005ba2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ba6:	f003 0320 	and.w	r3, r3, #32
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d105      	bne.n	8005bba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005bae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bb2:	f003 0301 	and.w	r3, r3, #1
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d005      	beq.n	8005bc6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bbe:	f043 0208 	orr.w	r2, r3, #8
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	f000 81f2 	beq.w	8005fb4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bd4:	f003 0320 	and.w	r3, r3, #32
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d008      	beq.n	8005bee <HAL_UART_IRQHandler+0x14e>
 8005bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005be0:	f003 0320 	and.w	r3, r3, #32
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d002      	beq.n	8005bee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 fb47 	bl	800627c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	695b      	ldr	r3, [r3, #20]
 8005bf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	bf14      	ite	ne
 8005bfc:	2301      	movne	r3, #1
 8005bfe:	2300      	moveq	r3, #0
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c0a:	f003 0308 	and.w	r3, r3, #8
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d103      	bne.n	8005c1a <HAL_UART_IRQHandler+0x17a>
 8005c12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d04f      	beq.n	8005cba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 fa51 	bl	80060c2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	695b      	ldr	r3, [r3, #20]
 8005c26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d041      	beq.n	8005cb2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	3314      	adds	r3, #20
 8005c34:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c38:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005c3c:	e853 3f00 	ldrex	r3, [r3]
 8005c40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005c44:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005c48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	3314      	adds	r3, #20
 8005c56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005c5a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005c5e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005c66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005c6a:	e841 2300 	strex	r3, r2, [r1]
 8005c6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005c72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d1d9      	bne.n	8005c2e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d013      	beq.n	8005caa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c86:	4a7e      	ldr	r2, [pc, #504]	@ (8005e80 <HAL_UART_IRQHandler+0x3e0>)
 8005c88:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f7fc f8ca 	bl	8001e28 <HAL_DMA_Abort_IT>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d016      	beq.n	8005cc8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005ca4:	4610      	mov	r0, r2
 8005ca6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ca8:	e00e      	b.n	8005cc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 f99c 	bl	8005fe8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cb0:	e00a      	b.n	8005cc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 f998 	bl	8005fe8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cb8:	e006      	b.n	8005cc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 f994 	bl	8005fe8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005cc6:	e175      	b.n	8005fb4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cc8:	bf00      	nop
    return;
 8005cca:	e173      	b.n	8005fb4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	f040 814f 	bne.w	8005f74 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cda:	f003 0310 	and.w	r3, r3, #16
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	f000 8148 	beq.w	8005f74 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005ce4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ce8:	f003 0310 	and.w	r3, r3, #16
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	f000 8141 	beq.w	8005f74 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	60bb      	str	r3, [r7, #8]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	60bb      	str	r3, [r7, #8]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	60bb      	str	r3, [r7, #8]
 8005d06:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	f000 80b6 	beq.w	8005e84 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005d24:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	f000 8145 	beq.w	8005fb8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005d32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005d36:	429a      	cmp	r2, r3
 8005d38:	f080 813e 	bcs.w	8005fb8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005d42:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d48:	699b      	ldr	r3, [r3, #24]
 8005d4a:	2b20      	cmp	r3, #32
 8005d4c:	f000 8088 	beq.w	8005e60 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	330c      	adds	r3, #12
 8005d56:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005d5e:	e853 3f00 	ldrex	r3, [r3]
 8005d62:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005d66:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005d6a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d6e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	330c      	adds	r3, #12
 8005d78:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005d7c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005d80:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d84:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005d88:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005d8c:	e841 2300 	strex	r3, r2, [r1]
 8005d90:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005d94:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d1d9      	bne.n	8005d50 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	3314      	adds	r3, #20
 8005da2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005da6:	e853 3f00 	ldrex	r3, [r3]
 8005daa:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005dac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005dae:	f023 0301 	bic.w	r3, r3, #1
 8005db2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	3314      	adds	r3, #20
 8005dbc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005dc0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005dc4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005dc8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005dcc:	e841 2300 	strex	r3, r2, [r1]
 8005dd0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005dd2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d1e1      	bne.n	8005d9c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	3314      	adds	r3, #20
 8005dde:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005de2:	e853 3f00 	ldrex	r3, [r3]
 8005de6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005de8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005dea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	3314      	adds	r3, #20
 8005df8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005dfc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005dfe:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e00:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005e02:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005e04:	e841 2300 	strex	r3, r2, [r1]
 8005e08:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005e0a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d1e3      	bne.n	8005dd8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2220      	movs	r2, #32
 8005e14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	330c      	adds	r3, #12
 8005e24:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e28:	e853 3f00 	ldrex	r3, [r3]
 8005e2c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005e2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e30:	f023 0310 	bic.w	r3, r3, #16
 8005e34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	330c      	adds	r3, #12
 8005e3e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005e42:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005e44:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e46:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005e48:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005e4a:	e841 2300 	strex	r3, r2, [r1]
 8005e4e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005e50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d1e3      	bne.n	8005e1e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f7fb ffa9 	bl	8001db2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2202      	movs	r2, #2
 8005e64:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	4619      	mov	r1, r3
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 f8bf 	bl	8005ffa <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e7c:	e09c      	b.n	8005fb8 <HAL_UART_IRQHandler+0x518>
 8005e7e:	bf00      	nop
 8005e80:	08006187 	.word	0x08006187
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	1ad3      	subs	r3, r2, r3
 8005e90:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	f000 808e 	beq.w	8005fbc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005ea0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	f000 8089 	beq.w	8005fbc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	330c      	adds	r3, #12
 8005eb0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eb4:	e853 3f00 	ldrex	r3, [r3]
 8005eb8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005eba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ebc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ec0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	330c      	adds	r3, #12
 8005eca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005ece:	647a      	str	r2, [r7, #68]	@ 0x44
 8005ed0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ed4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ed6:	e841 2300 	strex	r3, r2, [r1]
 8005eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005edc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d1e3      	bne.n	8005eaa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	3314      	adds	r3, #20
 8005ee8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eec:	e853 3f00 	ldrex	r3, [r3]
 8005ef0:	623b      	str	r3, [r7, #32]
   return(result);
 8005ef2:	6a3b      	ldr	r3, [r7, #32]
 8005ef4:	f023 0301 	bic.w	r3, r3, #1
 8005ef8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	3314      	adds	r3, #20
 8005f02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005f06:	633a      	str	r2, [r7, #48]	@ 0x30
 8005f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f0e:	e841 2300 	strex	r3, r2, [r1]
 8005f12:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d1e3      	bne.n	8005ee2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2220      	movs	r2, #32
 8005f1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	330c      	adds	r3, #12
 8005f2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	e853 3f00 	ldrex	r3, [r3]
 8005f36:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f023 0310 	bic.w	r3, r3, #16
 8005f3e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	330c      	adds	r3, #12
 8005f48:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005f4c:	61fa      	str	r2, [r7, #28]
 8005f4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f50:	69b9      	ldr	r1, [r7, #24]
 8005f52:	69fa      	ldr	r2, [r7, #28]
 8005f54:	e841 2300 	strex	r3, r2, [r1]
 8005f58:	617b      	str	r3, [r7, #20]
   return(result);
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d1e3      	bne.n	8005f28 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2202      	movs	r2, #2
 8005f64:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f66:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 f844 	bl	8005ffa <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f72:	e023      	b.n	8005fbc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005f74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d009      	beq.n	8005f94 <HAL_UART_IRQHandler+0x4f4>
 8005f80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d003      	beq.n	8005f94 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 f90e 	bl	80061ae <UART_Transmit_IT>
    return;
 8005f92:	e014      	b.n	8005fbe <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d00e      	beq.n	8005fbe <HAL_UART_IRQHandler+0x51e>
 8005fa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d008      	beq.n	8005fbe <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 f94d 	bl	800624c <UART_EndTransmit_IT>
    return;
 8005fb2:	e004      	b.n	8005fbe <HAL_UART_IRQHandler+0x51e>
    return;
 8005fb4:	bf00      	nop
 8005fb6:	e002      	b.n	8005fbe <HAL_UART_IRQHandler+0x51e>
      return;
 8005fb8:	bf00      	nop
 8005fba:	e000      	b.n	8005fbe <HAL_UART_IRQHandler+0x51e>
      return;
 8005fbc:	bf00      	nop
  }
}
 8005fbe:	37e8      	adds	r7, #232	@ 0xe8
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005fcc:	bf00      	nop
 8005fce:	370c      	adds	r7, #12
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bc80      	pop	{r7}
 8005fd4:	4770      	bx	lr

08005fd6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005fd6:	b480      	push	{r7}
 8005fd8:	b083      	sub	sp, #12
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005fde:	bf00      	nop
 8005fe0:	370c      	adds	r7, #12
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bc80      	pop	{r7}
 8005fe6:	4770      	bx	lr

08005fe8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005ff0:	bf00      	nop
 8005ff2:	370c      	adds	r7, #12
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bc80      	pop	{r7}
 8005ff8:	4770      	bx	lr

08005ffa <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ffa:	b480      	push	{r7}
 8005ffc:	b083      	sub	sp, #12
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
 8006002:	460b      	mov	r3, r1
 8006004:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006006:	bf00      	nop
 8006008:	370c      	adds	r7, #12
 800600a:	46bd      	mov	sp, r7
 800600c:	bc80      	pop	{r7}
 800600e:	4770      	bx	lr

08006010 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b086      	sub	sp, #24
 8006014:	af00      	add	r7, sp, #0
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	60b9      	str	r1, [r7, #8]
 800601a:	603b      	str	r3, [r7, #0]
 800601c:	4613      	mov	r3, r2
 800601e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006020:	e03b      	b.n	800609a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006022:	6a3b      	ldr	r3, [r7, #32]
 8006024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006028:	d037      	beq.n	800609a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800602a:	f7fb fd87 	bl	8001b3c <HAL_GetTick>
 800602e:	4602      	mov	r2, r0
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	1ad3      	subs	r3, r2, r3
 8006034:	6a3a      	ldr	r2, [r7, #32]
 8006036:	429a      	cmp	r2, r3
 8006038:	d302      	bcc.n	8006040 <UART_WaitOnFlagUntilTimeout+0x30>
 800603a:	6a3b      	ldr	r3, [r7, #32]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d101      	bne.n	8006044 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006040:	2303      	movs	r3, #3
 8006042:	e03a      	b.n	80060ba <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	f003 0304 	and.w	r3, r3, #4
 800604e:	2b00      	cmp	r3, #0
 8006050:	d023      	beq.n	800609a <UART_WaitOnFlagUntilTimeout+0x8a>
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	2b80      	cmp	r3, #128	@ 0x80
 8006056:	d020      	beq.n	800609a <UART_WaitOnFlagUntilTimeout+0x8a>
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	2b40      	cmp	r3, #64	@ 0x40
 800605c:	d01d      	beq.n	800609a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f003 0308 	and.w	r3, r3, #8
 8006068:	2b08      	cmp	r3, #8
 800606a:	d116      	bne.n	800609a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800606c:	2300      	movs	r3, #0
 800606e:	617b      	str	r3, [r7, #20]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	617b      	str	r3, [r7, #20]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	617b      	str	r3, [r7, #20]
 8006080:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006082:	68f8      	ldr	r0, [r7, #12]
 8006084:	f000 f81d 	bl	80060c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2208      	movs	r2, #8
 800608c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e00f      	b.n	80060ba <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	4013      	ands	r3, r2
 80060a4:	68ba      	ldr	r2, [r7, #8]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	bf0c      	ite	eq
 80060aa:	2301      	moveq	r3, #1
 80060ac:	2300      	movne	r3, #0
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	461a      	mov	r2, r3
 80060b2:	79fb      	ldrb	r3, [r7, #7]
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d0b4      	beq.n	8006022 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3718      	adds	r7, #24
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}

080060c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060c2:	b480      	push	{r7}
 80060c4:	b095      	sub	sp, #84	@ 0x54
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	330c      	adds	r3, #12
 80060d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060d4:	e853 3f00 	ldrex	r3, [r3]
 80060d8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80060da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80060e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	330c      	adds	r3, #12
 80060e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80060ea:	643a      	str	r2, [r7, #64]	@ 0x40
 80060ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80060f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80060f2:	e841 2300 	strex	r3, r2, [r1]
 80060f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80060f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d1e5      	bne.n	80060ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	3314      	adds	r3, #20
 8006104:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006106:	6a3b      	ldr	r3, [r7, #32]
 8006108:	e853 3f00 	ldrex	r3, [r3]
 800610c:	61fb      	str	r3, [r7, #28]
   return(result);
 800610e:	69fb      	ldr	r3, [r7, #28]
 8006110:	f023 0301 	bic.w	r3, r3, #1
 8006114:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	3314      	adds	r3, #20
 800611c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800611e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006120:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006122:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006124:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006126:	e841 2300 	strex	r3, r2, [r1]
 800612a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800612c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800612e:	2b00      	cmp	r3, #0
 8006130:	d1e5      	bne.n	80060fe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006136:	2b01      	cmp	r3, #1
 8006138:	d119      	bne.n	800616e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	330c      	adds	r3, #12
 8006140:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	e853 3f00 	ldrex	r3, [r3]
 8006148:	60bb      	str	r3, [r7, #8]
   return(result);
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	f023 0310 	bic.w	r3, r3, #16
 8006150:	647b      	str	r3, [r7, #68]	@ 0x44
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	330c      	adds	r3, #12
 8006158:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800615a:	61ba      	str	r2, [r7, #24]
 800615c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800615e:	6979      	ldr	r1, [r7, #20]
 8006160:	69ba      	ldr	r2, [r7, #24]
 8006162:	e841 2300 	strex	r3, r2, [r1]
 8006166:	613b      	str	r3, [r7, #16]
   return(result);
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d1e5      	bne.n	800613a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2220      	movs	r2, #32
 8006172:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800617c:	bf00      	nop
 800617e:	3754      	adds	r7, #84	@ 0x54
 8006180:	46bd      	mov	sp, r7
 8006182:	bc80      	pop	{r7}
 8006184:	4770      	bx	lr

08006186 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006186:	b580      	push	{r7, lr}
 8006188:	b084      	sub	sp, #16
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006192:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2200      	movs	r2, #0
 8006198:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2200      	movs	r2, #0
 800619e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80061a0:	68f8      	ldr	r0, [r7, #12]
 80061a2:	f7ff ff21 	bl	8005fe8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061a6:	bf00      	nop
 80061a8:	3710      	adds	r7, #16
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}

080061ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80061ae:	b480      	push	{r7}
 80061b0:	b085      	sub	sp, #20
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	2b21      	cmp	r3, #33	@ 0x21
 80061c0:	d13e      	bne.n	8006240 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061ca:	d114      	bne.n	80061f6 <UART_Transmit_IT+0x48>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	691b      	ldr	r3, [r3, #16]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d110      	bne.n	80061f6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6a1b      	ldr	r3, [r3, #32]
 80061d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	881b      	ldrh	r3, [r3, #0]
 80061de:	461a      	mov	r2, r3
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061e8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6a1b      	ldr	r3, [r3, #32]
 80061ee:	1c9a      	adds	r2, r3, #2
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	621a      	str	r2, [r3, #32]
 80061f4:	e008      	b.n	8006208 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6a1b      	ldr	r3, [r3, #32]
 80061fa:	1c59      	adds	r1, r3, #1
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	6211      	str	r1, [r2, #32]
 8006200:	781a      	ldrb	r2, [r3, #0]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800620c:	b29b      	uxth	r3, r3
 800620e:	3b01      	subs	r3, #1
 8006210:	b29b      	uxth	r3, r3
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	4619      	mov	r1, r3
 8006216:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006218:	2b00      	cmp	r3, #0
 800621a:	d10f      	bne.n	800623c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	68da      	ldr	r2, [r3, #12]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800622a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	68da      	ldr	r2, [r3, #12]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800623a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800623c:	2300      	movs	r3, #0
 800623e:	e000      	b.n	8006242 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006240:	2302      	movs	r3, #2
  }
}
 8006242:	4618      	mov	r0, r3
 8006244:	3714      	adds	r7, #20
 8006246:	46bd      	mov	sp, r7
 8006248:	bc80      	pop	{r7}
 800624a:	4770      	bx	lr

0800624c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b082      	sub	sp, #8
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	68da      	ldr	r2, [r3, #12]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006262:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2220      	movs	r2, #32
 8006268:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f7ff fea9 	bl	8005fc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006272:	2300      	movs	r3, #0
}
 8006274:	4618      	mov	r0, r3
 8006276:	3708      	adds	r7, #8
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}

0800627c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b08c      	sub	sp, #48	@ 0x30
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800628a:	b2db      	uxtb	r3, r3
 800628c:	2b22      	cmp	r3, #34	@ 0x22
 800628e:	f040 80ae 	bne.w	80063ee <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800629a:	d117      	bne.n	80062cc <UART_Receive_IT+0x50>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	691b      	ldr	r3, [r3, #16]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d113      	bne.n	80062cc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80062a4:	2300      	movs	r3, #0
 80062a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062ac:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062ba:	b29a      	uxth	r2, r3
 80062bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062be:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062c4:	1c9a      	adds	r2, r3, #2
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	629a      	str	r2, [r3, #40]	@ 0x28
 80062ca:	e026      	b.n	800631a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80062d2:	2300      	movs	r3, #0
 80062d4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062de:	d007      	beq.n	80062f0 <UART_Receive_IT+0x74>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d10a      	bne.n	80062fe <UART_Receive_IT+0x82>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d106      	bne.n	80062fe <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	b2da      	uxtb	r2, r3
 80062f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062fa:	701a      	strb	r2, [r3, #0]
 80062fc:	e008      	b.n	8006310 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	b2db      	uxtb	r3, r3
 8006306:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800630a:	b2da      	uxtb	r2, r3
 800630c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800630e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006314:	1c5a      	adds	r2, r3, #1
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800631e:	b29b      	uxth	r3, r3
 8006320:	3b01      	subs	r3, #1
 8006322:	b29b      	uxth	r3, r3
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	4619      	mov	r1, r3
 8006328:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800632a:	2b00      	cmp	r3, #0
 800632c:	d15d      	bne.n	80063ea <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68da      	ldr	r2, [r3, #12]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f022 0220 	bic.w	r2, r2, #32
 800633c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	68da      	ldr	r2, [r3, #12]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800634c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	695a      	ldr	r2, [r3, #20]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f022 0201 	bic.w	r2, r2, #1
 800635c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2220      	movs	r2, #32
 8006362:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006370:	2b01      	cmp	r3, #1
 8006372:	d135      	bne.n	80063e0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	330c      	adds	r3, #12
 8006380:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	e853 3f00 	ldrex	r3, [r3]
 8006388:	613b      	str	r3, [r7, #16]
   return(result);
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	f023 0310 	bic.w	r3, r3, #16
 8006390:	627b      	str	r3, [r7, #36]	@ 0x24
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	330c      	adds	r3, #12
 8006398:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800639a:	623a      	str	r2, [r7, #32]
 800639c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800639e:	69f9      	ldr	r1, [r7, #28]
 80063a0:	6a3a      	ldr	r2, [r7, #32]
 80063a2:	e841 2300 	strex	r3, r2, [r1]
 80063a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d1e5      	bne.n	800637a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 0310 	and.w	r3, r3, #16
 80063b8:	2b10      	cmp	r3, #16
 80063ba:	d10a      	bne.n	80063d2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80063bc:	2300      	movs	r3, #0
 80063be:	60fb      	str	r3, [r7, #12]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	60fb      	str	r3, [r7, #12]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	60fb      	str	r3, [r7, #12]
 80063d0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80063d6:	4619      	mov	r1, r3
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f7ff fe0e 	bl	8005ffa <HAL_UARTEx_RxEventCallback>
 80063de:	e002      	b.n	80063e6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f7ff fdf8 	bl	8005fd6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80063e6:	2300      	movs	r3, #0
 80063e8:	e002      	b.n	80063f0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80063ea:	2300      	movs	r3, #0
 80063ec:	e000      	b.n	80063f0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80063ee:	2302      	movs	r3, #2
  }
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3730      	adds	r7, #48	@ 0x30
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	68da      	ldr	r2, [r3, #12]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	430a      	orrs	r2, r1
 8006414:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	689a      	ldr	r2, [r3, #8]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	431a      	orrs	r2, r3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	695b      	ldr	r3, [r3, #20]
 8006424:	4313      	orrs	r3, r2
 8006426:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8006432:	f023 030c 	bic.w	r3, r3, #12
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	6812      	ldr	r2, [r2, #0]
 800643a:	68b9      	ldr	r1, [r7, #8]
 800643c:	430b      	orrs	r3, r1
 800643e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	695b      	ldr	r3, [r3, #20]
 8006446:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	699a      	ldr	r2, [r3, #24]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	430a      	orrs	r2, r1
 8006454:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a2c      	ldr	r2, [pc, #176]	@ (800650c <UART_SetConfig+0x114>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d103      	bne.n	8006468 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006460:	f7fe fdd2 	bl	8005008 <HAL_RCC_GetPCLK2Freq>
 8006464:	60f8      	str	r0, [r7, #12]
 8006466:	e002      	b.n	800646e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006468:	f7fe fdba 	bl	8004fe0 <HAL_RCC_GetPCLK1Freq>
 800646c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800646e:	68fa      	ldr	r2, [r7, #12]
 8006470:	4613      	mov	r3, r2
 8006472:	009b      	lsls	r3, r3, #2
 8006474:	4413      	add	r3, r2
 8006476:	009a      	lsls	r2, r3, #2
 8006478:	441a      	add	r2, r3
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	fbb2 f3f3 	udiv	r3, r2, r3
 8006484:	4a22      	ldr	r2, [pc, #136]	@ (8006510 <UART_SetConfig+0x118>)
 8006486:	fba2 2303 	umull	r2, r3, r2, r3
 800648a:	095b      	lsrs	r3, r3, #5
 800648c:	0119      	lsls	r1, r3, #4
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	4613      	mov	r3, r2
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	4413      	add	r3, r2
 8006496:	009a      	lsls	r2, r3, #2
 8006498:	441a      	add	r2, r3
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80064a4:	4b1a      	ldr	r3, [pc, #104]	@ (8006510 <UART_SetConfig+0x118>)
 80064a6:	fba3 0302 	umull	r0, r3, r3, r2
 80064aa:	095b      	lsrs	r3, r3, #5
 80064ac:	2064      	movs	r0, #100	@ 0x64
 80064ae:	fb00 f303 	mul.w	r3, r0, r3
 80064b2:	1ad3      	subs	r3, r2, r3
 80064b4:	011b      	lsls	r3, r3, #4
 80064b6:	3332      	adds	r3, #50	@ 0x32
 80064b8:	4a15      	ldr	r2, [pc, #84]	@ (8006510 <UART_SetConfig+0x118>)
 80064ba:	fba2 2303 	umull	r2, r3, r2, r3
 80064be:	095b      	lsrs	r3, r3, #5
 80064c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80064c4:	4419      	add	r1, r3
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	4613      	mov	r3, r2
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	4413      	add	r3, r2
 80064ce:	009a      	lsls	r2, r3, #2
 80064d0:	441a      	add	r2, r3
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80064dc:	4b0c      	ldr	r3, [pc, #48]	@ (8006510 <UART_SetConfig+0x118>)
 80064de:	fba3 0302 	umull	r0, r3, r3, r2
 80064e2:	095b      	lsrs	r3, r3, #5
 80064e4:	2064      	movs	r0, #100	@ 0x64
 80064e6:	fb00 f303 	mul.w	r3, r0, r3
 80064ea:	1ad3      	subs	r3, r2, r3
 80064ec:	011b      	lsls	r3, r3, #4
 80064ee:	3332      	adds	r3, #50	@ 0x32
 80064f0:	4a07      	ldr	r2, [pc, #28]	@ (8006510 <UART_SetConfig+0x118>)
 80064f2:	fba2 2303 	umull	r2, r3, r2, r3
 80064f6:	095b      	lsrs	r3, r3, #5
 80064f8:	f003 020f 	and.w	r2, r3, #15
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	440a      	add	r2, r1
 8006502:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006504:	bf00      	nop
 8006506:	3710      	adds	r7, #16
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}
 800650c:	40013800 	.word	0x40013800
 8006510:	51eb851f 	.word	0x51eb851f

08006514 <__cvt>:
 8006514:	2b00      	cmp	r3, #0
 8006516:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800651a:	461d      	mov	r5, r3
 800651c:	bfbb      	ittet	lt
 800651e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8006522:	461d      	movlt	r5, r3
 8006524:	2300      	movge	r3, #0
 8006526:	232d      	movlt	r3, #45	@ 0x2d
 8006528:	b088      	sub	sp, #32
 800652a:	4614      	mov	r4, r2
 800652c:	bfb8      	it	lt
 800652e:	4614      	movlt	r4, r2
 8006530:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006532:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006534:	7013      	strb	r3, [r2, #0]
 8006536:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006538:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800653c:	f023 0820 	bic.w	r8, r3, #32
 8006540:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006544:	d005      	beq.n	8006552 <__cvt+0x3e>
 8006546:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800654a:	d100      	bne.n	800654e <__cvt+0x3a>
 800654c:	3601      	adds	r6, #1
 800654e:	2302      	movs	r3, #2
 8006550:	e000      	b.n	8006554 <__cvt+0x40>
 8006552:	2303      	movs	r3, #3
 8006554:	aa07      	add	r2, sp, #28
 8006556:	9204      	str	r2, [sp, #16]
 8006558:	aa06      	add	r2, sp, #24
 800655a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800655e:	e9cd 3600 	strd	r3, r6, [sp]
 8006562:	4622      	mov	r2, r4
 8006564:	462b      	mov	r3, r5
 8006566:	f000 fe6f 	bl	8007248 <_dtoa_r>
 800656a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800656e:	4607      	mov	r7, r0
 8006570:	d119      	bne.n	80065a6 <__cvt+0x92>
 8006572:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006574:	07db      	lsls	r3, r3, #31
 8006576:	d50e      	bpl.n	8006596 <__cvt+0x82>
 8006578:	eb00 0906 	add.w	r9, r0, r6
 800657c:	2200      	movs	r2, #0
 800657e:	2300      	movs	r3, #0
 8006580:	4620      	mov	r0, r4
 8006582:	4629      	mov	r1, r5
 8006584:	f7fa fac4 	bl	8000b10 <__aeabi_dcmpeq>
 8006588:	b108      	cbz	r0, 800658e <__cvt+0x7a>
 800658a:	f8cd 901c 	str.w	r9, [sp, #28]
 800658e:	2230      	movs	r2, #48	@ 0x30
 8006590:	9b07      	ldr	r3, [sp, #28]
 8006592:	454b      	cmp	r3, r9
 8006594:	d31e      	bcc.n	80065d4 <__cvt+0xc0>
 8006596:	4638      	mov	r0, r7
 8006598:	9b07      	ldr	r3, [sp, #28]
 800659a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800659c:	1bdb      	subs	r3, r3, r7
 800659e:	6013      	str	r3, [r2, #0]
 80065a0:	b008      	add	sp, #32
 80065a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065a6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80065aa:	eb00 0906 	add.w	r9, r0, r6
 80065ae:	d1e5      	bne.n	800657c <__cvt+0x68>
 80065b0:	7803      	ldrb	r3, [r0, #0]
 80065b2:	2b30      	cmp	r3, #48	@ 0x30
 80065b4:	d10a      	bne.n	80065cc <__cvt+0xb8>
 80065b6:	2200      	movs	r2, #0
 80065b8:	2300      	movs	r3, #0
 80065ba:	4620      	mov	r0, r4
 80065bc:	4629      	mov	r1, r5
 80065be:	f7fa faa7 	bl	8000b10 <__aeabi_dcmpeq>
 80065c2:	b918      	cbnz	r0, 80065cc <__cvt+0xb8>
 80065c4:	f1c6 0601 	rsb	r6, r6, #1
 80065c8:	f8ca 6000 	str.w	r6, [sl]
 80065cc:	f8da 3000 	ldr.w	r3, [sl]
 80065d0:	4499      	add	r9, r3
 80065d2:	e7d3      	b.n	800657c <__cvt+0x68>
 80065d4:	1c59      	adds	r1, r3, #1
 80065d6:	9107      	str	r1, [sp, #28]
 80065d8:	701a      	strb	r2, [r3, #0]
 80065da:	e7d9      	b.n	8006590 <__cvt+0x7c>

080065dc <__exponent>:
 80065dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065de:	2900      	cmp	r1, #0
 80065e0:	bfb6      	itet	lt
 80065e2:	232d      	movlt	r3, #45	@ 0x2d
 80065e4:	232b      	movge	r3, #43	@ 0x2b
 80065e6:	4249      	neglt	r1, r1
 80065e8:	2909      	cmp	r1, #9
 80065ea:	7002      	strb	r2, [r0, #0]
 80065ec:	7043      	strb	r3, [r0, #1]
 80065ee:	dd29      	ble.n	8006644 <__exponent+0x68>
 80065f0:	f10d 0307 	add.w	r3, sp, #7
 80065f4:	461d      	mov	r5, r3
 80065f6:	270a      	movs	r7, #10
 80065f8:	fbb1 f6f7 	udiv	r6, r1, r7
 80065fc:	461a      	mov	r2, r3
 80065fe:	fb07 1416 	mls	r4, r7, r6, r1
 8006602:	3430      	adds	r4, #48	@ 0x30
 8006604:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006608:	460c      	mov	r4, r1
 800660a:	2c63      	cmp	r4, #99	@ 0x63
 800660c:	4631      	mov	r1, r6
 800660e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006612:	dcf1      	bgt.n	80065f8 <__exponent+0x1c>
 8006614:	3130      	adds	r1, #48	@ 0x30
 8006616:	1e94      	subs	r4, r2, #2
 8006618:	f803 1c01 	strb.w	r1, [r3, #-1]
 800661c:	4623      	mov	r3, r4
 800661e:	1c41      	adds	r1, r0, #1
 8006620:	42ab      	cmp	r3, r5
 8006622:	d30a      	bcc.n	800663a <__exponent+0x5e>
 8006624:	f10d 0309 	add.w	r3, sp, #9
 8006628:	1a9b      	subs	r3, r3, r2
 800662a:	42ac      	cmp	r4, r5
 800662c:	bf88      	it	hi
 800662e:	2300      	movhi	r3, #0
 8006630:	3302      	adds	r3, #2
 8006632:	4403      	add	r3, r0
 8006634:	1a18      	subs	r0, r3, r0
 8006636:	b003      	add	sp, #12
 8006638:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800663a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800663e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006642:	e7ed      	b.n	8006620 <__exponent+0x44>
 8006644:	2330      	movs	r3, #48	@ 0x30
 8006646:	3130      	adds	r1, #48	@ 0x30
 8006648:	7083      	strb	r3, [r0, #2]
 800664a:	70c1      	strb	r1, [r0, #3]
 800664c:	1d03      	adds	r3, r0, #4
 800664e:	e7f1      	b.n	8006634 <__exponent+0x58>

08006650 <_printf_float>:
 8006650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006654:	b091      	sub	sp, #68	@ 0x44
 8006656:	460c      	mov	r4, r1
 8006658:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800665c:	4616      	mov	r6, r2
 800665e:	461f      	mov	r7, r3
 8006660:	4605      	mov	r5, r0
 8006662:	f000 fce1 	bl	8007028 <_localeconv_r>
 8006666:	6803      	ldr	r3, [r0, #0]
 8006668:	4618      	mov	r0, r3
 800666a:	9308      	str	r3, [sp, #32]
 800666c:	f7f9 fd70 	bl	8000150 <strlen>
 8006670:	2300      	movs	r3, #0
 8006672:	930e      	str	r3, [sp, #56]	@ 0x38
 8006674:	f8d8 3000 	ldr.w	r3, [r8]
 8006678:	9009      	str	r0, [sp, #36]	@ 0x24
 800667a:	3307      	adds	r3, #7
 800667c:	f023 0307 	bic.w	r3, r3, #7
 8006680:	f103 0208 	add.w	r2, r3, #8
 8006684:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006688:	f8d4 b000 	ldr.w	fp, [r4]
 800668c:	f8c8 2000 	str.w	r2, [r8]
 8006690:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006694:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006698:	930b      	str	r3, [sp, #44]	@ 0x2c
 800669a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800669e:	f04f 32ff 	mov.w	r2, #4294967295
 80066a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80066a6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80066aa:	4b9c      	ldr	r3, [pc, #624]	@ (800691c <_printf_float+0x2cc>)
 80066ac:	f7fa fa62 	bl	8000b74 <__aeabi_dcmpun>
 80066b0:	bb70      	cbnz	r0, 8006710 <_printf_float+0xc0>
 80066b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80066b6:	f04f 32ff 	mov.w	r2, #4294967295
 80066ba:	4b98      	ldr	r3, [pc, #608]	@ (800691c <_printf_float+0x2cc>)
 80066bc:	f7fa fa3c 	bl	8000b38 <__aeabi_dcmple>
 80066c0:	bb30      	cbnz	r0, 8006710 <_printf_float+0xc0>
 80066c2:	2200      	movs	r2, #0
 80066c4:	2300      	movs	r3, #0
 80066c6:	4640      	mov	r0, r8
 80066c8:	4649      	mov	r1, r9
 80066ca:	f7fa fa2b 	bl	8000b24 <__aeabi_dcmplt>
 80066ce:	b110      	cbz	r0, 80066d6 <_printf_float+0x86>
 80066d0:	232d      	movs	r3, #45	@ 0x2d
 80066d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066d6:	4a92      	ldr	r2, [pc, #584]	@ (8006920 <_printf_float+0x2d0>)
 80066d8:	4b92      	ldr	r3, [pc, #584]	@ (8006924 <_printf_float+0x2d4>)
 80066da:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80066de:	bf8c      	ite	hi
 80066e0:	4690      	movhi	r8, r2
 80066e2:	4698      	movls	r8, r3
 80066e4:	2303      	movs	r3, #3
 80066e6:	f04f 0900 	mov.w	r9, #0
 80066ea:	6123      	str	r3, [r4, #16]
 80066ec:	f02b 0304 	bic.w	r3, fp, #4
 80066f0:	6023      	str	r3, [r4, #0]
 80066f2:	4633      	mov	r3, r6
 80066f4:	4621      	mov	r1, r4
 80066f6:	4628      	mov	r0, r5
 80066f8:	9700      	str	r7, [sp, #0]
 80066fa:	aa0f      	add	r2, sp, #60	@ 0x3c
 80066fc:	f000 f9d4 	bl	8006aa8 <_printf_common>
 8006700:	3001      	adds	r0, #1
 8006702:	f040 8090 	bne.w	8006826 <_printf_float+0x1d6>
 8006706:	f04f 30ff 	mov.w	r0, #4294967295
 800670a:	b011      	add	sp, #68	@ 0x44
 800670c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006710:	4642      	mov	r2, r8
 8006712:	464b      	mov	r3, r9
 8006714:	4640      	mov	r0, r8
 8006716:	4649      	mov	r1, r9
 8006718:	f7fa fa2c 	bl	8000b74 <__aeabi_dcmpun>
 800671c:	b148      	cbz	r0, 8006732 <_printf_float+0xe2>
 800671e:	464b      	mov	r3, r9
 8006720:	2b00      	cmp	r3, #0
 8006722:	bfb8      	it	lt
 8006724:	232d      	movlt	r3, #45	@ 0x2d
 8006726:	4a80      	ldr	r2, [pc, #512]	@ (8006928 <_printf_float+0x2d8>)
 8006728:	bfb8      	it	lt
 800672a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800672e:	4b7f      	ldr	r3, [pc, #508]	@ (800692c <_printf_float+0x2dc>)
 8006730:	e7d3      	b.n	80066da <_printf_float+0x8a>
 8006732:	6863      	ldr	r3, [r4, #4]
 8006734:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006738:	1c5a      	adds	r2, r3, #1
 800673a:	d13f      	bne.n	80067bc <_printf_float+0x16c>
 800673c:	2306      	movs	r3, #6
 800673e:	6063      	str	r3, [r4, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8006746:	6023      	str	r3, [r4, #0]
 8006748:	9206      	str	r2, [sp, #24]
 800674a:	aa0e      	add	r2, sp, #56	@ 0x38
 800674c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006750:	aa0d      	add	r2, sp, #52	@ 0x34
 8006752:	9203      	str	r2, [sp, #12]
 8006754:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8006758:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800675c:	6863      	ldr	r3, [r4, #4]
 800675e:	4642      	mov	r2, r8
 8006760:	9300      	str	r3, [sp, #0]
 8006762:	4628      	mov	r0, r5
 8006764:	464b      	mov	r3, r9
 8006766:	910a      	str	r1, [sp, #40]	@ 0x28
 8006768:	f7ff fed4 	bl	8006514 <__cvt>
 800676c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800676e:	4680      	mov	r8, r0
 8006770:	2947      	cmp	r1, #71	@ 0x47
 8006772:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006774:	d128      	bne.n	80067c8 <_printf_float+0x178>
 8006776:	1cc8      	adds	r0, r1, #3
 8006778:	db02      	blt.n	8006780 <_printf_float+0x130>
 800677a:	6863      	ldr	r3, [r4, #4]
 800677c:	4299      	cmp	r1, r3
 800677e:	dd40      	ble.n	8006802 <_printf_float+0x1b2>
 8006780:	f1aa 0a02 	sub.w	sl, sl, #2
 8006784:	fa5f fa8a 	uxtb.w	sl, sl
 8006788:	4652      	mov	r2, sl
 800678a:	3901      	subs	r1, #1
 800678c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006790:	910d      	str	r1, [sp, #52]	@ 0x34
 8006792:	f7ff ff23 	bl	80065dc <__exponent>
 8006796:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006798:	4681      	mov	r9, r0
 800679a:	1813      	adds	r3, r2, r0
 800679c:	2a01      	cmp	r2, #1
 800679e:	6123      	str	r3, [r4, #16]
 80067a0:	dc02      	bgt.n	80067a8 <_printf_float+0x158>
 80067a2:	6822      	ldr	r2, [r4, #0]
 80067a4:	07d2      	lsls	r2, r2, #31
 80067a6:	d501      	bpl.n	80067ac <_printf_float+0x15c>
 80067a8:	3301      	adds	r3, #1
 80067aa:	6123      	str	r3, [r4, #16]
 80067ac:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d09e      	beq.n	80066f2 <_printf_float+0xa2>
 80067b4:	232d      	movs	r3, #45	@ 0x2d
 80067b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067ba:	e79a      	b.n	80066f2 <_printf_float+0xa2>
 80067bc:	2947      	cmp	r1, #71	@ 0x47
 80067be:	d1bf      	bne.n	8006740 <_printf_float+0xf0>
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d1bd      	bne.n	8006740 <_printf_float+0xf0>
 80067c4:	2301      	movs	r3, #1
 80067c6:	e7ba      	b.n	800673e <_printf_float+0xee>
 80067c8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80067cc:	d9dc      	bls.n	8006788 <_printf_float+0x138>
 80067ce:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80067d2:	d118      	bne.n	8006806 <_printf_float+0x1b6>
 80067d4:	2900      	cmp	r1, #0
 80067d6:	6863      	ldr	r3, [r4, #4]
 80067d8:	dd0b      	ble.n	80067f2 <_printf_float+0x1a2>
 80067da:	6121      	str	r1, [r4, #16]
 80067dc:	b913      	cbnz	r3, 80067e4 <_printf_float+0x194>
 80067de:	6822      	ldr	r2, [r4, #0]
 80067e0:	07d0      	lsls	r0, r2, #31
 80067e2:	d502      	bpl.n	80067ea <_printf_float+0x19a>
 80067e4:	3301      	adds	r3, #1
 80067e6:	440b      	add	r3, r1
 80067e8:	6123      	str	r3, [r4, #16]
 80067ea:	f04f 0900 	mov.w	r9, #0
 80067ee:	65a1      	str	r1, [r4, #88]	@ 0x58
 80067f0:	e7dc      	b.n	80067ac <_printf_float+0x15c>
 80067f2:	b913      	cbnz	r3, 80067fa <_printf_float+0x1aa>
 80067f4:	6822      	ldr	r2, [r4, #0]
 80067f6:	07d2      	lsls	r2, r2, #31
 80067f8:	d501      	bpl.n	80067fe <_printf_float+0x1ae>
 80067fa:	3302      	adds	r3, #2
 80067fc:	e7f4      	b.n	80067e8 <_printf_float+0x198>
 80067fe:	2301      	movs	r3, #1
 8006800:	e7f2      	b.n	80067e8 <_printf_float+0x198>
 8006802:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006806:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006808:	4299      	cmp	r1, r3
 800680a:	db05      	blt.n	8006818 <_printf_float+0x1c8>
 800680c:	6823      	ldr	r3, [r4, #0]
 800680e:	6121      	str	r1, [r4, #16]
 8006810:	07d8      	lsls	r0, r3, #31
 8006812:	d5ea      	bpl.n	80067ea <_printf_float+0x19a>
 8006814:	1c4b      	adds	r3, r1, #1
 8006816:	e7e7      	b.n	80067e8 <_printf_float+0x198>
 8006818:	2900      	cmp	r1, #0
 800681a:	bfcc      	ite	gt
 800681c:	2201      	movgt	r2, #1
 800681e:	f1c1 0202 	rsble	r2, r1, #2
 8006822:	4413      	add	r3, r2
 8006824:	e7e0      	b.n	80067e8 <_printf_float+0x198>
 8006826:	6823      	ldr	r3, [r4, #0]
 8006828:	055a      	lsls	r2, r3, #21
 800682a:	d407      	bmi.n	800683c <_printf_float+0x1ec>
 800682c:	6923      	ldr	r3, [r4, #16]
 800682e:	4642      	mov	r2, r8
 8006830:	4631      	mov	r1, r6
 8006832:	4628      	mov	r0, r5
 8006834:	47b8      	blx	r7
 8006836:	3001      	adds	r0, #1
 8006838:	d12b      	bne.n	8006892 <_printf_float+0x242>
 800683a:	e764      	b.n	8006706 <_printf_float+0xb6>
 800683c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006840:	f240 80dc 	bls.w	80069fc <_printf_float+0x3ac>
 8006844:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006848:	2200      	movs	r2, #0
 800684a:	2300      	movs	r3, #0
 800684c:	f7fa f960 	bl	8000b10 <__aeabi_dcmpeq>
 8006850:	2800      	cmp	r0, #0
 8006852:	d033      	beq.n	80068bc <_printf_float+0x26c>
 8006854:	2301      	movs	r3, #1
 8006856:	4631      	mov	r1, r6
 8006858:	4628      	mov	r0, r5
 800685a:	4a35      	ldr	r2, [pc, #212]	@ (8006930 <_printf_float+0x2e0>)
 800685c:	47b8      	blx	r7
 800685e:	3001      	adds	r0, #1
 8006860:	f43f af51 	beq.w	8006706 <_printf_float+0xb6>
 8006864:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8006868:	4543      	cmp	r3, r8
 800686a:	db02      	blt.n	8006872 <_printf_float+0x222>
 800686c:	6823      	ldr	r3, [r4, #0]
 800686e:	07d8      	lsls	r0, r3, #31
 8006870:	d50f      	bpl.n	8006892 <_printf_float+0x242>
 8006872:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006876:	4631      	mov	r1, r6
 8006878:	4628      	mov	r0, r5
 800687a:	47b8      	blx	r7
 800687c:	3001      	adds	r0, #1
 800687e:	f43f af42 	beq.w	8006706 <_printf_float+0xb6>
 8006882:	f04f 0900 	mov.w	r9, #0
 8006886:	f108 38ff 	add.w	r8, r8, #4294967295
 800688a:	f104 0a1a 	add.w	sl, r4, #26
 800688e:	45c8      	cmp	r8, r9
 8006890:	dc09      	bgt.n	80068a6 <_printf_float+0x256>
 8006892:	6823      	ldr	r3, [r4, #0]
 8006894:	079b      	lsls	r3, r3, #30
 8006896:	f100 8102 	bmi.w	8006a9e <_printf_float+0x44e>
 800689a:	68e0      	ldr	r0, [r4, #12]
 800689c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800689e:	4298      	cmp	r0, r3
 80068a0:	bfb8      	it	lt
 80068a2:	4618      	movlt	r0, r3
 80068a4:	e731      	b.n	800670a <_printf_float+0xba>
 80068a6:	2301      	movs	r3, #1
 80068a8:	4652      	mov	r2, sl
 80068aa:	4631      	mov	r1, r6
 80068ac:	4628      	mov	r0, r5
 80068ae:	47b8      	blx	r7
 80068b0:	3001      	adds	r0, #1
 80068b2:	f43f af28 	beq.w	8006706 <_printf_float+0xb6>
 80068b6:	f109 0901 	add.w	r9, r9, #1
 80068ba:	e7e8      	b.n	800688e <_printf_float+0x23e>
 80068bc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80068be:	2b00      	cmp	r3, #0
 80068c0:	dc38      	bgt.n	8006934 <_printf_float+0x2e4>
 80068c2:	2301      	movs	r3, #1
 80068c4:	4631      	mov	r1, r6
 80068c6:	4628      	mov	r0, r5
 80068c8:	4a19      	ldr	r2, [pc, #100]	@ (8006930 <_printf_float+0x2e0>)
 80068ca:	47b8      	blx	r7
 80068cc:	3001      	adds	r0, #1
 80068ce:	f43f af1a 	beq.w	8006706 <_printf_float+0xb6>
 80068d2:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80068d6:	ea59 0303 	orrs.w	r3, r9, r3
 80068da:	d102      	bne.n	80068e2 <_printf_float+0x292>
 80068dc:	6823      	ldr	r3, [r4, #0]
 80068de:	07d9      	lsls	r1, r3, #31
 80068e0:	d5d7      	bpl.n	8006892 <_printf_float+0x242>
 80068e2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80068e6:	4631      	mov	r1, r6
 80068e8:	4628      	mov	r0, r5
 80068ea:	47b8      	blx	r7
 80068ec:	3001      	adds	r0, #1
 80068ee:	f43f af0a 	beq.w	8006706 <_printf_float+0xb6>
 80068f2:	f04f 0a00 	mov.w	sl, #0
 80068f6:	f104 0b1a 	add.w	fp, r4, #26
 80068fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80068fc:	425b      	negs	r3, r3
 80068fe:	4553      	cmp	r3, sl
 8006900:	dc01      	bgt.n	8006906 <_printf_float+0x2b6>
 8006902:	464b      	mov	r3, r9
 8006904:	e793      	b.n	800682e <_printf_float+0x1de>
 8006906:	2301      	movs	r3, #1
 8006908:	465a      	mov	r2, fp
 800690a:	4631      	mov	r1, r6
 800690c:	4628      	mov	r0, r5
 800690e:	47b8      	blx	r7
 8006910:	3001      	adds	r0, #1
 8006912:	f43f aef8 	beq.w	8006706 <_printf_float+0xb6>
 8006916:	f10a 0a01 	add.w	sl, sl, #1
 800691a:	e7ee      	b.n	80068fa <_printf_float+0x2aa>
 800691c:	7fefffff 	.word	0x7fefffff
 8006920:	080092c6 	.word	0x080092c6
 8006924:	080092c2 	.word	0x080092c2
 8006928:	080092ce 	.word	0x080092ce
 800692c:	080092ca 	.word	0x080092ca
 8006930:	080092d2 	.word	0x080092d2
 8006934:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006936:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800693a:	4553      	cmp	r3, sl
 800693c:	bfa8      	it	ge
 800693e:	4653      	movge	r3, sl
 8006940:	2b00      	cmp	r3, #0
 8006942:	4699      	mov	r9, r3
 8006944:	dc36      	bgt.n	80069b4 <_printf_float+0x364>
 8006946:	f04f 0b00 	mov.w	fp, #0
 800694a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800694e:	f104 021a 	add.w	r2, r4, #26
 8006952:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006954:	930a      	str	r3, [sp, #40]	@ 0x28
 8006956:	eba3 0309 	sub.w	r3, r3, r9
 800695a:	455b      	cmp	r3, fp
 800695c:	dc31      	bgt.n	80069c2 <_printf_float+0x372>
 800695e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006960:	459a      	cmp	sl, r3
 8006962:	dc3a      	bgt.n	80069da <_printf_float+0x38a>
 8006964:	6823      	ldr	r3, [r4, #0]
 8006966:	07da      	lsls	r2, r3, #31
 8006968:	d437      	bmi.n	80069da <_printf_float+0x38a>
 800696a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800696c:	ebaa 0903 	sub.w	r9, sl, r3
 8006970:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006972:	ebaa 0303 	sub.w	r3, sl, r3
 8006976:	4599      	cmp	r9, r3
 8006978:	bfa8      	it	ge
 800697a:	4699      	movge	r9, r3
 800697c:	f1b9 0f00 	cmp.w	r9, #0
 8006980:	dc33      	bgt.n	80069ea <_printf_float+0x39a>
 8006982:	f04f 0800 	mov.w	r8, #0
 8006986:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800698a:	f104 0b1a 	add.w	fp, r4, #26
 800698e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006990:	ebaa 0303 	sub.w	r3, sl, r3
 8006994:	eba3 0309 	sub.w	r3, r3, r9
 8006998:	4543      	cmp	r3, r8
 800699a:	f77f af7a 	ble.w	8006892 <_printf_float+0x242>
 800699e:	2301      	movs	r3, #1
 80069a0:	465a      	mov	r2, fp
 80069a2:	4631      	mov	r1, r6
 80069a4:	4628      	mov	r0, r5
 80069a6:	47b8      	blx	r7
 80069a8:	3001      	adds	r0, #1
 80069aa:	f43f aeac 	beq.w	8006706 <_printf_float+0xb6>
 80069ae:	f108 0801 	add.w	r8, r8, #1
 80069b2:	e7ec      	b.n	800698e <_printf_float+0x33e>
 80069b4:	4642      	mov	r2, r8
 80069b6:	4631      	mov	r1, r6
 80069b8:	4628      	mov	r0, r5
 80069ba:	47b8      	blx	r7
 80069bc:	3001      	adds	r0, #1
 80069be:	d1c2      	bne.n	8006946 <_printf_float+0x2f6>
 80069c0:	e6a1      	b.n	8006706 <_printf_float+0xb6>
 80069c2:	2301      	movs	r3, #1
 80069c4:	4631      	mov	r1, r6
 80069c6:	4628      	mov	r0, r5
 80069c8:	920a      	str	r2, [sp, #40]	@ 0x28
 80069ca:	47b8      	blx	r7
 80069cc:	3001      	adds	r0, #1
 80069ce:	f43f ae9a 	beq.w	8006706 <_printf_float+0xb6>
 80069d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80069d4:	f10b 0b01 	add.w	fp, fp, #1
 80069d8:	e7bb      	b.n	8006952 <_printf_float+0x302>
 80069da:	4631      	mov	r1, r6
 80069dc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80069e0:	4628      	mov	r0, r5
 80069e2:	47b8      	blx	r7
 80069e4:	3001      	adds	r0, #1
 80069e6:	d1c0      	bne.n	800696a <_printf_float+0x31a>
 80069e8:	e68d      	b.n	8006706 <_printf_float+0xb6>
 80069ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80069ec:	464b      	mov	r3, r9
 80069ee:	4631      	mov	r1, r6
 80069f0:	4628      	mov	r0, r5
 80069f2:	4442      	add	r2, r8
 80069f4:	47b8      	blx	r7
 80069f6:	3001      	adds	r0, #1
 80069f8:	d1c3      	bne.n	8006982 <_printf_float+0x332>
 80069fa:	e684      	b.n	8006706 <_printf_float+0xb6>
 80069fc:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006a00:	f1ba 0f01 	cmp.w	sl, #1
 8006a04:	dc01      	bgt.n	8006a0a <_printf_float+0x3ba>
 8006a06:	07db      	lsls	r3, r3, #31
 8006a08:	d536      	bpl.n	8006a78 <_printf_float+0x428>
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	4642      	mov	r2, r8
 8006a0e:	4631      	mov	r1, r6
 8006a10:	4628      	mov	r0, r5
 8006a12:	47b8      	blx	r7
 8006a14:	3001      	adds	r0, #1
 8006a16:	f43f ae76 	beq.w	8006706 <_printf_float+0xb6>
 8006a1a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006a1e:	4631      	mov	r1, r6
 8006a20:	4628      	mov	r0, r5
 8006a22:	47b8      	blx	r7
 8006a24:	3001      	adds	r0, #1
 8006a26:	f43f ae6e 	beq.w	8006706 <_printf_float+0xb6>
 8006a2a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006a2e:	2200      	movs	r2, #0
 8006a30:	2300      	movs	r3, #0
 8006a32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a36:	f7fa f86b 	bl	8000b10 <__aeabi_dcmpeq>
 8006a3a:	b9c0      	cbnz	r0, 8006a6e <_printf_float+0x41e>
 8006a3c:	4653      	mov	r3, sl
 8006a3e:	f108 0201 	add.w	r2, r8, #1
 8006a42:	4631      	mov	r1, r6
 8006a44:	4628      	mov	r0, r5
 8006a46:	47b8      	blx	r7
 8006a48:	3001      	adds	r0, #1
 8006a4a:	d10c      	bne.n	8006a66 <_printf_float+0x416>
 8006a4c:	e65b      	b.n	8006706 <_printf_float+0xb6>
 8006a4e:	2301      	movs	r3, #1
 8006a50:	465a      	mov	r2, fp
 8006a52:	4631      	mov	r1, r6
 8006a54:	4628      	mov	r0, r5
 8006a56:	47b8      	blx	r7
 8006a58:	3001      	adds	r0, #1
 8006a5a:	f43f ae54 	beq.w	8006706 <_printf_float+0xb6>
 8006a5e:	f108 0801 	add.w	r8, r8, #1
 8006a62:	45d0      	cmp	r8, sl
 8006a64:	dbf3      	blt.n	8006a4e <_printf_float+0x3fe>
 8006a66:	464b      	mov	r3, r9
 8006a68:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006a6c:	e6e0      	b.n	8006830 <_printf_float+0x1e0>
 8006a6e:	f04f 0800 	mov.w	r8, #0
 8006a72:	f104 0b1a 	add.w	fp, r4, #26
 8006a76:	e7f4      	b.n	8006a62 <_printf_float+0x412>
 8006a78:	2301      	movs	r3, #1
 8006a7a:	4642      	mov	r2, r8
 8006a7c:	e7e1      	b.n	8006a42 <_printf_float+0x3f2>
 8006a7e:	2301      	movs	r3, #1
 8006a80:	464a      	mov	r2, r9
 8006a82:	4631      	mov	r1, r6
 8006a84:	4628      	mov	r0, r5
 8006a86:	47b8      	blx	r7
 8006a88:	3001      	adds	r0, #1
 8006a8a:	f43f ae3c 	beq.w	8006706 <_printf_float+0xb6>
 8006a8e:	f108 0801 	add.w	r8, r8, #1
 8006a92:	68e3      	ldr	r3, [r4, #12]
 8006a94:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006a96:	1a5b      	subs	r3, r3, r1
 8006a98:	4543      	cmp	r3, r8
 8006a9a:	dcf0      	bgt.n	8006a7e <_printf_float+0x42e>
 8006a9c:	e6fd      	b.n	800689a <_printf_float+0x24a>
 8006a9e:	f04f 0800 	mov.w	r8, #0
 8006aa2:	f104 0919 	add.w	r9, r4, #25
 8006aa6:	e7f4      	b.n	8006a92 <_printf_float+0x442>

08006aa8 <_printf_common>:
 8006aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006aac:	4616      	mov	r6, r2
 8006aae:	4698      	mov	r8, r3
 8006ab0:	688a      	ldr	r2, [r1, #8]
 8006ab2:	690b      	ldr	r3, [r1, #16]
 8006ab4:	4607      	mov	r7, r0
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	bfb8      	it	lt
 8006aba:	4613      	movlt	r3, r2
 8006abc:	6033      	str	r3, [r6, #0]
 8006abe:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006ac2:	460c      	mov	r4, r1
 8006ac4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006ac8:	b10a      	cbz	r2, 8006ace <_printf_common+0x26>
 8006aca:	3301      	adds	r3, #1
 8006acc:	6033      	str	r3, [r6, #0]
 8006ace:	6823      	ldr	r3, [r4, #0]
 8006ad0:	0699      	lsls	r1, r3, #26
 8006ad2:	bf42      	ittt	mi
 8006ad4:	6833      	ldrmi	r3, [r6, #0]
 8006ad6:	3302      	addmi	r3, #2
 8006ad8:	6033      	strmi	r3, [r6, #0]
 8006ada:	6825      	ldr	r5, [r4, #0]
 8006adc:	f015 0506 	ands.w	r5, r5, #6
 8006ae0:	d106      	bne.n	8006af0 <_printf_common+0x48>
 8006ae2:	f104 0a19 	add.w	sl, r4, #25
 8006ae6:	68e3      	ldr	r3, [r4, #12]
 8006ae8:	6832      	ldr	r2, [r6, #0]
 8006aea:	1a9b      	subs	r3, r3, r2
 8006aec:	42ab      	cmp	r3, r5
 8006aee:	dc2b      	bgt.n	8006b48 <_printf_common+0xa0>
 8006af0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006af4:	6822      	ldr	r2, [r4, #0]
 8006af6:	3b00      	subs	r3, #0
 8006af8:	bf18      	it	ne
 8006afa:	2301      	movne	r3, #1
 8006afc:	0692      	lsls	r2, r2, #26
 8006afe:	d430      	bmi.n	8006b62 <_printf_common+0xba>
 8006b00:	4641      	mov	r1, r8
 8006b02:	4638      	mov	r0, r7
 8006b04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006b08:	47c8      	blx	r9
 8006b0a:	3001      	adds	r0, #1
 8006b0c:	d023      	beq.n	8006b56 <_printf_common+0xae>
 8006b0e:	6823      	ldr	r3, [r4, #0]
 8006b10:	6922      	ldr	r2, [r4, #16]
 8006b12:	f003 0306 	and.w	r3, r3, #6
 8006b16:	2b04      	cmp	r3, #4
 8006b18:	bf14      	ite	ne
 8006b1a:	2500      	movne	r5, #0
 8006b1c:	6833      	ldreq	r3, [r6, #0]
 8006b1e:	f04f 0600 	mov.w	r6, #0
 8006b22:	bf08      	it	eq
 8006b24:	68e5      	ldreq	r5, [r4, #12]
 8006b26:	f104 041a 	add.w	r4, r4, #26
 8006b2a:	bf08      	it	eq
 8006b2c:	1aed      	subeq	r5, r5, r3
 8006b2e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006b32:	bf08      	it	eq
 8006b34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	bfc4      	itt	gt
 8006b3c:	1a9b      	subgt	r3, r3, r2
 8006b3e:	18ed      	addgt	r5, r5, r3
 8006b40:	42b5      	cmp	r5, r6
 8006b42:	d11a      	bne.n	8006b7a <_printf_common+0xd2>
 8006b44:	2000      	movs	r0, #0
 8006b46:	e008      	b.n	8006b5a <_printf_common+0xb2>
 8006b48:	2301      	movs	r3, #1
 8006b4a:	4652      	mov	r2, sl
 8006b4c:	4641      	mov	r1, r8
 8006b4e:	4638      	mov	r0, r7
 8006b50:	47c8      	blx	r9
 8006b52:	3001      	adds	r0, #1
 8006b54:	d103      	bne.n	8006b5e <_printf_common+0xb6>
 8006b56:	f04f 30ff 	mov.w	r0, #4294967295
 8006b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b5e:	3501      	adds	r5, #1
 8006b60:	e7c1      	b.n	8006ae6 <_printf_common+0x3e>
 8006b62:	2030      	movs	r0, #48	@ 0x30
 8006b64:	18e1      	adds	r1, r4, r3
 8006b66:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006b6a:	1c5a      	adds	r2, r3, #1
 8006b6c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006b70:	4422      	add	r2, r4
 8006b72:	3302      	adds	r3, #2
 8006b74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006b78:	e7c2      	b.n	8006b00 <_printf_common+0x58>
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	4622      	mov	r2, r4
 8006b7e:	4641      	mov	r1, r8
 8006b80:	4638      	mov	r0, r7
 8006b82:	47c8      	blx	r9
 8006b84:	3001      	adds	r0, #1
 8006b86:	d0e6      	beq.n	8006b56 <_printf_common+0xae>
 8006b88:	3601      	adds	r6, #1
 8006b8a:	e7d9      	b.n	8006b40 <_printf_common+0x98>

08006b8c <_printf_i>:
 8006b8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b90:	7e0f      	ldrb	r7, [r1, #24]
 8006b92:	4691      	mov	r9, r2
 8006b94:	2f78      	cmp	r7, #120	@ 0x78
 8006b96:	4680      	mov	r8, r0
 8006b98:	460c      	mov	r4, r1
 8006b9a:	469a      	mov	sl, r3
 8006b9c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006b9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006ba2:	d807      	bhi.n	8006bb4 <_printf_i+0x28>
 8006ba4:	2f62      	cmp	r7, #98	@ 0x62
 8006ba6:	d80a      	bhi.n	8006bbe <_printf_i+0x32>
 8006ba8:	2f00      	cmp	r7, #0
 8006baa:	f000 80d1 	beq.w	8006d50 <_printf_i+0x1c4>
 8006bae:	2f58      	cmp	r7, #88	@ 0x58
 8006bb0:	f000 80b8 	beq.w	8006d24 <_printf_i+0x198>
 8006bb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006bb8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006bbc:	e03a      	b.n	8006c34 <_printf_i+0xa8>
 8006bbe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006bc2:	2b15      	cmp	r3, #21
 8006bc4:	d8f6      	bhi.n	8006bb4 <_printf_i+0x28>
 8006bc6:	a101      	add	r1, pc, #4	@ (adr r1, 8006bcc <_printf_i+0x40>)
 8006bc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006bcc:	08006c25 	.word	0x08006c25
 8006bd0:	08006c39 	.word	0x08006c39
 8006bd4:	08006bb5 	.word	0x08006bb5
 8006bd8:	08006bb5 	.word	0x08006bb5
 8006bdc:	08006bb5 	.word	0x08006bb5
 8006be0:	08006bb5 	.word	0x08006bb5
 8006be4:	08006c39 	.word	0x08006c39
 8006be8:	08006bb5 	.word	0x08006bb5
 8006bec:	08006bb5 	.word	0x08006bb5
 8006bf0:	08006bb5 	.word	0x08006bb5
 8006bf4:	08006bb5 	.word	0x08006bb5
 8006bf8:	08006d37 	.word	0x08006d37
 8006bfc:	08006c63 	.word	0x08006c63
 8006c00:	08006cf1 	.word	0x08006cf1
 8006c04:	08006bb5 	.word	0x08006bb5
 8006c08:	08006bb5 	.word	0x08006bb5
 8006c0c:	08006d59 	.word	0x08006d59
 8006c10:	08006bb5 	.word	0x08006bb5
 8006c14:	08006c63 	.word	0x08006c63
 8006c18:	08006bb5 	.word	0x08006bb5
 8006c1c:	08006bb5 	.word	0x08006bb5
 8006c20:	08006cf9 	.word	0x08006cf9
 8006c24:	6833      	ldr	r3, [r6, #0]
 8006c26:	1d1a      	adds	r2, r3, #4
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	6032      	str	r2, [r6, #0]
 8006c2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006c34:	2301      	movs	r3, #1
 8006c36:	e09c      	b.n	8006d72 <_printf_i+0x1e6>
 8006c38:	6833      	ldr	r3, [r6, #0]
 8006c3a:	6820      	ldr	r0, [r4, #0]
 8006c3c:	1d19      	adds	r1, r3, #4
 8006c3e:	6031      	str	r1, [r6, #0]
 8006c40:	0606      	lsls	r6, r0, #24
 8006c42:	d501      	bpl.n	8006c48 <_printf_i+0xbc>
 8006c44:	681d      	ldr	r5, [r3, #0]
 8006c46:	e003      	b.n	8006c50 <_printf_i+0xc4>
 8006c48:	0645      	lsls	r5, r0, #25
 8006c4a:	d5fb      	bpl.n	8006c44 <_printf_i+0xb8>
 8006c4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006c50:	2d00      	cmp	r5, #0
 8006c52:	da03      	bge.n	8006c5c <_printf_i+0xd0>
 8006c54:	232d      	movs	r3, #45	@ 0x2d
 8006c56:	426d      	negs	r5, r5
 8006c58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c5c:	230a      	movs	r3, #10
 8006c5e:	4858      	ldr	r0, [pc, #352]	@ (8006dc0 <_printf_i+0x234>)
 8006c60:	e011      	b.n	8006c86 <_printf_i+0xfa>
 8006c62:	6821      	ldr	r1, [r4, #0]
 8006c64:	6833      	ldr	r3, [r6, #0]
 8006c66:	0608      	lsls	r0, r1, #24
 8006c68:	f853 5b04 	ldr.w	r5, [r3], #4
 8006c6c:	d402      	bmi.n	8006c74 <_printf_i+0xe8>
 8006c6e:	0649      	lsls	r1, r1, #25
 8006c70:	bf48      	it	mi
 8006c72:	b2ad      	uxthmi	r5, r5
 8006c74:	2f6f      	cmp	r7, #111	@ 0x6f
 8006c76:	6033      	str	r3, [r6, #0]
 8006c78:	bf14      	ite	ne
 8006c7a:	230a      	movne	r3, #10
 8006c7c:	2308      	moveq	r3, #8
 8006c7e:	4850      	ldr	r0, [pc, #320]	@ (8006dc0 <_printf_i+0x234>)
 8006c80:	2100      	movs	r1, #0
 8006c82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006c86:	6866      	ldr	r6, [r4, #4]
 8006c88:	2e00      	cmp	r6, #0
 8006c8a:	60a6      	str	r6, [r4, #8]
 8006c8c:	db05      	blt.n	8006c9a <_printf_i+0x10e>
 8006c8e:	6821      	ldr	r1, [r4, #0]
 8006c90:	432e      	orrs	r6, r5
 8006c92:	f021 0104 	bic.w	r1, r1, #4
 8006c96:	6021      	str	r1, [r4, #0]
 8006c98:	d04b      	beq.n	8006d32 <_printf_i+0x1a6>
 8006c9a:	4616      	mov	r6, r2
 8006c9c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006ca0:	fb03 5711 	mls	r7, r3, r1, r5
 8006ca4:	5dc7      	ldrb	r7, [r0, r7]
 8006ca6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006caa:	462f      	mov	r7, r5
 8006cac:	42bb      	cmp	r3, r7
 8006cae:	460d      	mov	r5, r1
 8006cb0:	d9f4      	bls.n	8006c9c <_printf_i+0x110>
 8006cb2:	2b08      	cmp	r3, #8
 8006cb4:	d10b      	bne.n	8006cce <_printf_i+0x142>
 8006cb6:	6823      	ldr	r3, [r4, #0]
 8006cb8:	07df      	lsls	r7, r3, #31
 8006cba:	d508      	bpl.n	8006cce <_printf_i+0x142>
 8006cbc:	6923      	ldr	r3, [r4, #16]
 8006cbe:	6861      	ldr	r1, [r4, #4]
 8006cc0:	4299      	cmp	r1, r3
 8006cc2:	bfde      	ittt	le
 8006cc4:	2330      	movle	r3, #48	@ 0x30
 8006cc6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006cca:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006cce:	1b92      	subs	r2, r2, r6
 8006cd0:	6122      	str	r2, [r4, #16]
 8006cd2:	464b      	mov	r3, r9
 8006cd4:	4621      	mov	r1, r4
 8006cd6:	4640      	mov	r0, r8
 8006cd8:	f8cd a000 	str.w	sl, [sp]
 8006cdc:	aa03      	add	r2, sp, #12
 8006cde:	f7ff fee3 	bl	8006aa8 <_printf_common>
 8006ce2:	3001      	adds	r0, #1
 8006ce4:	d14a      	bne.n	8006d7c <_printf_i+0x1f0>
 8006ce6:	f04f 30ff 	mov.w	r0, #4294967295
 8006cea:	b004      	add	sp, #16
 8006cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cf0:	6823      	ldr	r3, [r4, #0]
 8006cf2:	f043 0320 	orr.w	r3, r3, #32
 8006cf6:	6023      	str	r3, [r4, #0]
 8006cf8:	2778      	movs	r7, #120	@ 0x78
 8006cfa:	4832      	ldr	r0, [pc, #200]	@ (8006dc4 <_printf_i+0x238>)
 8006cfc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006d00:	6823      	ldr	r3, [r4, #0]
 8006d02:	6831      	ldr	r1, [r6, #0]
 8006d04:	061f      	lsls	r7, r3, #24
 8006d06:	f851 5b04 	ldr.w	r5, [r1], #4
 8006d0a:	d402      	bmi.n	8006d12 <_printf_i+0x186>
 8006d0c:	065f      	lsls	r7, r3, #25
 8006d0e:	bf48      	it	mi
 8006d10:	b2ad      	uxthmi	r5, r5
 8006d12:	6031      	str	r1, [r6, #0]
 8006d14:	07d9      	lsls	r1, r3, #31
 8006d16:	bf44      	itt	mi
 8006d18:	f043 0320 	orrmi.w	r3, r3, #32
 8006d1c:	6023      	strmi	r3, [r4, #0]
 8006d1e:	b11d      	cbz	r5, 8006d28 <_printf_i+0x19c>
 8006d20:	2310      	movs	r3, #16
 8006d22:	e7ad      	b.n	8006c80 <_printf_i+0xf4>
 8006d24:	4826      	ldr	r0, [pc, #152]	@ (8006dc0 <_printf_i+0x234>)
 8006d26:	e7e9      	b.n	8006cfc <_printf_i+0x170>
 8006d28:	6823      	ldr	r3, [r4, #0]
 8006d2a:	f023 0320 	bic.w	r3, r3, #32
 8006d2e:	6023      	str	r3, [r4, #0]
 8006d30:	e7f6      	b.n	8006d20 <_printf_i+0x194>
 8006d32:	4616      	mov	r6, r2
 8006d34:	e7bd      	b.n	8006cb2 <_printf_i+0x126>
 8006d36:	6833      	ldr	r3, [r6, #0]
 8006d38:	6825      	ldr	r5, [r4, #0]
 8006d3a:	1d18      	adds	r0, r3, #4
 8006d3c:	6961      	ldr	r1, [r4, #20]
 8006d3e:	6030      	str	r0, [r6, #0]
 8006d40:	062e      	lsls	r6, r5, #24
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	d501      	bpl.n	8006d4a <_printf_i+0x1be>
 8006d46:	6019      	str	r1, [r3, #0]
 8006d48:	e002      	b.n	8006d50 <_printf_i+0x1c4>
 8006d4a:	0668      	lsls	r0, r5, #25
 8006d4c:	d5fb      	bpl.n	8006d46 <_printf_i+0x1ba>
 8006d4e:	8019      	strh	r1, [r3, #0]
 8006d50:	2300      	movs	r3, #0
 8006d52:	4616      	mov	r6, r2
 8006d54:	6123      	str	r3, [r4, #16]
 8006d56:	e7bc      	b.n	8006cd2 <_printf_i+0x146>
 8006d58:	6833      	ldr	r3, [r6, #0]
 8006d5a:	2100      	movs	r1, #0
 8006d5c:	1d1a      	adds	r2, r3, #4
 8006d5e:	6032      	str	r2, [r6, #0]
 8006d60:	681e      	ldr	r6, [r3, #0]
 8006d62:	6862      	ldr	r2, [r4, #4]
 8006d64:	4630      	mov	r0, r6
 8006d66:	f000 f9d6 	bl	8007116 <memchr>
 8006d6a:	b108      	cbz	r0, 8006d70 <_printf_i+0x1e4>
 8006d6c:	1b80      	subs	r0, r0, r6
 8006d6e:	6060      	str	r0, [r4, #4]
 8006d70:	6863      	ldr	r3, [r4, #4]
 8006d72:	6123      	str	r3, [r4, #16]
 8006d74:	2300      	movs	r3, #0
 8006d76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d7a:	e7aa      	b.n	8006cd2 <_printf_i+0x146>
 8006d7c:	4632      	mov	r2, r6
 8006d7e:	4649      	mov	r1, r9
 8006d80:	4640      	mov	r0, r8
 8006d82:	6923      	ldr	r3, [r4, #16]
 8006d84:	47d0      	blx	sl
 8006d86:	3001      	adds	r0, #1
 8006d88:	d0ad      	beq.n	8006ce6 <_printf_i+0x15a>
 8006d8a:	6823      	ldr	r3, [r4, #0]
 8006d8c:	079b      	lsls	r3, r3, #30
 8006d8e:	d413      	bmi.n	8006db8 <_printf_i+0x22c>
 8006d90:	68e0      	ldr	r0, [r4, #12]
 8006d92:	9b03      	ldr	r3, [sp, #12]
 8006d94:	4298      	cmp	r0, r3
 8006d96:	bfb8      	it	lt
 8006d98:	4618      	movlt	r0, r3
 8006d9a:	e7a6      	b.n	8006cea <_printf_i+0x15e>
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	4632      	mov	r2, r6
 8006da0:	4649      	mov	r1, r9
 8006da2:	4640      	mov	r0, r8
 8006da4:	47d0      	blx	sl
 8006da6:	3001      	adds	r0, #1
 8006da8:	d09d      	beq.n	8006ce6 <_printf_i+0x15a>
 8006daa:	3501      	adds	r5, #1
 8006dac:	68e3      	ldr	r3, [r4, #12]
 8006dae:	9903      	ldr	r1, [sp, #12]
 8006db0:	1a5b      	subs	r3, r3, r1
 8006db2:	42ab      	cmp	r3, r5
 8006db4:	dcf2      	bgt.n	8006d9c <_printf_i+0x210>
 8006db6:	e7eb      	b.n	8006d90 <_printf_i+0x204>
 8006db8:	2500      	movs	r5, #0
 8006dba:	f104 0619 	add.w	r6, r4, #25
 8006dbe:	e7f5      	b.n	8006dac <_printf_i+0x220>
 8006dc0:	080092d4 	.word	0x080092d4
 8006dc4:	080092e5 	.word	0x080092e5

08006dc8 <std>:
 8006dc8:	2300      	movs	r3, #0
 8006dca:	b510      	push	{r4, lr}
 8006dcc:	4604      	mov	r4, r0
 8006dce:	e9c0 3300 	strd	r3, r3, [r0]
 8006dd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006dd6:	6083      	str	r3, [r0, #8]
 8006dd8:	8181      	strh	r1, [r0, #12]
 8006dda:	6643      	str	r3, [r0, #100]	@ 0x64
 8006ddc:	81c2      	strh	r2, [r0, #14]
 8006dde:	6183      	str	r3, [r0, #24]
 8006de0:	4619      	mov	r1, r3
 8006de2:	2208      	movs	r2, #8
 8006de4:	305c      	adds	r0, #92	@ 0x5c
 8006de6:	f000 f916 	bl	8007016 <memset>
 8006dea:	4b0d      	ldr	r3, [pc, #52]	@ (8006e20 <std+0x58>)
 8006dec:	6224      	str	r4, [r4, #32]
 8006dee:	6263      	str	r3, [r4, #36]	@ 0x24
 8006df0:	4b0c      	ldr	r3, [pc, #48]	@ (8006e24 <std+0x5c>)
 8006df2:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006df4:	4b0c      	ldr	r3, [pc, #48]	@ (8006e28 <std+0x60>)
 8006df6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006df8:	4b0c      	ldr	r3, [pc, #48]	@ (8006e2c <std+0x64>)
 8006dfa:	6323      	str	r3, [r4, #48]	@ 0x30
 8006dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8006e30 <std+0x68>)
 8006dfe:	429c      	cmp	r4, r3
 8006e00:	d006      	beq.n	8006e10 <std+0x48>
 8006e02:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006e06:	4294      	cmp	r4, r2
 8006e08:	d002      	beq.n	8006e10 <std+0x48>
 8006e0a:	33d0      	adds	r3, #208	@ 0xd0
 8006e0c:	429c      	cmp	r4, r3
 8006e0e:	d105      	bne.n	8006e1c <std+0x54>
 8006e10:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006e14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e18:	f000 b97a 	b.w	8007110 <__retarget_lock_init_recursive>
 8006e1c:	bd10      	pop	{r4, pc}
 8006e1e:	bf00      	nop
 8006e20:	08006f91 	.word	0x08006f91
 8006e24:	08006fb3 	.word	0x08006fb3
 8006e28:	08006feb 	.word	0x08006feb
 8006e2c:	0800700f 	.word	0x0800700f
 8006e30:	2000031c 	.word	0x2000031c

08006e34 <stdio_exit_handler>:
 8006e34:	4a02      	ldr	r2, [pc, #8]	@ (8006e40 <stdio_exit_handler+0xc>)
 8006e36:	4903      	ldr	r1, [pc, #12]	@ (8006e44 <stdio_exit_handler+0x10>)
 8006e38:	4803      	ldr	r0, [pc, #12]	@ (8006e48 <stdio_exit_handler+0x14>)
 8006e3a:	f000 b869 	b.w	8006f10 <_fwalk_sglue>
 8006e3e:	bf00      	nop
 8006e40:	2000002c 	.word	0x2000002c
 8006e44:	08008a91 	.word	0x08008a91
 8006e48:	2000003c 	.word	0x2000003c

08006e4c <cleanup_stdio>:
 8006e4c:	6841      	ldr	r1, [r0, #4]
 8006e4e:	4b0c      	ldr	r3, [pc, #48]	@ (8006e80 <cleanup_stdio+0x34>)
 8006e50:	b510      	push	{r4, lr}
 8006e52:	4299      	cmp	r1, r3
 8006e54:	4604      	mov	r4, r0
 8006e56:	d001      	beq.n	8006e5c <cleanup_stdio+0x10>
 8006e58:	f001 fe1a 	bl	8008a90 <_fflush_r>
 8006e5c:	68a1      	ldr	r1, [r4, #8]
 8006e5e:	4b09      	ldr	r3, [pc, #36]	@ (8006e84 <cleanup_stdio+0x38>)
 8006e60:	4299      	cmp	r1, r3
 8006e62:	d002      	beq.n	8006e6a <cleanup_stdio+0x1e>
 8006e64:	4620      	mov	r0, r4
 8006e66:	f001 fe13 	bl	8008a90 <_fflush_r>
 8006e6a:	68e1      	ldr	r1, [r4, #12]
 8006e6c:	4b06      	ldr	r3, [pc, #24]	@ (8006e88 <cleanup_stdio+0x3c>)
 8006e6e:	4299      	cmp	r1, r3
 8006e70:	d004      	beq.n	8006e7c <cleanup_stdio+0x30>
 8006e72:	4620      	mov	r0, r4
 8006e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e78:	f001 be0a 	b.w	8008a90 <_fflush_r>
 8006e7c:	bd10      	pop	{r4, pc}
 8006e7e:	bf00      	nop
 8006e80:	2000031c 	.word	0x2000031c
 8006e84:	20000384 	.word	0x20000384
 8006e88:	200003ec 	.word	0x200003ec

08006e8c <global_stdio_init.part.0>:
 8006e8c:	b510      	push	{r4, lr}
 8006e8e:	4b0b      	ldr	r3, [pc, #44]	@ (8006ebc <global_stdio_init.part.0+0x30>)
 8006e90:	4c0b      	ldr	r4, [pc, #44]	@ (8006ec0 <global_stdio_init.part.0+0x34>)
 8006e92:	4a0c      	ldr	r2, [pc, #48]	@ (8006ec4 <global_stdio_init.part.0+0x38>)
 8006e94:	4620      	mov	r0, r4
 8006e96:	601a      	str	r2, [r3, #0]
 8006e98:	2104      	movs	r1, #4
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f7ff ff94 	bl	8006dc8 <std>
 8006ea0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	2109      	movs	r1, #9
 8006ea8:	f7ff ff8e 	bl	8006dc8 <std>
 8006eac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006eb0:	2202      	movs	r2, #2
 8006eb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006eb6:	2112      	movs	r1, #18
 8006eb8:	f7ff bf86 	b.w	8006dc8 <std>
 8006ebc:	20000454 	.word	0x20000454
 8006ec0:	2000031c 	.word	0x2000031c
 8006ec4:	08006e35 	.word	0x08006e35

08006ec8 <__sfp_lock_acquire>:
 8006ec8:	4801      	ldr	r0, [pc, #4]	@ (8006ed0 <__sfp_lock_acquire+0x8>)
 8006eca:	f000 b922 	b.w	8007112 <__retarget_lock_acquire_recursive>
 8006ece:	bf00      	nop
 8006ed0:	2000045d 	.word	0x2000045d

08006ed4 <__sfp_lock_release>:
 8006ed4:	4801      	ldr	r0, [pc, #4]	@ (8006edc <__sfp_lock_release+0x8>)
 8006ed6:	f000 b91d 	b.w	8007114 <__retarget_lock_release_recursive>
 8006eda:	bf00      	nop
 8006edc:	2000045d 	.word	0x2000045d

08006ee0 <__sinit>:
 8006ee0:	b510      	push	{r4, lr}
 8006ee2:	4604      	mov	r4, r0
 8006ee4:	f7ff fff0 	bl	8006ec8 <__sfp_lock_acquire>
 8006ee8:	6a23      	ldr	r3, [r4, #32]
 8006eea:	b11b      	cbz	r3, 8006ef4 <__sinit+0x14>
 8006eec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ef0:	f7ff bff0 	b.w	8006ed4 <__sfp_lock_release>
 8006ef4:	4b04      	ldr	r3, [pc, #16]	@ (8006f08 <__sinit+0x28>)
 8006ef6:	6223      	str	r3, [r4, #32]
 8006ef8:	4b04      	ldr	r3, [pc, #16]	@ (8006f0c <__sinit+0x2c>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d1f5      	bne.n	8006eec <__sinit+0xc>
 8006f00:	f7ff ffc4 	bl	8006e8c <global_stdio_init.part.0>
 8006f04:	e7f2      	b.n	8006eec <__sinit+0xc>
 8006f06:	bf00      	nop
 8006f08:	08006e4d 	.word	0x08006e4d
 8006f0c:	20000454 	.word	0x20000454

08006f10 <_fwalk_sglue>:
 8006f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f14:	4607      	mov	r7, r0
 8006f16:	4688      	mov	r8, r1
 8006f18:	4614      	mov	r4, r2
 8006f1a:	2600      	movs	r6, #0
 8006f1c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f20:	f1b9 0901 	subs.w	r9, r9, #1
 8006f24:	d505      	bpl.n	8006f32 <_fwalk_sglue+0x22>
 8006f26:	6824      	ldr	r4, [r4, #0]
 8006f28:	2c00      	cmp	r4, #0
 8006f2a:	d1f7      	bne.n	8006f1c <_fwalk_sglue+0xc>
 8006f2c:	4630      	mov	r0, r6
 8006f2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f32:	89ab      	ldrh	r3, [r5, #12]
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d907      	bls.n	8006f48 <_fwalk_sglue+0x38>
 8006f38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	d003      	beq.n	8006f48 <_fwalk_sglue+0x38>
 8006f40:	4629      	mov	r1, r5
 8006f42:	4638      	mov	r0, r7
 8006f44:	47c0      	blx	r8
 8006f46:	4306      	orrs	r6, r0
 8006f48:	3568      	adds	r5, #104	@ 0x68
 8006f4a:	e7e9      	b.n	8006f20 <_fwalk_sglue+0x10>

08006f4c <siprintf>:
 8006f4c:	b40e      	push	{r1, r2, r3}
 8006f4e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006f52:	b510      	push	{r4, lr}
 8006f54:	2400      	movs	r4, #0
 8006f56:	b09d      	sub	sp, #116	@ 0x74
 8006f58:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006f5a:	9002      	str	r0, [sp, #8]
 8006f5c:	9006      	str	r0, [sp, #24]
 8006f5e:	9107      	str	r1, [sp, #28]
 8006f60:	9104      	str	r1, [sp, #16]
 8006f62:	4809      	ldr	r0, [pc, #36]	@ (8006f88 <siprintf+0x3c>)
 8006f64:	4909      	ldr	r1, [pc, #36]	@ (8006f8c <siprintf+0x40>)
 8006f66:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f6a:	9105      	str	r1, [sp, #20]
 8006f6c:	6800      	ldr	r0, [r0, #0]
 8006f6e:	a902      	add	r1, sp, #8
 8006f70:	9301      	str	r3, [sp, #4]
 8006f72:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006f74:	f001 fc10 	bl	8008798 <_svfiprintf_r>
 8006f78:	9b02      	ldr	r3, [sp, #8]
 8006f7a:	701c      	strb	r4, [r3, #0]
 8006f7c:	b01d      	add	sp, #116	@ 0x74
 8006f7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f82:	b003      	add	sp, #12
 8006f84:	4770      	bx	lr
 8006f86:	bf00      	nop
 8006f88:	20000038 	.word	0x20000038
 8006f8c:	ffff0208 	.word	0xffff0208

08006f90 <__sread>:
 8006f90:	b510      	push	{r4, lr}
 8006f92:	460c      	mov	r4, r1
 8006f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f98:	f000 f86c 	bl	8007074 <_read_r>
 8006f9c:	2800      	cmp	r0, #0
 8006f9e:	bfab      	itete	ge
 8006fa0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006fa2:	89a3      	ldrhlt	r3, [r4, #12]
 8006fa4:	181b      	addge	r3, r3, r0
 8006fa6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006faa:	bfac      	ite	ge
 8006fac:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006fae:	81a3      	strhlt	r3, [r4, #12]
 8006fb0:	bd10      	pop	{r4, pc}

08006fb2 <__swrite>:
 8006fb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fb6:	461f      	mov	r7, r3
 8006fb8:	898b      	ldrh	r3, [r1, #12]
 8006fba:	4605      	mov	r5, r0
 8006fbc:	05db      	lsls	r3, r3, #23
 8006fbe:	460c      	mov	r4, r1
 8006fc0:	4616      	mov	r6, r2
 8006fc2:	d505      	bpl.n	8006fd0 <__swrite+0x1e>
 8006fc4:	2302      	movs	r3, #2
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fcc:	f000 f840 	bl	8007050 <_lseek_r>
 8006fd0:	89a3      	ldrh	r3, [r4, #12]
 8006fd2:	4632      	mov	r2, r6
 8006fd4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006fd8:	81a3      	strh	r3, [r4, #12]
 8006fda:	4628      	mov	r0, r5
 8006fdc:	463b      	mov	r3, r7
 8006fde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fe2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fe6:	f000 b857 	b.w	8007098 <_write_r>

08006fea <__sseek>:
 8006fea:	b510      	push	{r4, lr}
 8006fec:	460c      	mov	r4, r1
 8006fee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ff2:	f000 f82d 	bl	8007050 <_lseek_r>
 8006ff6:	1c43      	adds	r3, r0, #1
 8006ff8:	89a3      	ldrh	r3, [r4, #12]
 8006ffa:	bf15      	itete	ne
 8006ffc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006ffe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007002:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007006:	81a3      	strheq	r3, [r4, #12]
 8007008:	bf18      	it	ne
 800700a:	81a3      	strhne	r3, [r4, #12]
 800700c:	bd10      	pop	{r4, pc}

0800700e <__sclose>:
 800700e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007012:	f000 b80d 	b.w	8007030 <_close_r>

08007016 <memset>:
 8007016:	4603      	mov	r3, r0
 8007018:	4402      	add	r2, r0
 800701a:	4293      	cmp	r3, r2
 800701c:	d100      	bne.n	8007020 <memset+0xa>
 800701e:	4770      	bx	lr
 8007020:	f803 1b01 	strb.w	r1, [r3], #1
 8007024:	e7f9      	b.n	800701a <memset+0x4>
	...

08007028 <_localeconv_r>:
 8007028:	4800      	ldr	r0, [pc, #0]	@ (800702c <_localeconv_r+0x4>)
 800702a:	4770      	bx	lr
 800702c:	20000178 	.word	0x20000178

08007030 <_close_r>:
 8007030:	b538      	push	{r3, r4, r5, lr}
 8007032:	2300      	movs	r3, #0
 8007034:	4d05      	ldr	r5, [pc, #20]	@ (800704c <_close_r+0x1c>)
 8007036:	4604      	mov	r4, r0
 8007038:	4608      	mov	r0, r1
 800703a:	602b      	str	r3, [r5, #0]
 800703c:	f7fa fb7f 	bl	800173e <_close>
 8007040:	1c43      	adds	r3, r0, #1
 8007042:	d102      	bne.n	800704a <_close_r+0x1a>
 8007044:	682b      	ldr	r3, [r5, #0]
 8007046:	b103      	cbz	r3, 800704a <_close_r+0x1a>
 8007048:	6023      	str	r3, [r4, #0]
 800704a:	bd38      	pop	{r3, r4, r5, pc}
 800704c:	20000458 	.word	0x20000458

08007050 <_lseek_r>:
 8007050:	b538      	push	{r3, r4, r5, lr}
 8007052:	4604      	mov	r4, r0
 8007054:	4608      	mov	r0, r1
 8007056:	4611      	mov	r1, r2
 8007058:	2200      	movs	r2, #0
 800705a:	4d05      	ldr	r5, [pc, #20]	@ (8007070 <_lseek_r+0x20>)
 800705c:	602a      	str	r2, [r5, #0]
 800705e:	461a      	mov	r2, r3
 8007060:	f7fa fb91 	bl	8001786 <_lseek>
 8007064:	1c43      	adds	r3, r0, #1
 8007066:	d102      	bne.n	800706e <_lseek_r+0x1e>
 8007068:	682b      	ldr	r3, [r5, #0]
 800706a:	b103      	cbz	r3, 800706e <_lseek_r+0x1e>
 800706c:	6023      	str	r3, [r4, #0]
 800706e:	bd38      	pop	{r3, r4, r5, pc}
 8007070:	20000458 	.word	0x20000458

08007074 <_read_r>:
 8007074:	b538      	push	{r3, r4, r5, lr}
 8007076:	4604      	mov	r4, r0
 8007078:	4608      	mov	r0, r1
 800707a:	4611      	mov	r1, r2
 800707c:	2200      	movs	r2, #0
 800707e:	4d05      	ldr	r5, [pc, #20]	@ (8007094 <_read_r+0x20>)
 8007080:	602a      	str	r2, [r5, #0]
 8007082:	461a      	mov	r2, r3
 8007084:	f7fa fb22 	bl	80016cc <_read>
 8007088:	1c43      	adds	r3, r0, #1
 800708a:	d102      	bne.n	8007092 <_read_r+0x1e>
 800708c:	682b      	ldr	r3, [r5, #0]
 800708e:	b103      	cbz	r3, 8007092 <_read_r+0x1e>
 8007090:	6023      	str	r3, [r4, #0]
 8007092:	bd38      	pop	{r3, r4, r5, pc}
 8007094:	20000458 	.word	0x20000458

08007098 <_write_r>:
 8007098:	b538      	push	{r3, r4, r5, lr}
 800709a:	4604      	mov	r4, r0
 800709c:	4608      	mov	r0, r1
 800709e:	4611      	mov	r1, r2
 80070a0:	2200      	movs	r2, #0
 80070a2:	4d05      	ldr	r5, [pc, #20]	@ (80070b8 <_write_r+0x20>)
 80070a4:	602a      	str	r2, [r5, #0]
 80070a6:	461a      	mov	r2, r3
 80070a8:	f7fa fb2d 	bl	8001706 <_write>
 80070ac:	1c43      	adds	r3, r0, #1
 80070ae:	d102      	bne.n	80070b6 <_write_r+0x1e>
 80070b0:	682b      	ldr	r3, [r5, #0]
 80070b2:	b103      	cbz	r3, 80070b6 <_write_r+0x1e>
 80070b4:	6023      	str	r3, [r4, #0]
 80070b6:	bd38      	pop	{r3, r4, r5, pc}
 80070b8:	20000458 	.word	0x20000458

080070bc <__errno>:
 80070bc:	4b01      	ldr	r3, [pc, #4]	@ (80070c4 <__errno+0x8>)
 80070be:	6818      	ldr	r0, [r3, #0]
 80070c0:	4770      	bx	lr
 80070c2:	bf00      	nop
 80070c4:	20000038 	.word	0x20000038

080070c8 <__libc_init_array>:
 80070c8:	b570      	push	{r4, r5, r6, lr}
 80070ca:	2600      	movs	r6, #0
 80070cc:	4d0c      	ldr	r5, [pc, #48]	@ (8007100 <__libc_init_array+0x38>)
 80070ce:	4c0d      	ldr	r4, [pc, #52]	@ (8007104 <__libc_init_array+0x3c>)
 80070d0:	1b64      	subs	r4, r4, r5
 80070d2:	10a4      	asrs	r4, r4, #2
 80070d4:	42a6      	cmp	r6, r4
 80070d6:	d109      	bne.n	80070ec <__libc_init_array+0x24>
 80070d8:	f002 f876 	bl	80091c8 <_init>
 80070dc:	2600      	movs	r6, #0
 80070de:	4d0a      	ldr	r5, [pc, #40]	@ (8007108 <__libc_init_array+0x40>)
 80070e0:	4c0a      	ldr	r4, [pc, #40]	@ (800710c <__libc_init_array+0x44>)
 80070e2:	1b64      	subs	r4, r4, r5
 80070e4:	10a4      	asrs	r4, r4, #2
 80070e6:	42a6      	cmp	r6, r4
 80070e8:	d105      	bne.n	80070f6 <__libc_init_array+0x2e>
 80070ea:	bd70      	pop	{r4, r5, r6, pc}
 80070ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80070f0:	4798      	blx	r3
 80070f2:	3601      	adds	r6, #1
 80070f4:	e7ee      	b.n	80070d4 <__libc_init_array+0xc>
 80070f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80070fa:	4798      	blx	r3
 80070fc:	3601      	adds	r6, #1
 80070fe:	e7f2      	b.n	80070e6 <__libc_init_array+0x1e>
 8007100:	0800963c 	.word	0x0800963c
 8007104:	0800963c 	.word	0x0800963c
 8007108:	0800963c 	.word	0x0800963c
 800710c:	08009640 	.word	0x08009640

08007110 <__retarget_lock_init_recursive>:
 8007110:	4770      	bx	lr

08007112 <__retarget_lock_acquire_recursive>:
 8007112:	4770      	bx	lr

08007114 <__retarget_lock_release_recursive>:
 8007114:	4770      	bx	lr

08007116 <memchr>:
 8007116:	4603      	mov	r3, r0
 8007118:	b510      	push	{r4, lr}
 800711a:	b2c9      	uxtb	r1, r1
 800711c:	4402      	add	r2, r0
 800711e:	4293      	cmp	r3, r2
 8007120:	4618      	mov	r0, r3
 8007122:	d101      	bne.n	8007128 <memchr+0x12>
 8007124:	2000      	movs	r0, #0
 8007126:	e003      	b.n	8007130 <memchr+0x1a>
 8007128:	7804      	ldrb	r4, [r0, #0]
 800712a:	3301      	adds	r3, #1
 800712c:	428c      	cmp	r4, r1
 800712e:	d1f6      	bne.n	800711e <memchr+0x8>
 8007130:	bd10      	pop	{r4, pc}

08007132 <quorem>:
 8007132:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007136:	6903      	ldr	r3, [r0, #16]
 8007138:	690c      	ldr	r4, [r1, #16]
 800713a:	4607      	mov	r7, r0
 800713c:	42a3      	cmp	r3, r4
 800713e:	db7e      	blt.n	800723e <quorem+0x10c>
 8007140:	3c01      	subs	r4, #1
 8007142:	00a3      	lsls	r3, r4, #2
 8007144:	f100 0514 	add.w	r5, r0, #20
 8007148:	f101 0814 	add.w	r8, r1, #20
 800714c:	9300      	str	r3, [sp, #0]
 800714e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007152:	9301      	str	r3, [sp, #4]
 8007154:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007158:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800715c:	3301      	adds	r3, #1
 800715e:	429a      	cmp	r2, r3
 8007160:	fbb2 f6f3 	udiv	r6, r2, r3
 8007164:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007168:	d32e      	bcc.n	80071c8 <quorem+0x96>
 800716a:	f04f 0a00 	mov.w	sl, #0
 800716e:	46c4      	mov	ip, r8
 8007170:	46ae      	mov	lr, r5
 8007172:	46d3      	mov	fp, sl
 8007174:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007178:	b298      	uxth	r0, r3
 800717a:	fb06 a000 	mla	r0, r6, r0, sl
 800717e:	0c1b      	lsrs	r3, r3, #16
 8007180:	0c02      	lsrs	r2, r0, #16
 8007182:	fb06 2303 	mla	r3, r6, r3, r2
 8007186:	f8de 2000 	ldr.w	r2, [lr]
 800718a:	b280      	uxth	r0, r0
 800718c:	b292      	uxth	r2, r2
 800718e:	1a12      	subs	r2, r2, r0
 8007190:	445a      	add	r2, fp
 8007192:	f8de 0000 	ldr.w	r0, [lr]
 8007196:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800719a:	b29b      	uxth	r3, r3
 800719c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80071a0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80071a4:	b292      	uxth	r2, r2
 80071a6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80071aa:	45e1      	cmp	r9, ip
 80071ac:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80071b0:	f84e 2b04 	str.w	r2, [lr], #4
 80071b4:	d2de      	bcs.n	8007174 <quorem+0x42>
 80071b6:	9b00      	ldr	r3, [sp, #0]
 80071b8:	58eb      	ldr	r3, [r5, r3]
 80071ba:	b92b      	cbnz	r3, 80071c8 <quorem+0x96>
 80071bc:	9b01      	ldr	r3, [sp, #4]
 80071be:	3b04      	subs	r3, #4
 80071c0:	429d      	cmp	r5, r3
 80071c2:	461a      	mov	r2, r3
 80071c4:	d32f      	bcc.n	8007226 <quorem+0xf4>
 80071c6:	613c      	str	r4, [r7, #16]
 80071c8:	4638      	mov	r0, r7
 80071ca:	f001 f981 	bl	80084d0 <__mcmp>
 80071ce:	2800      	cmp	r0, #0
 80071d0:	db25      	blt.n	800721e <quorem+0xec>
 80071d2:	4629      	mov	r1, r5
 80071d4:	2000      	movs	r0, #0
 80071d6:	f858 2b04 	ldr.w	r2, [r8], #4
 80071da:	f8d1 c000 	ldr.w	ip, [r1]
 80071de:	fa1f fe82 	uxth.w	lr, r2
 80071e2:	fa1f f38c 	uxth.w	r3, ip
 80071e6:	eba3 030e 	sub.w	r3, r3, lr
 80071ea:	4403      	add	r3, r0
 80071ec:	0c12      	lsrs	r2, r2, #16
 80071ee:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80071f2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071fc:	45c1      	cmp	r9, r8
 80071fe:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007202:	f841 3b04 	str.w	r3, [r1], #4
 8007206:	d2e6      	bcs.n	80071d6 <quorem+0xa4>
 8007208:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800720c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007210:	b922      	cbnz	r2, 800721c <quorem+0xea>
 8007212:	3b04      	subs	r3, #4
 8007214:	429d      	cmp	r5, r3
 8007216:	461a      	mov	r2, r3
 8007218:	d30b      	bcc.n	8007232 <quorem+0x100>
 800721a:	613c      	str	r4, [r7, #16]
 800721c:	3601      	adds	r6, #1
 800721e:	4630      	mov	r0, r6
 8007220:	b003      	add	sp, #12
 8007222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007226:	6812      	ldr	r2, [r2, #0]
 8007228:	3b04      	subs	r3, #4
 800722a:	2a00      	cmp	r2, #0
 800722c:	d1cb      	bne.n	80071c6 <quorem+0x94>
 800722e:	3c01      	subs	r4, #1
 8007230:	e7c6      	b.n	80071c0 <quorem+0x8e>
 8007232:	6812      	ldr	r2, [r2, #0]
 8007234:	3b04      	subs	r3, #4
 8007236:	2a00      	cmp	r2, #0
 8007238:	d1ef      	bne.n	800721a <quorem+0xe8>
 800723a:	3c01      	subs	r4, #1
 800723c:	e7ea      	b.n	8007214 <quorem+0xe2>
 800723e:	2000      	movs	r0, #0
 8007240:	e7ee      	b.n	8007220 <quorem+0xee>
 8007242:	0000      	movs	r0, r0
 8007244:	0000      	movs	r0, r0
	...

08007248 <_dtoa_r>:
 8007248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800724c:	4614      	mov	r4, r2
 800724e:	461d      	mov	r5, r3
 8007250:	69c7      	ldr	r7, [r0, #28]
 8007252:	b097      	sub	sp, #92	@ 0x5c
 8007254:	4681      	mov	r9, r0
 8007256:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800725a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800725c:	b97f      	cbnz	r7, 800727e <_dtoa_r+0x36>
 800725e:	2010      	movs	r0, #16
 8007260:	f000 fe0e 	bl	8007e80 <malloc>
 8007264:	4602      	mov	r2, r0
 8007266:	f8c9 001c 	str.w	r0, [r9, #28]
 800726a:	b920      	cbnz	r0, 8007276 <_dtoa_r+0x2e>
 800726c:	21ef      	movs	r1, #239	@ 0xef
 800726e:	4bac      	ldr	r3, [pc, #688]	@ (8007520 <_dtoa_r+0x2d8>)
 8007270:	48ac      	ldr	r0, [pc, #688]	@ (8007524 <_dtoa_r+0x2dc>)
 8007272:	f001 fc6d 	bl	8008b50 <__assert_func>
 8007276:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800727a:	6007      	str	r7, [r0, #0]
 800727c:	60c7      	str	r7, [r0, #12]
 800727e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007282:	6819      	ldr	r1, [r3, #0]
 8007284:	b159      	cbz	r1, 800729e <_dtoa_r+0x56>
 8007286:	685a      	ldr	r2, [r3, #4]
 8007288:	2301      	movs	r3, #1
 800728a:	4093      	lsls	r3, r2
 800728c:	604a      	str	r2, [r1, #4]
 800728e:	608b      	str	r3, [r1, #8]
 8007290:	4648      	mov	r0, r9
 8007292:	f000 feeb 	bl	800806c <_Bfree>
 8007296:	2200      	movs	r2, #0
 8007298:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800729c:	601a      	str	r2, [r3, #0]
 800729e:	1e2b      	subs	r3, r5, #0
 80072a0:	bfaf      	iteee	ge
 80072a2:	2300      	movge	r3, #0
 80072a4:	2201      	movlt	r2, #1
 80072a6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80072aa:	9307      	strlt	r3, [sp, #28]
 80072ac:	bfa8      	it	ge
 80072ae:	6033      	strge	r3, [r6, #0]
 80072b0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80072b4:	4b9c      	ldr	r3, [pc, #624]	@ (8007528 <_dtoa_r+0x2e0>)
 80072b6:	bfb8      	it	lt
 80072b8:	6032      	strlt	r2, [r6, #0]
 80072ba:	ea33 0308 	bics.w	r3, r3, r8
 80072be:	d112      	bne.n	80072e6 <_dtoa_r+0x9e>
 80072c0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80072c4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80072c6:	6013      	str	r3, [r2, #0]
 80072c8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80072cc:	4323      	orrs	r3, r4
 80072ce:	f000 855e 	beq.w	8007d8e <_dtoa_r+0xb46>
 80072d2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80072d4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800752c <_dtoa_r+0x2e4>
 80072d8:	2b00      	cmp	r3, #0
 80072da:	f000 8560 	beq.w	8007d9e <_dtoa_r+0xb56>
 80072de:	f10a 0303 	add.w	r3, sl, #3
 80072e2:	f000 bd5a 	b.w	8007d9a <_dtoa_r+0xb52>
 80072e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80072ea:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80072ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80072f2:	2200      	movs	r2, #0
 80072f4:	2300      	movs	r3, #0
 80072f6:	f7f9 fc0b 	bl	8000b10 <__aeabi_dcmpeq>
 80072fa:	4607      	mov	r7, r0
 80072fc:	b158      	cbz	r0, 8007316 <_dtoa_r+0xce>
 80072fe:	2301      	movs	r3, #1
 8007300:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007302:	6013      	str	r3, [r2, #0]
 8007304:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007306:	b113      	cbz	r3, 800730e <_dtoa_r+0xc6>
 8007308:	4b89      	ldr	r3, [pc, #548]	@ (8007530 <_dtoa_r+0x2e8>)
 800730a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800730c:	6013      	str	r3, [r2, #0]
 800730e:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8007534 <_dtoa_r+0x2ec>
 8007312:	f000 bd44 	b.w	8007d9e <_dtoa_r+0xb56>
 8007316:	ab14      	add	r3, sp, #80	@ 0x50
 8007318:	9301      	str	r3, [sp, #4]
 800731a:	ab15      	add	r3, sp, #84	@ 0x54
 800731c:	9300      	str	r3, [sp, #0]
 800731e:	4648      	mov	r0, r9
 8007320:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007324:	f001 f984 	bl	8008630 <__d2b>
 8007328:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800732c:	9003      	str	r0, [sp, #12]
 800732e:	2e00      	cmp	r6, #0
 8007330:	d078      	beq.n	8007424 <_dtoa_r+0x1dc>
 8007332:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007336:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007338:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800733c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007340:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007344:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007348:	9712      	str	r7, [sp, #72]	@ 0x48
 800734a:	4619      	mov	r1, r3
 800734c:	2200      	movs	r2, #0
 800734e:	4b7a      	ldr	r3, [pc, #488]	@ (8007538 <_dtoa_r+0x2f0>)
 8007350:	f7f8 ffbe 	bl	80002d0 <__aeabi_dsub>
 8007354:	a36c      	add	r3, pc, #432	@ (adr r3, 8007508 <_dtoa_r+0x2c0>)
 8007356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800735a:	f7f9 f971 	bl	8000640 <__aeabi_dmul>
 800735e:	a36c      	add	r3, pc, #432	@ (adr r3, 8007510 <_dtoa_r+0x2c8>)
 8007360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007364:	f7f8 ffb6 	bl	80002d4 <__adddf3>
 8007368:	4604      	mov	r4, r0
 800736a:	4630      	mov	r0, r6
 800736c:	460d      	mov	r5, r1
 800736e:	f7f9 f8fd 	bl	800056c <__aeabi_i2d>
 8007372:	a369      	add	r3, pc, #420	@ (adr r3, 8007518 <_dtoa_r+0x2d0>)
 8007374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007378:	f7f9 f962 	bl	8000640 <__aeabi_dmul>
 800737c:	4602      	mov	r2, r0
 800737e:	460b      	mov	r3, r1
 8007380:	4620      	mov	r0, r4
 8007382:	4629      	mov	r1, r5
 8007384:	f7f8 ffa6 	bl	80002d4 <__adddf3>
 8007388:	4604      	mov	r4, r0
 800738a:	460d      	mov	r5, r1
 800738c:	f7f9 fc08 	bl	8000ba0 <__aeabi_d2iz>
 8007390:	2200      	movs	r2, #0
 8007392:	4607      	mov	r7, r0
 8007394:	2300      	movs	r3, #0
 8007396:	4620      	mov	r0, r4
 8007398:	4629      	mov	r1, r5
 800739a:	f7f9 fbc3 	bl	8000b24 <__aeabi_dcmplt>
 800739e:	b140      	cbz	r0, 80073b2 <_dtoa_r+0x16a>
 80073a0:	4638      	mov	r0, r7
 80073a2:	f7f9 f8e3 	bl	800056c <__aeabi_i2d>
 80073a6:	4622      	mov	r2, r4
 80073a8:	462b      	mov	r3, r5
 80073aa:	f7f9 fbb1 	bl	8000b10 <__aeabi_dcmpeq>
 80073ae:	b900      	cbnz	r0, 80073b2 <_dtoa_r+0x16a>
 80073b0:	3f01      	subs	r7, #1
 80073b2:	2f16      	cmp	r7, #22
 80073b4:	d854      	bhi.n	8007460 <_dtoa_r+0x218>
 80073b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80073ba:	4b60      	ldr	r3, [pc, #384]	@ (800753c <_dtoa_r+0x2f4>)
 80073bc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80073c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c4:	f7f9 fbae 	bl	8000b24 <__aeabi_dcmplt>
 80073c8:	2800      	cmp	r0, #0
 80073ca:	d04b      	beq.n	8007464 <_dtoa_r+0x21c>
 80073cc:	2300      	movs	r3, #0
 80073ce:	3f01      	subs	r7, #1
 80073d0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80073d2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80073d4:	1b9b      	subs	r3, r3, r6
 80073d6:	1e5a      	subs	r2, r3, #1
 80073d8:	bf49      	itett	mi
 80073da:	f1c3 0301 	rsbmi	r3, r3, #1
 80073de:	2300      	movpl	r3, #0
 80073e0:	9304      	strmi	r3, [sp, #16]
 80073e2:	2300      	movmi	r3, #0
 80073e4:	9209      	str	r2, [sp, #36]	@ 0x24
 80073e6:	bf54      	ite	pl
 80073e8:	9304      	strpl	r3, [sp, #16]
 80073ea:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80073ec:	2f00      	cmp	r7, #0
 80073ee:	db3b      	blt.n	8007468 <_dtoa_r+0x220>
 80073f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073f2:	970e      	str	r7, [sp, #56]	@ 0x38
 80073f4:	443b      	add	r3, r7
 80073f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80073f8:	2300      	movs	r3, #0
 80073fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80073fc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80073fe:	2b09      	cmp	r3, #9
 8007400:	d865      	bhi.n	80074ce <_dtoa_r+0x286>
 8007402:	2b05      	cmp	r3, #5
 8007404:	bfc4      	itt	gt
 8007406:	3b04      	subgt	r3, #4
 8007408:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800740a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800740c:	bfc8      	it	gt
 800740e:	2400      	movgt	r4, #0
 8007410:	f1a3 0302 	sub.w	r3, r3, #2
 8007414:	bfd8      	it	le
 8007416:	2401      	movle	r4, #1
 8007418:	2b03      	cmp	r3, #3
 800741a:	d864      	bhi.n	80074e6 <_dtoa_r+0x29e>
 800741c:	e8df f003 	tbb	[pc, r3]
 8007420:	2c385553 	.word	0x2c385553
 8007424:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007428:	441e      	add	r6, r3
 800742a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800742e:	2b20      	cmp	r3, #32
 8007430:	bfc1      	itttt	gt
 8007432:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007436:	fa08 f803 	lslgt.w	r8, r8, r3
 800743a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800743e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007442:	bfd6      	itet	le
 8007444:	f1c3 0320 	rsble	r3, r3, #32
 8007448:	ea48 0003 	orrgt.w	r0, r8, r3
 800744c:	fa04 f003 	lslle.w	r0, r4, r3
 8007450:	f7f9 f87c 	bl	800054c <__aeabi_ui2d>
 8007454:	2201      	movs	r2, #1
 8007456:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800745a:	3e01      	subs	r6, #1
 800745c:	9212      	str	r2, [sp, #72]	@ 0x48
 800745e:	e774      	b.n	800734a <_dtoa_r+0x102>
 8007460:	2301      	movs	r3, #1
 8007462:	e7b5      	b.n	80073d0 <_dtoa_r+0x188>
 8007464:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007466:	e7b4      	b.n	80073d2 <_dtoa_r+0x18a>
 8007468:	9b04      	ldr	r3, [sp, #16]
 800746a:	1bdb      	subs	r3, r3, r7
 800746c:	9304      	str	r3, [sp, #16]
 800746e:	427b      	negs	r3, r7
 8007470:	930a      	str	r3, [sp, #40]	@ 0x28
 8007472:	2300      	movs	r3, #0
 8007474:	930e      	str	r3, [sp, #56]	@ 0x38
 8007476:	e7c1      	b.n	80073fc <_dtoa_r+0x1b4>
 8007478:	2301      	movs	r3, #1
 800747a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800747c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800747e:	eb07 0b03 	add.w	fp, r7, r3
 8007482:	f10b 0301 	add.w	r3, fp, #1
 8007486:	2b01      	cmp	r3, #1
 8007488:	9308      	str	r3, [sp, #32]
 800748a:	bfb8      	it	lt
 800748c:	2301      	movlt	r3, #1
 800748e:	e006      	b.n	800749e <_dtoa_r+0x256>
 8007490:	2301      	movs	r3, #1
 8007492:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007494:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007496:	2b00      	cmp	r3, #0
 8007498:	dd28      	ble.n	80074ec <_dtoa_r+0x2a4>
 800749a:	469b      	mov	fp, r3
 800749c:	9308      	str	r3, [sp, #32]
 800749e:	2100      	movs	r1, #0
 80074a0:	2204      	movs	r2, #4
 80074a2:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80074a6:	f102 0514 	add.w	r5, r2, #20
 80074aa:	429d      	cmp	r5, r3
 80074ac:	d926      	bls.n	80074fc <_dtoa_r+0x2b4>
 80074ae:	6041      	str	r1, [r0, #4]
 80074b0:	4648      	mov	r0, r9
 80074b2:	f000 fd9b 	bl	8007fec <_Balloc>
 80074b6:	4682      	mov	sl, r0
 80074b8:	2800      	cmp	r0, #0
 80074ba:	d143      	bne.n	8007544 <_dtoa_r+0x2fc>
 80074bc:	4602      	mov	r2, r0
 80074be:	f240 11af 	movw	r1, #431	@ 0x1af
 80074c2:	4b1f      	ldr	r3, [pc, #124]	@ (8007540 <_dtoa_r+0x2f8>)
 80074c4:	e6d4      	b.n	8007270 <_dtoa_r+0x28>
 80074c6:	2300      	movs	r3, #0
 80074c8:	e7e3      	b.n	8007492 <_dtoa_r+0x24a>
 80074ca:	2300      	movs	r3, #0
 80074cc:	e7d5      	b.n	800747a <_dtoa_r+0x232>
 80074ce:	2401      	movs	r4, #1
 80074d0:	2300      	movs	r3, #0
 80074d2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80074d4:	9320      	str	r3, [sp, #128]	@ 0x80
 80074d6:	f04f 3bff 	mov.w	fp, #4294967295
 80074da:	2200      	movs	r2, #0
 80074dc:	2312      	movs	r3, #18
 80074de:	f8cd b020 	str.w	fp, [sp, #32]
 80074e2:	9221      	str	r2, [sp, #132]	@ 0x84
 80074e4:	e7db      	b.n	800749e <_dtoa_r+0x256>
 80074e6:	2301      	movs	r3, #1
 80074e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80074ea:	e7f4      	b.n	80074d6 <_dtoa_r+0x28e>
 80074ec:	f04f 0b01 	mov.w	fp, #1
 80074f0:	465b      	mov	r3, fp
 80074f2:	f8cd b020 	str.w	fp, [sp, #32]
 80074f6:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 80074fa:	e7d0      	b.n	800749e <_dtoa_r+0x256>
 80074fc:	3101      	adds	r1, #1
 80074fe:	0052      	lsls	r2, r2, #1
 8007500:	e7d1      	b.n	80074a6 <_dtoa_r+0x25e>
 8007502:	bf00      	nop
 8007504:	f3af 8000 	nop.w
 8007508:	636f4361 	.word	0x636f4361
 800750c:	3fd287a7 	.word	0x3fd287a7
 8007510:	8b60c8b3 	.word	0x8b60c8b3
 8007514:	3fc68a28 	.word	0x3fc68a28
 8007518:	509f79fb 	.word	0x509f79fb
 800751c:	3fd34413 	.word	0x3fd34413
 8007520:	08009303 	.word	0x08009303
 8007524:	0800931a 	.word	0x0800931a
 8007528:	7ff00000 	.word	0x7ff00000
 800752c:	080092ff 	.word	0x080092ff
 8007530:	080092d3 	.word	0x080092d3
 8007534:	080092d2 	.word	0x080092d2
 8007538:	3ff80000 	.word	0x3ff80000
 800753c:	08009468 	.word	0x08009468
 8007540:	08009372 	.word	0x08009372
 8007544:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007548:	6018      	str	r0, [r3, #0]
 800754a:	9b08      	ldr	r3, [sp, #32]
 800754c:	2b0e      	cmp	r3, #14
 800754e:	f200 80a1 	bhi.w	8007694 <_dtoa_r+0x44c>
 8007552:	2c00      	cmp	r4, #0
 8007554:	f000 809e 	beq.w	8007694 <_dtoa_r+0x44c>
 8007558:	2f00      	cmp	r7, #0
 800755a:	dd33      	ble.n	80075c4 <_dtoa_r+0x37c>
 800755c:	4b9c      	ldr	r3, [pc, #624]	@ (80077d0 <_dtoa_r+0x588>)
 800755e:	f007 020f 	and.w	r2, r7, #15
 8007562:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007566:	05f8      	lsls	r0, r7, #23
 8007568:	e9d3 3400 	ldrd	r3, r4, [r3]
 800756c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8007570:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007574:	d516      	bpl.n	80075a4 <_dtoa_r+0x35c>
 8007576:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800757a:	4b96      	ldr	r3, [pc, #600]	@ (80077d4 <_dtoa_r+0x58c>)
 800757c:	2603      	movs	r6, #3
 800757e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007582:	f7f9 f987 	bl	8000894 <__aeabi_ddiv>
 8007586:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800758a:	f004 040f 	and.w	r4, r4, #15
 800758e:	4d91      	ldr	r5, [pc, #580]	@ (80077d4 <_dtoa_r+0x58c>)
 8007590:	b954      	cbnz	r4, 80075a8 <_dtoa_r+0x360>
 8007592:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007596:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800759a:	f7f9 f97b 	bl	8000894 <__aeabi_ddiv>
 800759e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80075a2:	e028      	b.n	80075f6 <_dtoa_r+0x3ae>
 80075a4:	2602      	movs	r6, #2
 80075a6:	e7f2      	b.n	800758e <_dtoa_r+0x346>
 80075a8:	07e1      	lsls	r1, r4, #31
 80075aa:	d508      	bpl.n	80075be <_dtoa_r+0x376>
 80075ac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80075b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80075b4:	f7f9 f844 	bl	8000640 <__aeabi_dmul>
 80075b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80075bc:	3601      	adds	r6, #1
 80075be:	1064      	asrs	r4, r4, #1
 80075c0:	3508      	adds	r5, #8
 80075c2:	e7e5      	b.n	8007590 <_dtoa_r+0x348>
 80075c4:	f000 80af 	beq.w	8007726 <_dtoa_r+0x4de>
 80075c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80075cc:	427c      	negs	r4, r7
 80075ce:	4b80      	ldr	r3, [pc, #512]	@ (80077d0 <_dtoa_r+0x588>)
 80075d0:	f004 020f 	and.w	r2, r4, #15
 80075d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075dc:	f7f9 f830 	bl	8000640 <__aeabi_dmul>
 80075e0:	2602      	movs	r6, #2
 80075e2:	2300      	movs	r3, #0
 80075e4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80075e8:	4d7a      	ldr	r5, [pc, #488]	@ (80077d4 <_dtoa_r+0x58c>)
 80075ea:	1124      	asrs	r4, r4, #4
 80075ec:	2c00      	cmp	r4, #0
 80075ee:	f040 808f 	bne.w	8007710 <_dtoa_r+0x4c8>
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d1d3      	bne.n	800759e <_dtoa_r+0x356>
 80075f6:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80075fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	f000 8094 	beq.w	800772a <_dtoa_r+0x4e2>
 8007602:	2200      	movs	r2, #0
 8007604:	4620      	mov	r0, r4
 8007606:	4629      	mov	r1, r5
 8007608:	4b73      	ldr	r3, [pc, #460]	@ (80077d8 <_dtoa_r+0x590>)
 800760a:	f7f9 fa8b 	bl	8000b24 <__aeabi_dcmplt>
 800760e:	2800      	cmp	r0, #0
 8007610:	f000 808b 	beq.w	800772a <_dtoa_r+0x4e2>
 8007614:	9b08      	ldr	r3, [sp, #32]
 8007616:	2b00      	cmp	r3, #0
 8007618:	f000 8087 	beq.w	800772a <_dtoa_r+0x4e2>
 800761c:	f1bb 0f00 	cmp.w	fp, #0
 8007620:	dd34      	ble.n	800768c <_dtoa_r+0x444>
 8007622:	4620      	mov	r0, r4
 8007624:	2200      	movs	r2, #0
 8007626:	4629      	mov	r1, r5
 8007628:	4b6c      	ldr	r3, [pc, #432]	@ (80077dc <_dtoa_r+0x594>)
 800762a:	f7f9 f809 	bl	8000640 <__aeabi_dmul>
 800762e:	465c      	mov	r4, fp
 8007630:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007634:	f107 38ff 	add.w	r8, r7, #4294967295
 8007638:	3601      	adds	r6, #1
 800763a:	4630      	mov	r0, r6
 800763c:	f7f8 ff96 	bl	800056c <__aeabi_i2d>
 8007640:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007644:	f7f8 fffc 	bl	8000640 <__aeabi_dmul>
 8007648:	2200      	movs	r2, #0
 800764a:	4b65      	ldr	r3, [pc, #404]	@ (80077e0 <_dtoa_r+0x598>)
 800764c:	f7f8 fe42 	bl	80002d4 <__adddf3>
 8007650:	4605      	mov	r5, r0
 8007652:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007656:	2c00      	cmp	r4, #0
 8007658:	d16a      	bne.n	8007730 <_dtoa_r+0x4e8>
 800765a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800765e:	2200      	movs	r2, #0
 8007660:	4b60      	ldr	r3, [pc, #384]	@ (80077e4 <_dtoa_r+0x59c>)
 8007662:	f7f8 fe35 	bl	80002d0 <__aeabi_dsub>
 8007666:	4602      	mov	r2, r0
 8007668:	460b      	mov	r3, r1
 800766a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800766e:	462a      	mov	r2, r5
 8007670:	4633      	mov	r3, r6
 8007672:	f7f9 fa75 	bl	8000b60 <__aeabi_dcmpgt>
 8007676:	2800      	cmp	r0, #0
 8007678:	f040 8298 	bne.w	8007bac <_dtoa_r+0x964>
 800767c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007680:	462a      	mov	r2, r5
 8007682:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007686:	f7f9 fa4d 	bl	8000b24 <__aeabi_dcmplt>
 800768a:	bb38      	cbnz	r0, 80076dc <_dtoa_r+0x494>
 800768c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007690:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007694:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007696:	2b00      	cmp	r3, #0
 8007698:	f2c0 8157 	blt.w	800794a <_dtoa_r+0x702>
 800769c:	2f0e      	cmp	r7, #14
 800769e:	f300 8154 	bgt.w	800794a <_dtoa_r+0x702>
 80076a2:	4b4b      	ldr	r3, [pc, #300]	@ (80077d0 <_dtoa_r+0x588>)
 80076a4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80076a8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80076ac:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80076b0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	f280 80e5 	bge.w	8007882 <_dtoa_r+0x63a>
 80076b8:	9b08      	ldr	r3, [sp, #32]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	f300 80e1 	bgt.w	8007882 <_dtoa_r+0x63a>
 80076c0:	d10c      	bne.n	80076dc <_dtoa_r+0x494>
 80076c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076c6:	2200      	movs	r2, #0
 80076c8:	4b46      	ldr	r3, [pc, #280]	@ (80077e4 <_dtoa_r+0x59c>)
 80076ca:	f7f8 ffb9 	bl	8000640 <__aeabi_dmul>
 80076ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80076d2:	f7f9 fa3b 	bl	8000b4c <__aeabi_dcmpge>
 80076d6:	2800      	cmp	r0, #0
 80076d8:	f000 8266 	beq.w	8007ba8 <_dtoa_r+0x960>
 80076dc:	2400      	movs	r4, #0
 80076de:	4625      	mov	r5, r4
 80076e0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80076e2:	4656      	mov	r6, sl
 80076e4:	ea6f 0803 	mvn.w	r8, r3
 80076e8:	2700      	movs	r7, #0
 80076ea:	4621      	mov	r1, r4
 80076ec:	4648      	mov	r0, r9
 80076ee:	f000 fcbd 	bl	800806c <_Bfree>
 80076f2:	2d00      	cmp	r5, #0
 80076f4:	f000 80bd 	beq.w	8007872 <_dtoa_r+0x62a>
 80076f8:	b12f      	cbz	r7, 8007706 <_dtoa_r+0x4be>
 80076fa:	42af      	cmp	r7, r5
 80076fc:	d003      	beq.n	8007706 <_dtoa_r+0x4be>
 80076fe:	4639      	mov	r1, r7
 8007700:	4648      	mov	r0, r9
 8007702:	f000 fcb3 	bl	800806c <_Bfree>
 8007706:	4629      	mov	r1, r5
 8007708:	4648      	mov	r0, r9
 800770a:	f000 fcaf 	bl	800806c <_Bfree>
 800770e:	e0b0      	b.n	8007872 <_dtoa_r+0x62a>
 8007710:	07e2      	lsls	r2, r4, #31
 8007712:	d505      	bpl.n	8007720 <_dtoa_r+0x4d8>
 8007714:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007718:	f7f8 ff92 	bl	8000640 <__aeabi_dmul>
 800771c:	2301      	movs	r3, #1
 800771e:	3601      	adds	r6, #1
 8007720:	1064      	asrs	r4, r4, #1
 8007722:	3508      	adds	r5, #8
 8007724:	e762      	b.n	80075ec <_dtoa_r+0x3a4>
 8007726:	2602      	movs	r6, #2
 8007728:	e765      	b.n	80075f6 <_dtoa_r+0x3ae>
 800772a:	46b8      	mov	r8, r7
 800772c:	9c08      	ldr	r4, [sp, #32]
 800772e:	e784      	b.n	800763a <_dtoa_r+0x3f2>
 8007730:	4b27      	ldr	r3, [pc, #156]	@ (80077d0 <_dtoa_r+0x588>)
 8007732:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007734:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007738:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800773c:	4454      	add	r4, sl
 800773e:	2900      	cmp	r1, #0
 8007740:	d054      	beq.n	80077ec <_dtoa_r+0x5a4>
 8007742:	2000      	movs	r0, #0
 8007744:	4928      	ldr	r1, [pc, #160]	@ (80077e8 <_dtoa_r+0x5a0>)
 8007746:	f7f9 f8a5 	bl	8000894 <__aeabi_ddiv>
 800774a:	4633      	mov	r3, r6
 800774c:	462a      	mov	r2, r5
 800774e:	f7f8 fdbf 	bl	80002d0 <__aeabi_dsub>
 8007752:	4656      	mov	r6, sl
 8007754:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007758:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800775c:	f7f9 fa20 	bl	8000ba0 <__aeabi_d2iz>
 8007760:	4605      	mov	r5, r0
 8007762:	f7f8 ff03 	bl	800056c <__aeabi_i2d>
 8007766:	4602      	mov	r2, r0
 8007768:	460b      	mov	r3, r1
 800776a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800776e:	f7f8 fdaf 	bl	80002d0 <__aeabi_dsub>
 8007772:	4602      	mov	r2, r0
 8007774:	460b      	mov	r3, r1
 8007776:	3530      	adds	r5, #48	@ 0x30
 8007778:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800777c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007780:	f806 5b01 	strb.w	r5, [r6], #1
 8007784:	f7f9 f9ce 	bl	8000b24 <__aeabi_dcmplt>
 8007788:	2800      	cmp	r0, #0
 800778a:	d172      	bne.n	8007872 <_dtoa_r+0x62a>
 800778c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007790:	2000      	movs	r0, #0
 8007792:	4911      	ldr	r1, [pc, #68]	@ (80077d8 <_dtoa_r+0x590>)
 8007794:	f7f8 fd9c 	bl	80002d0 <__aeabi_dsub>
 8007798:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800779c:	f7f9 f9c2 	bl	8000b24 <__aeabi_dcmplt>
 80077a0:	2800      	cmp	r0, #0
 80077a2:	f040 80b4 	bne.w	800790e <_dtoa_r+0x6c6>
 80077a6:	42a6      	cmp	r6, r4
 80077a8:	f43f af70 	beq.w	800768c <_dtoa_r+0x444>
 80077ac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80077b0:	2200      	movs	r2, #0
 80077b2:	4b0a      	ldr	r3, [pc, #40]	@ (80077dc <_dtoa_r+0x594>)
 80077b4:	f7f8 ff44 	bl	8000640 <__aeabi_dmul>
 80077b8:	2200      	movs	r2, #0
 80077ba:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80077be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80077c2:	4b06      	ldr	r3, [pc, #24]	@ (80077dc <_dtoa_r+0x594>)
 80077c4:	f7f8 ff3c 	bl	8000640 <__aeabi_dmul>
 80077c8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80077cc:	e7c4      	b.n	8007758 <_dtoa_r+0x510>
 80077ce:	bf00      	nop
 80077d0:	08009468 	.word	0x08009468
 80077d4:	08009440 	.word	0x08009440
 80077d8:	3ff00000 	.word	0x3ff00000
 80077dc:	40240000 	.word	0x40240000
 80077e0:	401c0000 	.word	0x401c0000
 80077e4:	40140000 	.word	0x40140000
 80077e8:	3fe00000 	.word	0x3fe00000
 80077ec:	4631      	mov	r1, r6
 80077ee:	4628      	mov	r0, r5
 80077f0:	f7f8 ff26 	bl	8000640 <__aeabi_dmul>
 80077f4:	4656      	mov	r6, sl
 80077f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80077fa:	9413      	str	r4, [sp, #76]	@ 0x4c
 80077fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007800:	f7f9 f9ce 	bl	8000ba0 <__aeabi_d2iz>
 8007804:	4605      	mov	r5, r0
 8007806:	f7f8 feb1 	bl	800056c <__aeabi_i2d>
 800780a:	4602      	mov	r2, r0
 800780c:	460b      	mov	r3, r1
 800780e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007812:	f7f8 fd5d 	bl	80002d0 <__aeabi_dsub>
 8007816:	4602      	mov	r2, r0
 8007818:	460b      	mov	r3, r1
 800781a:	3530      	adds	r5, #48	@ 0x30
 800781c:	f806 5b01 	strb.w	r5, [r6], #1
 8007820:	42a6      	cmp	r6, r4
 8007822:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007826:	f04f 0200 	mov.w	r2, #0
 800782a:	d124      	bne.n	8007876 <_dtoa_r+0x62e>
 800782c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007830:	4bae      	ldr	r3, [pc, #696]	@ (8007aec <_dtoa_r+0x8a4>)
 8007832:	f7f8 fd4f 	bl	80002d4 <__adddf3>
 8007836:	4602      	mov	r2, r0
 8007838:	460b      	mov	r3, r1
 800783a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800783e:	f7f9 f98f 	bl	8000b60 <__aeabi_dcmpgt>
 8007842:	2800      	cmp	r0, #0
 8007844:	d163      	bne.n	800790e <_dtoa_r+0x6c6>
 8007846:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800784a:	2000      	movs	r0, #0
 800784c:	49a7      	ldr	r1, [pc, #668]	@ (8007aec <_dtoa_r+0x8a4>)
 800784e:	f7f8 fd3f 	bl	80002d0 <__aeabi_dsub>
 8007852:	4602      	mov	r2, r0
 8007854:	460b      	mov	r3, r1
 8007856:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800785a:	f7f9 f963 	bl	8000b24 <__aeabi_dcmplt>
 800785e:	2800      	cmp	r0, #0
 8007860:	f43f af14 	beq.w	800768c <_dtoa_r+0x444>
 8007864:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007866:	1e73      	subs	r3, r6, #1
 8007868:	9313      	str	r3, [sp, #76]	@ 0x4c
 800786a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800786e:	2b30      	cmp	r3, #48	@ 0x30
 8007870:	d0f8      	beq.n	8007864 <_dtoa_r+0x61c>
 8007872:	4647      	mov	r7, r8
 8007874:	e03b      	b.n	80078ee <_dtoa_r+0x6a6>
 8007876:	4b9e      	ldr	r3, [pc, #632]	@ (8007af0 <_dtoa_r+0x8a8>)
 8007878:	f7f8 fee2 	bl	8000640 <__aeabi_dmul>
 800787c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007880:	e7bc      	b.n	80077fc <_dtoa_r+0x5b4>
 8007882:	4656      	mov	r6, sl
 8007884:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8007888:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800788c:	4620      	mov	r0, r4
 800788e:	4629      	mov	r1, r5
 8007890:	f7f9 f800 	bl	8000894 <__aeabi_ddiv>
 8007894:	f7f9 f984 	bl	8000ba0 <__aeabi_d2iz>
 8007898:	4680      	mov	r8, r0
 800789a:	f7f8 fe67 	bl	800056c <__aeabi_i2d>
 800789e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078a2:	f7f8 fecd 	bl	8000640 <__aeabi_dmul>
 80078a6:	4602      	mov	r2, r0
 80078a8:	460b      	mov	r3, r1
 80078aa:	4620      	mov	r0, r4
 80078ac:	4629      	mov	r1, r5
 80078ae:	f7f8 fd0f 	bl	80002d0 <__aeabi_dsub>
 80078b2:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80078b6:	9d08      	ldr	r5, [sp, #32]
 80078b8:	f806 4b01 	strb.w	r4, [r6], #1
 80078bc:	eba6 040a 	sub.w	r4, r6, sl
 80078c0:	42a5      	cmp	r5, r4
 80078c2:	4602      	mov	r2, r0
 80078c4:	460b      	mov	r3, r1
 80078c6:	d133      	bne.n	8007930 <_dtoa_r+0x6e8>
 80078c8:	f7f8 fd04 	bl	80002d4 <__adddf3>
 80078cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078d0:	4604      	mov	r4, r0
 80078d2:	460d      	mov	r5, r1
 80078d4:	f7f9 f944 	bl	8000b60 <__aeabi_dcmpgt>
 80078d8:	b9c0      	cbnz	r0, 800790c <_dtoa_r+0x6c4>
 80078da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078de:	4620      	mov	r0, r4
 80078e0:	4629      	mov	r1, r5
 80078e2:	f7f9 f915 	bl	8000b10 <__aeabi_dcmpeq>
 80078e6:	b110      	cbz	r0, 80078ee <_dtoa_r+0x6a6>
 80078e8:	f018 0f01 	tst.w	r8, #1
 80078ec:	d10e      	bne.n	800790c <_dtoa_r+0x6c4>
 80078ee:	4648      	mov	r0, r9
 80078f0:	9903      	ldr	r1, [sp, #12]
 80078f2:	f000 fbbb 	bl	800806c <_Bfree>
 80078f6:	2300      	movs	r3, #0
 80078f8:	7033      	strb	r3, [r6, #0]
 80078fa:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80078fc:	3701      	adds	r7, #1
 80078fe:	601f      	str	r7, [r3, #0]
 8007900:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007902:	2b00      	cmp	r3, #0
 8007904:	f000 824b 	beq.w	8007d9e <_dtoa_r+0xb56>
 8007908:	601e      	str	r6, [r3, #0]
 800790a:	e248      	b.n	8007d9e <_dtoa_r+0xb56>
 800790c:	46b8      	mov	r8, r7
 800790e:	4633      	mov	r3, r6
 8007910:	461e      	mov	r6, r3
 8007912:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007916:	2a39      	cmp	r2, #57	@ 0x39
 8007918:	d106      	bne.n	8007928 <_dtoa_r+0x6e0>
 800791a:	459a      	cmp	sl, r3
 800791c:	d1f8      	bne.n	8007910 <_dtoa_r+0x6c8>
 800791e:	2230      	movs	r2, #48	@ 0x30
 8007920:	f108 0801 	add.w	r8, r8, #1
 8007924:	f88a 2000 	strb.w	r2, [sl]
 8007928:	781a      	ldrb	r2, [r3, #0]
 800792a:	3201      	adds	r2, #1
 800792c:	701a      	strb	r2, [r3, #0]
 800792e:	e7a0      	b.n	8007872 <_dtoa_r+0x62a>
 8007930:	2200      	movs	r2, #0
 8007932:	4b6f      	ldr	r3, [pc, #444]	@ (8007af0 <_dtoa_r+0x8a8>)
 8007934:	f7f8 fe84 	bl	8000640 <__aeabi_dmul>
 8007938:	2200      	movs	r2, #0
 800793a:	2300      	movs	r3, #0
 800793c:	4604      	mov	r4, r0
 800793e:	460d      	mov	r5, r1
 8007940:	f7f9 f8e6 	bl	8000b10 <__aeabi_dcmpeq>
 8007944:	2800      	cmp	r0, #0
 8007946:	d09f      	beq.n	8007888 <_dtoa_r+0x640>
 8007948:	e7d1      	b.n	80078ee <_dtoa_r+0x6a6>
 800794a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800794c:	2a00      	cmp	r2, #0
 800794e:	f000 80ea 	beq.w	8007b26 <_dtoa_r+0x8de>
 8007952:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007954:	2a01      	cmp	r2, #1
 8007956:	f300 80cd 	bgt.w	8007af4 <_dtoa_r+0x8ac>
 800795a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800795c:	2a00      	cmp	r2, #0
 800795e:	f000 80c1 	beq.w	8007ae4 <_dtoa_r+0x89c>
 8007962:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007966:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007968:	9e04      	ldr	r6, [sp, #16]
 800796a:	9a04      	ldr	r2, [sp, #16]
 800796c:	2101      	movs	r1, #1
 800796e:	441a      	add	r2, r3
 8007970:	9204      	str	r2, [sp, #16]
 8007972:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007974:	4648      	mov	r0, r9
 8007976:	441a      	add	r2, r3
 8007978:	9209      	str	r2, [sp, #36]	@ 0x24
 800797a:	f000 fc2b 	bl	80081d4 <__i2b>
 800797e:	4605      	mov	r5, r0
 8007980:	b166      	cbz	r6, 800799c <_dtoa_r+0x754>
 8007982:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007984:	2b00      	cmp	r3, #0
 8007986:	dd09      	ble.n	800799c <_dtoa_r+0x754>
 8007988:	42b3      	cmp	r3, r6
 800798a:	bfa8      	it	ge
 800798c:	4633      	movge	r3, r6
 800798e:	9a04      	ldr	r2, [sp, #16]
 8007990:	1af6      	subs	r6, r6, r3
 8007992:	1ad2      	subs	r2, r2, r3
 8007994:	9204      	str	r2, [sp, #16]
 8007996:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007998:	1ad3      	subs	r3, r2, r3
 800799a:	9309      	str	r3, [sp, #36]	@ 0x24
 800799c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800799e:	b30b      	cbz	r3, 80079e4 <_dtoa_r+0x79c>
 80079a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	f000 80c6 	beq.w	8007b34 <_dtoa_r+0x8ec>
 80079a8:	2c00      	cmp	r4, #0
 80079aa:	f000 80c0 	beq.w	8007b2e <_dtoa_r+0x8e6>
 80079ae:	4629      	mov	r1, r5
 80079b0:	4622      	mov	r2, r4
 80079b2:	4648      	mov	r0, r9
 80079b4:	f000 fcc6 	bl	8008344 <__pow5mult>
 80079b8:	9a03      	ldr	r2, [sp, #12]
 80079ba:	4601      	mov	r1, r0
 80079bc:	4605      	mov	r5, r0
 80079be:	4648      	mov	r0, r9
 80079c0:	f000 fc1e 	bl	8008200 <__multiply>
 80079c4:	9903      	ldr	r1, [sp, #12]
 80079c6:	4680      	mov	r8, r0
 80079c8:	4648      	mov	r0, r9
 80079ca:	f000 fb4f 	bl	800806c <_Bfree>
 80079ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079d0:	1b1b      	subs	r3, r3, r4
 80079d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80079d4:	f000 80b1 	beq.w	8007b3a <_dtoa_r+0x8f2>
 80079d8:	4641      	mov	r1, r8
 80079da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80079dc:	4648      	mov	r0, r9
 80079de:	f000 fcb1 	bl	8008344 <__pow5mult>
 80079e2:	9003      	str	r0, [sp, #12]
 80079e4:	2101      	movs	r1, #1
 80079e6:	4648      	mov	r0, r9
 80079e8:	f000 fbf4 	bl	80081d4 <__i2b>
 80079ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80079ee:	4604      	mov	r4, r0
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	f000 81d8 	beq.w	8007da6 <_dtoa_r+0xb5e>
 80079f6:	461a      	mov	r2, r3
 80079f8:	4601      	mov	r1, r0
 80079fa:	4648      	mov	r0, r9
 80079fc:	f000 fca2 	bl	8008344 <__pow5mult>
 8007a00:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007a02:	4604      	mov	r4, r0
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	f300 809f 	bgt.w	8007b48 <_dtoa_r+0x900>
 8007a0a:	9b06      	ldr	r3, [sp, #24]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	f040 8097 	bne.w	8007b40 <_dtoa_r+0x8f8>
 8007a12:	9b07      	ldr	r3, [sp, #28]
 8007a14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	f040 8093 	bne.w	8007b44 <_dtoa_r+0x8fc>
 8007a1e:	9b07      	ldr	r3, [sp, #28]
 8007a20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007a24:	0d1b      	lsrs	r3, r3, #20
 8007a26:	051b      	lsls	r3, r3, #20
 8007a28:	b133      	cbz	r3, 8007a38 <_dtoa_r+0x7f0>
 8007a2a:	9b04      	ldr	r3, [sp, #16]
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	9304      	str	r3, [sp, #16]
 8007a30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a32:	3301      	adds	r3, #1
 8007a34:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a36:	2301      	movs	r3, #1
 8007a38:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	f000 81b8 	beq.w	8007db2 <_dtoa_r+0xb6a>
 8007a42:	6923      	ldr	r3, [r4, #16]
 8007a44:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007a48:	6918      	ldr	r0, [r3, #16]
 8007a4a:	f000 fb77 	bl	800813c <__hi0bits>
 8007a4e:	f1c0 0020 	rsb	r0, r0, #32
 8007a52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a54:	4418      	add	r0, r3
 8007a56:	f010 001f 	ands.w	r0, r0, #31
 8007a5a:	f000 8082 	beq.w	8007b62 <_dtoa_r+0x91a>
 8007a5e:	f1c0 0320 	rsb	r3, r0, #32
 8007a62:	2b04      	cmp	r3, #4
 8007a64:	dd73      	ble.n	8007b4e <_dtoa_r+0x906>
 8007a66:	9b04      	ldr	r3, [sp, #16]
 8007a68:	f1c0 001c 	rsb	r0, r0, #28
 8007a6c:	4403      	add	r3, r0
 8007a6e:	9304      	str	r3, [sp, #16]
 8007a70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a72:	4406      	add	r6, r0
 8007a74:	4403      	add	r3, r0
 8007a76:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a78:	9b04      	ldr	r3, [sp, #16]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	dd05      	ble.n	8007a8a <_dtoa_r+0x842>
 8007a7e:	461a      	mov	r2, r3
 8007a80:	4648      	mov	r0, r9
 8007a82:	9903      	ldr	r1, [sp, #12]
 8007a84:	f000 fcb8 	bl	80083f8 <__lshift>
 8007a88:	9003      	str	r0, [sp, #12]
 8007a8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	dd05      	ble.n	8007a9c <_dtoa_r+0x854>
 8007a90:	4621      	mov	r1, r4
 8007a92:	461a      	mov	r2, r3
 8007a94:	4648      	mov	r0, r9
 8007a96:	f000 fcaf 	bl	80083f8 <__lshift>
 8007a9a:	4604      	mov	r4, r0
 8007a9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d061      	beq.n	8007b66 <_dtoa_r+0x91e>
 8007aa2:	4621      	mov	r1, r4
 8007aa4:	9803      	ldr	r0, [sp, #12]
 8007aa6:	f000 fd13 	bl	80084d0 <__mcmp>
 8007aaa:	2800      	cmp	r0, #0
 8007aac:	da5b      	bge.n	8007b66 <_dtoa_r+0x91e>
 8007aae:	2300      	movs	r3, #0
 8007ab0:	220a      	movs	r2, #10
 8007ab2:	4648      	mov	r0, r9
 8007ab4:	9903      	ldr	r1, [sp, #12]
 8007ab6:	f000 fafb 	bl	80080b0 <__multadd>
 8007aba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007abc:	f107 38ff 	add.w	r8, r7, #4294967295
 8007ac0:	9003      	str	r0, [sp, #12]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	f000 8177 	beq.w	8007db6 <_dtoa_r+0xb6e>
 8007ac8:	4629      	mov	r1, r5
 8007aca:	2300      	movs	r3, #0
 8007acc:	220a      	movs	r2, #10
 8007ace:	4648      	mov	r0, r9
 8007ad0:	f000 faee 	bl	80080b0 <__multadd>
 8007ad4:	f1bb 0f00 	cmp.w	fp, #0
 8007ad8:	4605      	mov	r5, r0
 8007ada:	dc6f      	bgt.n	8007bbc <_dtoa_r+0x974>
 8007adc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007ade:	2b02      	cmp	r3, #2
 8007ae0:	dc49      	bgt.n	8007b76 <_dtoa_r+0x92e>
 8007ae2:	e06b      	b.n	8007bbc <_dtoa_r+0x974>
 8007ae4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007ae6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007aea:	e73c      	b.n	8007966 <_dtoa_r+0x71e>
 8007aec:	3fe00000 	.word	0x3fe00000
 8007af0:	40240000 	.word	0x40240000
 8007af4:	9b08      	ldr	r3, [sp, #32]
 8007af6:	1e5c      	subs	r4, r3, #1
 8007af8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007afa:	42a3      	cmp	r3, r4
 8007afc:	db09      	blt.n	8007b12 <_dtoa_r+0x8ca>
 8007afe:	1b1c      	subs	r4, r3, r4
 8007b00:	9b08      	ldr	r3, [sp, #32]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	f6bf af30 	bge.w	8007968 <_dtoa_r+0x720>
 8007b08:	9b04      	ldr	r3, [sp, #16]
 8007b0a:	9a08      	ldr	r2, [sp, #32]
 8007b0c:	1a9e      	subs	r6, r3, r2
 8007b0e:	2300      	movs	r3, #0
 8007b10:	e72b      	b.n	800796a <_dtoa_r+0x722>
 8007b12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007b16:	1ae3      	subs	r3, r4, r3
 8007b18:	441a      	add	r2, r3
 8007b1a:	940a      	str	r4, [sp, #40]	@ 0x28
 8007b1c:	9e04      	ldr	r6, [sp, #16]
 8007b1e:	2400      	movs	r4, #0
 8007b20:	9b08      	ldr	r3, [sp, #32]
 8007b22:	920e      	str	r2, [sp, #56]	@ 0x38
 8007b24:	e721      	b.n	800796a <_dtoa_r+0x722>
 8007b26:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007b28:	9e04      	ldr	r6, [sp, #16]
 8007b2a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007b2c:	e728      	b.n	8007980 <_dtoa_r+0x738>
 8007b2e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007b32:	e751      	b.n	80079d8 <_dtoa_r+0x790>
 8007b34:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007b36:	9903      	ldr	r1, [sp, #12]
 8007b38:	e750      	b.n	80079dc <_dtoa_r+0x794>
 8007b3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b3e:	e751      	b.n	80079e4 <_dtoa_r+0x79c>
 8007b40:	2300      	movs	r3, #0
 8007b42:	e779      	b.n	8007a38 <_dtoa_r+0x7f0>
 8007b44:	9b06      	ldr	r3, [sp, #24]
 8007b46:	e777      	b.n	8007a38 <_dtoa_r+0x7f0>
 8007b48:	2300      	movs	r3, #0
 8007b4a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b4c:	e779      	b.n	8007a42 <_dtoa_r+0x7fa>
 8007b4e:	d093      	beq.n	8007a78 <_dtoa_r+0x830>
 8007b50:	9a04      	ldr	r2, [sp, #16]
 8007b52:	331c      	adds	r3, #28
 8007b54:	441a      	add	r2, r3
 8007b56:	9204      	str	r2, [sp, #16]
 8007b58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b5a:	441e      	add	r6, r3
 8007b5c:	441a      	add	r2, r3
 8007b5e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b60:	e78a      	b.n	8007a78 <_dtoa_r+0x830>
 8007b62:	4603      	mov	r3, r0
 8007b64:	e7f4      	b.n	8007b50 <_dtoa_r+0x908>
 8007b66:	9b08      	ldr	r3, [sp, #32]
 8007b68:	46b8      	mov	r8, r7
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	dc20      	bgt.n	8007bb0 <_dtoa_r+0x968>
 8007b6e:	469b      	mov	fp, r3
 8007b70:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007b72:	2b02      	cmp	r3, #2
 8007b74:	dd1e      	ble.n	8007bb4 <_dtoa_r+0x96c>
 8007b76:	f1bb 0f00 	cmp.w	fp, #0
 8007b7a:	f47f adb1 	bne.w	80076e0 <_dtoa_r+0x498>
 8007b7e:	4621      	mov	r1, r4
 8007b80:	465b      	mov	r3, fp
 8007b82:	2205      	movs	r2, #5
 8007b84:	4648      	mov	r0, r9
 8007b86:	f000 fa93 	bl	80080b0 <__multadd>
 8007b8a:	4601      	mov	r1, r0
 8007b8c:	4604      	mov	r4, r0
 8007b8e:	9803      	ldr	r0, [sp, #12]
 8007b90:	f000 fc9e 	bl	80084d0 <__mcmp>
 8007b94:	2800      	cmp	r0, #0
 8007b96:	f77f ada3 	ble.w	80076e0 <_dtoa_r+0x498>
 8007b9a:	4656      	mov	r6, sl
 8007b9c:	2331      	movs	r3, #49	@ 0x31
 8007b9e:	f108 0801 	add.w	r8, r8, #1
 8007ba2:	f806 3b01 	strb.w	r3, [r6], #1
 8007ba6:	e59f      	b.n	80076e8 <_dtoa_r+0x4a0>
 8007ba8:	46b8      	mov	r8, r7
 8007baa:	9c08      	ldr	r4, [sp, #32]
 8007bac:	4625      	mov	r5, r4
 8007bae:	e7f4      	b.n	8007b9a <_dtoa_r+0x952>
 8007bb0:	f8dd b020 	ldr.w	fp, [sp, #32]
 8007bb4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	f000 8101 	beq.w	8007dbe <_dtoa_r+0xb76>
 8007bbc:	2e00      	cmp	r6, #0
 8007bbe:	dd05      	ble.n	8007bcc <_dtoa_r+0x984>
 8007bc0:	4629      	mov	r1, r5
 8007bc2:	4632      	mov	r2, r6
 8007bc4:	4648      	mov	r0, r9
 8007bc6:	f000 fc17 	bl	80083f8 <__lshift>
 8007bca:	4605      	mov	r5, r0
 8007bcc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d05c      	beq.n	8007c8c <_dtoa_r+0xa44>
 8007bd2:	4648      	mov	r0, r9
 8007bd4:	6869      	ldr	r1, [r5, #4]
 8007bd6:	f000 fa09 	bl	8007fec <_Balloc>
 8007bda:	4606      	mov	r6, r0
 8007bdc:	b928      	cbnz	r0, 8007bea <_dtoa_r+0x9a2>
 8007bde:	4602      	mov	r2, r0
 8007be0:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007be4:	4b80      	ldr	r3, [pc, #512]	@ (8007de8 <_dtoa_r+0xba0>)
 8007be6:	f7ff bb43 	b.w	8007270 <_dtoa_r+0x28>
 8007bea:	692a      	ldr	r2, [r5, #16]
 8007bec:	f105 010c 	add.w	r1, r5, #12
 8007bf0:	3202      	adds	r2, #2
 8007bf2:	0092      	lsls	r2, r2, #2
 8007bf4:	300c      	adds	r0, #12
 8007bf6:	f000 ff9d 	bl	8008b34 <memcpy>
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	4631      	mov	r1, r6
 8007bfe:	4648      	mov	r0, r9
 8007c00:	f000 fbfa 	bl	80083f8 <__lshift>
 8007c04:	462f      	mov	r7, r5
 8007c06:	4605      	mov	r5, r0
 8007c08:	f10a 0301 	add.w	r3, sl, #1
 8007c0c:	9304      	str	r3, [sp, #16]
 8007c0e:	eb0a 030b 	add.w	r3, sl, fp
 8007c12:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c14:	9b06      	ldr	r3, [sp, #24]
 8007c16:	f003 0301 	and.w	r3, r3, #1
 8007c1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c1c:	9b04      	ldr	r3, [sp, #16]
 8007c1e:	4621      	mov	r1, r4
 8007c20:	9803      	ldr	r0, [sp, #12]
 8007c22:	f103 3bff 	add.w	fp, r3, #4294967295
 8007c26:	f7ff fa84 	bl	8007132 <quorem>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	4639      	mov	r1, r7
 8007c2e:	3330      	adds	r3, #48	@ 0x30
 8007c30:	9006      	str	r0, [sp, #24]
 8007c32:	9803      	ldr	r0, [sp, #12]
 8007c34:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c36:	f000 fc4b 	bl	80084d0 <__mcmp>
 8007c3a:	462a      	mov	r2, r5
 8007c3c:	9008      	str	r0, [sp, #32]
 8007c3e:	4621      	mov	r1, r4
 8007c40:	4648      	mov	r0, r9
 8007c42:	f000 fc61 	bl	8008508 <__mdiff>
 8007c46:	68c2      	ldr	r2, [r0, #12]
 8007c48:	4606      	mov	r6, r0
 8007c4a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c4c:	bb02      	cbnz	r2, 8007c90 <_dtoa_r+0xa48>
 8007c4e:	4601      	mov	r1, r0
 8007c50:	9803      	ldr	r0, [sp, #12]
 8007c52:	f000 fc3d 	bl	80084d0 <__mcmp>
 8007c56:	4602      	mov	r2, r0
 8007c58:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c5a:	4631      	mov	r1, r6
 8007c5c:	4648      	mov	r0, r9
 8007c5e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8007c62:	f000 fa03 	bl	800806c <_Bfree>
 8007c66:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007c68:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007c6a:	9e04      	ldr	r6, [sp, #16]
 8007c6c:	ea42 0103 	orr.w	r1, r2, r3
 8007c70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c72:	4319      	orrs	r1, r3
 8007c74:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c76:	d10d      	bne.n	8007c94 <_dtoa_r+0xa4c>
 8007c78:	2b39      	cmp	r3, #57	@ 0x39
 8007c7a:	d027      	beq.n	8007ccc <_dtoa_r+0xa84>
 8007c7c:	9a08      	ldr	r2, [sp, #32]
 8007c7e:	2a00      	cmp	r2, #0
 8007c80:	dd01      	ble.n	8007c86 <_dtoa_r+0xa3e>
 8007c82:	9b06      	ldr	r3, [sp, #24]
 8007c84:	3331      	adds	r3, #49	@ 0x31
 8007c86:	f88b 3000 	strb.w	r3, [fp]
 8007c8a:	e52e      	b.n	80076ea <_dtoa_r+0x4a2>
 8007c8c:	4628      	mov	r0, r5
 8007c8e:	e7b9      	b.n	8007c04 <_dtoa_r+0x9bc>
 8007c90:	2201      	movs	r2, #1
 8007c92:	e7e2      	b.n	8007c5a <_dtoa_r+0xa12>
 8007c94:	9908      	ldr	r1, [sp, #32]
 8007c96:	2900      	cmp	r1, #0
 8007c98:	db04      	blt.n	8007ca4 <_dtoa_r+0xa5c>
 8007c9a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8007c9c:	4301      	orrs	r1, r0
 8007c9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007ca0:	4301      	orrs	r1, r0
 8007ca2:	d120      	bne.n	8007ce6 <_dtoa_r+0xa9e>
 8007ca4:	2a00      	cmp	r2, #0
 8007ca6:	ddee      	ble.n	8007c86 <_dtoa_r+0xa3e>
 8007ca8:	2201      	movs	r2, #1
 8007caa:	9903      	ldr	r1, [sp, #12]
 8007cac:	4648      	mov	r0, r9
 8007cae:	9304      	str	r3, [sp, #16]
 8007cb0:	f000 fba2 	bl	80083f8 <__lshift>
 8007cb4:	4621      	mov	r1, r4
 8007cb6:	9003      	str	r0, [sp, #12]
 8007cb8:	f000 fc0a 	bl	80084d0 <__mcmp>
 8007cbc:	2800      	cmp	r0, #0
 8007cbe:	9b04      	ldr	r3, [sp, #16]
 8007cc0:	dc02      	bgt.n	8007cc8 <_dtoa_r+0xa80>
 8007cc2:	d1e0      	bne.n	8007c86 <_dtoa_r+0xa3e>
 8007cc4:	07da      	lsls	r2, r3, #31
 8007cc6:	d5de      	bpl.n	8007c86 <_dtoa_r+0xa3e>
 8007cc8:	2b39      	cmp	r3, #57	@ 0x39
 8007cca:	d1da      	bne.n	8007c82 <_dtoa_r+0xa3a>
 8007ccc:	2339      	movs	r3, #57	@ 0x39
 8007cce:	f88b 3000 	strb.w	r3, [fp]
 8007cd2:	4633      	mov	r3, r6
 8007cd4:	461e      	mov	r6, r3
 8007cd6:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007cda:	3b01      	subs	r3, #1
 8007cdc:	2a39      	cmp	r2, #57	@ 0x39
 8007cde:	d04e      	beq.n	8007d7e <_dtoa_r+0xb36>
 8007ce0:	3201      	adds	r2, #1
 8007ce2:	701a      	strb	r2, [r3, #0]
 8007ce4:	e501      	b.n	80076ea <_dtoa_r+0x4a2>
 8007ce6:	2a00      	cmp	r2, #0
 8007ce8:	dd03      	ble.n	8007cf2 <_dtoa_r+0xaaa>
 8007cea:	2b39      	cmp	r3, #57	@ 0x39
 8007cec:	d0ee      	beq.n	8007ccc <_dtoa_r+0xa84>
 8007cee:	3301      	adds	r3, #1
 8007cf0:	e7c9      	b.n	8007c86 <_dtoa_r+0xa3e>
 8007cf2:	9a04      	ldr	r2, [sp, #16]
 8007cf4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007cf6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007cfa:	428a      	cmp	r2, r1
 8007cfc:	d028      	beq.n	8007d50 <_dtoa_r+0xb08>
 8007cfe:	2300      	movs	r3, #0
 8007d00:	220a      	movs	r2, #10
 8007d02:	9903      	ldr	r1, [sp, #12]
 8007d04:	4648      	mov	r0, r9
 8007d06:	f000 f9d3 	bl	80080b0 <__multadd>
 8007d0a:	42af      	cmp	r7, r5
 8007d0c:	9003      	str	r0, [sp, #12]
 8007d0e:	f04f 0300 	mov.w	r3, #0
 8007d12:	f04f 020a 	mov.w	r2, #10
 8007d16:	4639      	mov	r1, r7
 8007d18:	4648      	mov	r0, r9
 8007d1a:	d107      	bne.n	8007d2c <_dtoa_r+0xae4>
 8007d1c:	f000 f9c8 	bl	80080b0 <__multadd>
 8007d20:	4607      	mov	r7, r0
 8007d22:	4605      	mov	r5, r0
 8007d24:	9b04      	ldr	r3, [sp, #16]
 8007d26:	3301      	adds	r3, #1
 8007d28:	9304      	str	r3, [sp, #16]
 8007d2a:	e777      	b.n	8007c1c <_dtoa_r+0x9d4>
 8007d2c:	f000 f9c0 	bl	80080b0 <__multadd>
 8007d30:	4629      	mov	r1, r5
 8007d32:	4607      	mov	r7, r0
 8007d34:	2300      	movs	r3, #0
 8007d36:	220a      	movs	r2, #10
 8007d38:	4648      	mov	r0, r9
 8007d3a:	f000 f9b9 	bl	80080b0 <__multadd>
 8007d3e:	4605      	mov	r5, r0
 8007d40:	e7f0      	b.n	8007d24 <_dtoa_r+0xadc>
 8007d42:	f1bb 0f00 	cmp.w	fp, #0
 8007d46:	bfcc      	ite	gt
 8007d48:	465e      	movgt	r6, fp
 8007d4a:	2601      	movle	r6, #1
 8007d4c:	2700      	movs	r7, #0
 8007d4e:	4456      	add	r6, sl
 8007d50:	2201      	movs	r2, #1
 8007d52:	9903      	ldr	r1, [sp, #12]
 8007d54:	4648      	mov	r0, r9
 8007d56:	9304      	str	r3, [sp, #16]
 8007d58:	f000 fb4e 	bl	80083f8 <__lshift>
 8007d5c:	4621      	mov	r1, r4
 8007d5e:	9003      	str	r0, [sp, #12]
 8007d60:	f000 fbb6 	bl	80084d0 <__mcmp>
 8007d64:	2800      	cmp	r0, #0
 8007d66:	dcb4      	bgt.n	8007cd2 <_dtoa_r+0xa8a>
 8007d68:	d102      	bne.n	8007d70 <_dtoa_r+0xb28>
 8007d6a:	9b04      	ldr	r3, [sp, #16]
 8007d6c:	07db      	lsls	r3, r3, #31
 8007d6e:	d4b0      	bmi.n	8007cd2 <_dtoa_r+0xa8a>
 8007d70:	4633      	mov	r3, r6
 8007d72:	461e      	mov	r6, r3
 8007d74:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d78:	2a30      	cmp	r2, #48	@ 0x30
 8007d7a:	d0fa      	beq.n	8007d72 <_dtoa_r+0xb2a>
 8007d7c:	e4b5      	b.n	80076ea <_dtoa_r+0x4a2>
 8007d7e:	459a      	cmp	sl, r3
 8007d80:	d1a8      	bne.n	8007cd4 <_dtoa_r+0xa8c>
 8007d82:	2331      	movs	r3, #49	@ 0x31
 8007d84:	f108 0801 	add.w	r8, r8, #1
 8007d88:	f88a 3000 	strb.w	r3, [sl]
 8007d8c:	e4ad      	b.n	80076ea <_dtoa_r+0x4a2>
 8007d8e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007d90:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007dec <_dtoa_r+0xba4>
 8007d94:	b11b      	cbz	r3, 8007d9e <_dtoa_r+0xb56>
 8007d96:	f10a 0308 	add.w	r3, sl, #8
 8007d9a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007d9c:	6013      	str	r3, [r2, #0]
 8007d9e:	4650      	mov	r0, sl
 8007da0:	b017      	add	sp, #92	@ 0x5c
 8007da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007da6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	f77f ae2e 	ble.w	8007a0a <_dtoa_r+0x7c2>
 8007dae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007db0:	930a      	str	r3, [sp, #40]	@ 0x28
 8007db2:	2001      	movs	r0, #1
 8007db4:	e64d      	b.n	8007a52 <_dtoa_r+0x80a>
 8007db6:	f1bb 0f00 	cmp.w	fp, #0
 8007dba:	f77f aed9 	ble.w	8007b70 <_dtoa_r+0x928>
 8007dbe:	4656      	mov	r6, sl
 8007dc0:	4621      	mov	r1, r4
 8007dc2:	9803      	ldr	r0, [sp, #12]
 8007dc4:	f7ff f9b5 	bl	8007132 <quorem>
 8007dc8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007dcc:	f806 3b01 	strb.w	r3, [r6], #1
 8007dd0:	eba6 020a 	sub.w	r2, r6, sl
 8007dd4:	4593      	cmp	fp, r2
 8007dd6:	ddb4      	ble.n	8007d42 <_dtoa_r+0xafa>
 8007dd8:	2300      	movs	r3, #0
 8007dda:	220a      	movs	r2, #10
 8007ddc:	4648      	mov	r0, r9
 8007dde:	9903      	ldr	r1, [sp, #12]
 8007de0:	f000 f966 	bl	80080b0 <__multadd>
 8007de4:	9003      	str	r0, [sp, #12]
 8007de6:	e7eb      	b.n	8007dc0 <_dtoa_r+0xb78>
 8007de8:	08009372 	.word	0x08009372
 8007dec:	080092f6 	.word	0x080092f6

08007df0 <_free_r>:
 8007df0:	b538      	push	{r3, r4, r5, lr}
 8007df2:	4605      	mov	r5, r0
 8007df4:	2900      	cmp	r1, #0
 8007df6:	d040      	beq.n	8007e7a <_free_r+0x8a>
 8007df8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dfc:	1f0c      	subs	r4, r1, #4
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	bfb8      	it	lt
 8007e02:	18e4      	addlt	r4, r4, r3
 8007e04:	f000 f8e6 	bl	8007fd4 <__malloc_lock>
 8007e08:	4a1c      	ldr	r2, [pc, #112]	@ (8007e7c <_free_r+0x8c>)
 8007e0a:	6813      	ldr	r3, [r2, #0]
 8007e0c:	b933      	cbnz	r3, 8007e1c <_free_r+0x2c>
 8007e0e:	6063      	str	r3, [r4, #4]
 8007e10:	6014      	str	r4, [r2, #0]
 8007e12:	4628      	mov	r0, r5
 8007e14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e18:	f000 b8e2 	b.w	8007fe0 <__malloc_unlock>
 8007e1c:	42a3      	cmp	r3, r4
 8007e1e:	d908      	bls.n	8007e32 <_free_r+0x42>
 8007e20:	6820      	ldr	r0, [r4, #0]
 8007e22:	1821      	adds	r1, r4, r0
 8007e24:	428b      	cmp	r3, r1
 8007e26:	bf01      	itttt	eq
 8007e28:	6819      	ldreq	r1, [r3, #0]
 8007e2a:	685b      	ldreq	r3, [r3, #4]
 8007e2c:	1809      	addeq	r1, r1, r0
 8007e2e:	6021      	streq	r1, [r4, #0]
 8007e30:	e7ed      	b.n	8007e0e <_free_r+0x1e>
 8007e32:	461a      	mov	r2, r3
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	b10b      	cbz	r3, 8007e3c <_free_r+0x4c>
 8007e38:	42a3      	cmp	r3, r4
 8007e3a:	d9fa      	bls.n	8007e32 <_free_r+0x42>
 8007e3c:	6811      	ldr	r1, [r2, #0]
 8007e3e:	1850      	adds	r0, r2, r1
 8007e40:	42a0      	cmp	r0, r4
 8007e42:	d10b      	bne.n	8007e5c <_free_r+0x6c>
 8007e44:	6820      	ldr	r0, [r4, #0]
 8007e46:	4401      	add	r1, r0
 8007e48:	1850      	adds	r0, r2, r1
 8007e4a:	4283      	cmp	r3, r0
 8007e4c:	6011      	str	r1, [r2, #0]
 8007e4e:	d1e0      	bne.n	8007e12 <_free_r+0x22>
 8007e50:	6818      	ldr	r0, [r3, #0]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	4408      	add	r0, r1
 8007e56:	6010      	str	r0, [r2, #0]
 8007e58:	6053      	str	r3, [r2, #4]
 8007e5a:	e7da      	b.n	8007e12 <_free_r+0x22>
 8007e5c:	d902      	bls.n	8007e64 <_free_r+0x74>
 8007e5e:	230c      	movs	r3, #12
 8007e60:	602b      	str	r3, [r5, #0]
 8007e62:	e7d6      	b.n	8007e12 <_free_r+0x22>
 8007e64:	6820      	ldr	r0, [r4, #0]
 8007e66:	1821      	adds	r1, r4, r0
 8007e68:	428b      	cmp	r3, r1
 8007e6a:	bf01      	itttt	eq
 8007e6c:	6819      	ldreq	r1, [r3, #0]
 8007e6e:	685b      	ldreq	r3, [r3, #4]
 8007e70:	1809      	addeq	r1, r1, r0
 8007e72:	6021      	streq	r1, [r4, #0]
 8007e74:	6063      	str	r3, [r4, #4]
 8007e76:	6054      	str	r4, [r2, #4]
 8007e78:	e7cb      	b.n	8007e12 <_free_r+0x22>
 8007e7a:	bd38      	pop	{r3, r4, r5, pc}
 8007e7c:	20000464 	.word	0x20000464

08007e80 <malloc>:
 8007e80:	4b02      	ldr	r3, [pc, #8]	@ (8007e8c <malloc+0xc>)
 8007e82:	4601      	mov	r1, r0
 8007e84:	6818      	ldr	r0, [r3, #0]
 8007e86:	f000 b825 	b.w	8007ed4 <_malloc_r>
 8007e8a:	bf00      	nop
 8007e8c:	20000038 	.word	0x20000038

08007e90 <sbrk_aligned>:
 8007e90:	b570      	push	{r4, r5, r6, lr}
 8007e92:	4e0f      	ldr	r6, [pc, #60]	@ (8007ed0 <sbrk_aligned+0x40>)
 8007e94:	460c      	mov	r4, r1
 8007e96:	6831      	ldr	r1, [r6, #0]
 8007e98:	4605      	mov	r5, r0
 8007e9a:	b911      	cbnz	r1, 8007ea2 <sbrk_aligned+0x12>
 8007e9c:	f000 fe3a 	bl	8008b14 <_sbrk_r>
 8007ea0:	6030      	str	r0, [r6, #0]
 8007ea2:	4621      	mov	r1, r4
 8007ea4:	4628      	mov	r0, r5
 8007ea6:	f000 fe35 	bl	8008b14 <_sbrk_r>
 8007eaa:	1c43      	adds	r3, r0, #1
 8007eac:	d103      	bne.n	8007eb6 <sbrk_aligned+0x26>
 8007eae:	f04f 34ff 	mov.w	r4, #4294967295
 8007eb2:	4620      	mov	r0, r4
 8007eb4:	bd70      	pop	{r4, r5, r6, pc}
 8007eb6:	1cc4      	adds	r4, r0, #3
 8007eb8:	f024 0403 	bic.w	r4, r4, #3
 8007ebc:	42a0      	cmp	r0, r4
 8007ebe:	d0f8      	beq.n	8007eb2 <sbrk_aligned+0x22>
 8007ec0:	1a21      	subs	r1, r4, r0
 8007ec2:	4628      	mov	r0, r5
 8007ec4:	f000 fe26 	bl	8008b14 <_sbrk_r>
 8007ec8:	3001      	adds	r0, #1
 8007eca:	d1f2      	bne.n	8007eb2 <sbrk_aligned+0x22>
 8007ecc:	e7ef      	b.n	8007eae <sbrk_aligned+0x1e>
 8007ece:	bf00      	nop
 8007ed0:	20000460 	.word	0x20000460

08007ed4 <_malloc_r>:
 8007ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ed8:	1ccd      	adds	r5, r1, #3
 8007eda:	f025 0503 	bic.w	r5, r5, #3
 8007ede:	3508      	adds	r5, #8
 8007ee0:	2d0c      	cmp	r5, #12
 8007ee2:	bf38      	it	cc
 8007ee4:	250c      	movcc	r5, #12
 8007ee6:	2d00      	cmp	r5, #0
 8007ee8:	4606      	mov	r6, r0
 8007eea:	db01      	blt.n	8007ef0 <_malloc_r+0x1c>
 8007eec:	42a9      	cmp	r1, r5
 8007eee:	d904      	bls.n	8007efa <_malloc_r+0x26>
 8007ef0:	230c      	movs	r3, #12
 8007ef2:	6033      	str	r3, [r6, #0]
 8007ef4:	2000      	movs	r0, #0
 8007ef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007efa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007fd0 <_malloc_r+0xfc>
 8007efe:	f000 f869 	bl	8007fd4 <__malloc_lock>
 8007f02:	f8d8 3000 	ldr.w	r3, [r8]
 8007f06:	461c      	mov	r4, r3
 8007f08:	bb44      	cbnz	r4, 8007f5c <_malloc_r+0x88>
 8007f0a:	4629      	mov	r1, r5
 8007f0c:	4630      	mov	r0, r6
 8007f0e:	f7ff ffbf 	bl	8007e90 <sbrk_aligned>
 8007f12:	1c43      	adds	r3, r0, #1
 8007f14:	4604      	mov	r4, r0
 8007f16:	d158      	bne.n	8007fca <_malloc_r+0xf6>
 8007f18:	f8d8 4000 	ldr.w	r4, [r8]
 8007f1c:	4627      	mov	r7, r4
 8007f1e:	2f00      	cmp	r7, #0
 8007f20:	d143      	bne.n	8007faa <_malloc_r+0xd6>
 8007f22:	2c00      	cmp	r4, #0
 8007f24:	d04b      	beq.n	8007fbe <_malloc_r+0xea>
 8007f26:	6823      	ldr	r3, [r4, #0]
 8007f28:	4639      	mov	r1, r7
 8007f2a:	4630      	mov	r0, r6
 8007f2c:	eb04 0903 	add.w	r9, r4, r3
 8007f30:	f000 fdf0 	bl	8008b14 <_sbrk_r>
 8007f34:	4581      	cmp	r9, r0
 8007f36:	d142      	bne.n	8007fbe <_malloc_r+0xea>
 8007f38:	6821      	ldr	r1, [r4, #0]
 8007f3a:	4630      	mov	r0, r6
 8007f3c:	1a6d      	subs	r5, r5, r1
 8007f3e:	4629      	mov	r1, r5
 8007f40:	f7ff ffa6 	bl	8007e90 <sbrk_aligned>
 8007f44:	3001      	adds	r0, #1
 8007f46:	d03a      	beq.n	8007fbe <_malloc_r+0xea>
 8007f48:	6823      	ldr	r3, [r4, #0]
 8007f4a:	442b      	add	r3, r5
 8007f4c:	6023      	str	r3, [r4, #0]
 8007f4e:	f8d8 3000 	ldr.w	r3, [r8]
 8007f52:	685a      	ldr	r2, [r3, #4]
 8007f54:	bb62      	cbnz	r2, 8007fb0 <_malloc_r+0xdc>
 8007f56:	f8c8 7000 	str.w	r7, [r8]
 8007f5a:	e00f      	b.n	8007f7c <_malloc_r+0xa8>
 8007f5c:	6822      	ldr	r2, [r4, #0]
 8007f5e:	1b52      	subs	r2, r2, r5
 8007f60:	d420      	bmi.n	8007fa4 <_malloc_r+0xd0>
 8007f62:	2a0b      	cmp	r2, #11
 8007f64:	d917      	bls.n	8007f96 <_malloc_r+0xc2>
 8007f66:	1961      	adds	r1, r4, r5
 8007f68:	42a3      	cmp	r3, r4
 8007f6a:	6025      	str	r5, [r4, #0]
 8007f6c:	bf18      	it	ne
 8007f6e:	6059      	strne	r1, [r3, #4]
 8007f70:	6863      	ldr	r3, [r4, #4]
 8007f72:	bf08      	it	eq
 8007f74:	f8c8 1000 	streq.w	r1, [r8]
 8007f78:	5162      	str	r2, [r4, r5]
 8007f7a:	604b      	str	r3, [r1, #4]
 8007f7c:	4630      	mov	r0, r6
 8007f7e:	f000 f82f 	bl	8007fe0 <__malloc_unlock>
 8007f82:	f104 000b 	add.w	r0, r4, #11
 8007f86:	1d23      	adds	r3, r4, #4
 8007f88:	f020 0007 	bic.w	r0, r0, #7
 8007f8c:	1ac2      	subs	r2, r0, r3
 8007f8e:	bf1c      	itt	ne
 8007f90:	1a1b      	subne	r3, r3, r0
 8007f92:	50a3      	strne	r3, [r4, r2]
 8007f94:	e7af      	b.n	8007ef6 <_malloc_r+0x22>
 8007f96:	6862      	ldr	r2, [r4, #4]
 8007f98:	42a3      	cmp	r3, r4
 8007f9a:	bf0c      	ite	eq
 8007f9c:	f8c8 2000 	streq.w	r2, [r8]
 8007fa0:	605a      	strne	r2, [r3, #4]
 8007fa2:	e7eb      	b.n	8007f7c <_malloc_r+0xa8>
 8007fa4:	4623      	mov	r3, r4
 8007fa6:	6864      	ldr	r4, [r4, #4]
 8007fa8:	e7ae      	b.n	8007f08 <_malloc_r+0x34>
 8007faa:	463c      	mov	r4, r7
 8007fac:	687f      	ldr	r7, [r7, #4]
 8007fae:	e7b6      	b.n	8007f1e <_malloc_r+0x4a>
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	42a3      	cmp	r3, r4
 8007fb6:	d1fb      	bne.n	8007fb0 <_malloc_r+0xdc>
 8007fb8:	2300      	movs	r3, #0
 8007fba:	6053      	str	r3, [r2, #4]
 8007fbc:	e7de      	b.n	8007f7c <_malloc_r+0xa8>
 8007fbe:	230c      	movs	r3, #12
 8007fc0:	4630      	mov	r0, r6
 8007fc2:	6033      	str	r3, [r6, #0]
 8007fc4:	f000 f80c 	bl	8007fe0 <__malloc_unlock>
 8007fc8:	e794      	b.n	8007ef4 <_malloc_r+0x20>
 8007fca:	6005      	str	r5, [r0, #0]
 8007fcc:	e7d6      	b.n	8007f7c <_malloc_r+0xa8>
 8007fce:	bf00      	nop
 8007fd0:	20000464 	.word	0x20000464

08007fd4 <__malloc_lock>:
 8007fd4:	4801      	ldr	r0, [pc, #4]	@ (8007fdc <__malloc_lock+0x8>)
 8007fd6:	f7ff b89c 	b.w	8007112 <__retarget_lock_acquire_recursive>
 8007fda:	bf00      	nop
 8007fdc:	2000045c 	.word	0x2000045c

08007fe0 <__malloc_unlock>:
 8007fe0:	4801      	ldr	r0, [pc, #4]	@ (8007fe8 <__malloc_unlock+0x8>)
 8007fe2:	f7ff b897 	b.w	8007114 <__retarget_lock_release_recursive>
 8007fe6:	bf00      	nop
 8007fe8:	2000045c 	.word	0x2000045c

08007fec <_Balloc>:
 8007fec:	b570      	push	{r4, r5, r6, lr}
 8007fee:	69c6      	ldr	r6, [r0, #28]
 8007ff0:	4604      	mov	r4, r0
 8007ff2:	460d      	mov	r5, r1
 8007ff4:	b976      	cbnz	r6, 8008014 <_Balloc+0x28>
 8007ff6:	2010      	movs	r0, #16
 8007ff8:	f7ff ff42 	bl	8007e80 <malloc>
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	61e0      	str	r0, [r4, #28]
 8008000:	b920      	cbnz	r0, 800800c <_Balloc+0x20>
 8008002:	216b      	movs	r1, #107	@ 0x6b
 8008004:	4b17      	ldr	r3, [pc, #92]	@ (8008064 <_Balloc+0x78>)
 8008006:	4818      	ldr	r0, [pc, #96]	@ (8008068 <_Balloc+0x7c>)
 8008008:	f000 fda2 	bl	8008b50 <__assert_func>
 800800c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008010:	6006      	str	r6, [r0, #0]
 8008012:	60c6      	str	r6, [r0, #12]
 8008014:	69e6      	ldr	r6, [r4, #28]
 8008016:	68f3      	ldr	r3, [r6, #12]
 8008018:	b183      	cbz	r3, 800803c <_Balloc+0x50>
 800801a:	69e3      	ldr	r3, [r4, #28]
 800801c:	68db      	ldr	r3, [r3, #12]
 800801e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008022:	b9b8      	cbnz	r0, 8008054 <_Balloc+0x68>
 8008024:	2101      	movs	r1, #1
 8008026:	fa01 f605 	lsl.w	r6, r1, r5
 800802a:	1d72      	adds	r2, r6, #5
 800802c:	4620      	mov	r0, r4
 800802e:	0092      	lsls	r2, r2, #2
 8008030:	f000 fdac 	bl	8008b8c <_calloc_r>
 8008034:	b160      	cbz	r0, 8008050 <_Balloc+0x64>
 8008036:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800803a:	e00e      	b.n	800805a <_Balloc+0x6e>
 800803c:	2221      	movs	r2, #33	@ 0x21
 800803e:	2104      	movs	r1, #4
 8008040:	4620      	mov	r0, r4
 8008042:	f000 fda3 	bl	8008b8c <_calloc_r>
 8008046:	69e3      	ldr	r3, [r4, #28]
 8008048:	60f0      	str	r0, [r6, #12]
 800804a:	68db      	ldr	r3, [r3, #12]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d1e4      	bne.n	800801a <_Balloc+0x2e>
 8008050:	2000      	movs	r0, #0
 8008052:	bd70      	pop	{r4, r5, r6, pc}
 8008054:	6802      	ldr	r2, [r0, #0]
 8008056:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800805a:	2300      	movs	r3, #0
 800805c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008060:	e7f7      	b.n	8008052 <_Balloc+0x66>
 8008062:	bf00      	nop
 8008064:	08009303 	.word	0x08009303
 8008068:	08009383 	.word	0x08009383

0800806c <_Bfree>:
 800806c:	b570      	push	{r4, r5, r6, lr}
 800806e:	69c6      	ldr	r6, [r0, #28]
 8008070:	4605      	mov	r5, r0
 8008072:	460c      	mov	r4, r1
 8008074:	b976      	cbnz	r6, 8008094 <_Bfree+0x28>
 8008076:	2010      	movs	r0, #16
 8008078:	f7ff ff02 	bl	8007e80 <malloc>
 800807c:	4602      	mov	r2, r0
 800807e:	61e8      	str	r0, [r5, #28]
 8008080:	b920      	cbnz	r0, 800808c <_Bfree+0x20>
 8008082:	218f      	movs	r1, #143	@ 0x8f
 8008084:	4b08      	ldr	r3, [pc, #32]	@ (80080a8 <_Bfree+0x3c>)
 8008086:	4809      	ldr	r0, [pc, #36]	@ (80080ac <_Bfree+0x40>)
 8008088:	f000 fd62 	bl	8008b50 <__assert_func>
 800808c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008090:	6006      	str	r6, [r0, #0]
 8008092:	60c6      	str	r6, [r0, #12]
 8008094:	b13c      	cbz	r4, 80080a6 <_Bfree+0x3a>
 8008096:	69eb      	ldr	r3, [r5, #28]
 8008098:	6862      	ldr	r2, [r4, #4]
 800809a:	68db      	ldr	r3, [r3, #12]
 800809c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80080a0:	6021      	str	r1, [r4, #0]
 80080a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80080a6:	bd70      	pop	{r4, r5, r6, pc}
 80080a8:	08009303 	.word	0x08009303
 80080ac:	08009383 	.word	0x08009383

080080b0 <__multadd>:
 80080b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080b4:	4607      	mov	r7, r0
 80080b6:	460c      	mov	r4, r1
 80080b8:	461e      	mov	r6, r3
 80080ba:	2000      	movs	r0, #0
 80080bc:	690d      	ldr	r5, [r1, #16]
 80080be:	f101 0c14 	add.w	ip, r1, #20
 80080c2:	f8dc 3000 	ldr.w	r3, [ip]
 80080c6:	3001      	adds	r0, #1
 80080c8:	b299      	uxth	r1, r3
 80080ca:	fb02 6101 	mla	r1, r2, r1, r6
 80080ce:	0c1e      	lsrs	r6, r3, #16
 80080d0:	0c0b      	lsrs	r3, r1, #16
 80080d2:	fb02 3306 	mla	r3, r2, r6, r3
 80080d6:	b289      	uxth	r1, r1
 80080d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80080dc:	4285      	cmp	r5, r0
 80080de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80080e2:	f84c 1b04 	str.w	r1, [ip], #4
 80080e6:	dcec      	bgt.n	80080c2 <__multadd+0x12>
 80080e8:	b30e      	cbz	r6, 800812e <__multadd+0x7e>
 80080ea:	68a3      	ldr	r3, [r4, #8]
 80080ec:	42ab      	cmp	r3, r5
 80080ee:	dc19      	bgt.n	8008124 <__multadd+0x74>
 80080f0:	6861      	ldr	r1, [r4, #4]
 80080f2:	4638      	mov	r0, r7
 80080f4:	3101      	adds	r1, #1
 80080f6:	f7ff ff79 	bl	8007fec <_Balloc>
 80080fa:	4680      	mov	r8, r0
 80080fc:	b928      	cbnz	r0, 800810a <__multadd+0x5a>
 80080fe:	4602      	mov	r2, r0
 8008100:	21ba      	movs	r1, #186	@ 0xba
 8008102:	4b0c      	ldr	r3, [pc, #48]	@ (8008134 <__multadd+0x84>)
 8008104:	480c      	ldr	r0, [pc, #48]	@ (8008138 <__multadd+0x88>)
 8008106:	f000 fd23 	bl	8008b50 <__assert_func>
 800810a:	6922      	ldr	r2, [r4, #16]
 800810c:	f104 010c 	add.w	r1, r4, #12
 8008110:	3202      	adds	r2, #2
 8008112:	0092      	lsls	r2, r2, #2
 8008114:	300c      	adds	r0, #12
 8008116:	f000 fd0d 	bl	8008b34 <memcpy>
 800811a:	4621      	mov	r1, r4
 800811c:	4638      	mov	r0, r7
 800811e:	f7ff ffa5 	bl	800806c <_Bfree>
 8008122:	4644      	mov	r4, r8
 8008124:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008128:	3501      	adds	r5, #1
 800812a:	615e      	str	r6, [r3, #20]
 800812c:	6125      	str	r5, [r4, #16]
 800812e:	4620      	mov	r0, r4
 8008130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008134:	08009372 	.word	0x08009372
 8008138:	08009383 	.word	0x08009383

0800813c <__hi0bits>:
 800813c:	4603      	mov	r3, r0
 800813e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008142:	bf3a      	itte	cc
 8008144:	0403      	lslcc	r3, r0, #16
 8008146:	2010      	movcc	r0, #16
 8008148:	2000      	movcs	r0, #0
 800814a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800814e:	bf3c      	itt	cc
 8008150:	021b      	lslcc	r3, r3, #8
 8008152:	3008      	addcc	r0, #8
 8008154:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008158:	bf3c      	itt	cc
 800815a:	011b      	lslcc	r3, r3, #4
 800815c:	3004      	addcc	r0, #4
 800815e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008162:	bf3c      	itt	cc
 8008164:	009b      	lslcc	r3, r3, #2
 8008166:	3002      	addcc	r0, #2
 8008168:	2b00      	cmp	r3, #0
 800816a:	db05      	blt.n	8008178 <__hi0bits+0x3c>
 800816c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008170:	f100 0001 	add.w	r0, r0, #1
 8008174:	bf08      	it	eq
 8008176:	2020      	moveq	r0, #32
 8008178:	4770      	bx	lr

0800817a <__lo0bits>:
 800817a:	6803      	ldr	r3, [r0, #0]
 800817c:	4602      	mov	r2, r0
 800817e:	f013 0007 	ands.w	r0, r3, #7
 8008182:	d00b      	beq.n	800819c <__lo0bits+0x22>
 8008184:	07d9      	lsls	r1, r3, #31
 8008186:	d421      	bmi.n	80081cc <__lo0bits+0x52>
 8008188:	0798      	lsls	r0, r3, #30
 800818a:	bf49      	itett	mi
 800818c:	085b      	lsrmi	r3, r3, #1
 800818e:	089b      	lsrpl	r3, r3, #2
 8008190:	2001      	movmi	r0, #1
 8008192:	6013      	strmi	r3, [r2, #0]
 8008194:	bf5c      	itt	pl
 8008196:	2002      	movpl	r0, #2
 8008198:	6013      	strpl	r3, [r2, #0]
 800819a:	4770      	bx	lr
 800819c:	b299      	uxth	r1, r3
 800819e:	b909      	cbnz	r1, 80081a4 <__lo0bits+0x2a>
 80081a0:	2010      	movs	r0, #16
 80081a2:	0c1b      	lsrs	r3, r3, #16
 80081a4:	b2d9      	uxtb	r1, r3
 80081a6:	b909      	cbnz	r1, 80081ac <__lo0bits+0x32>
 80081a8:	3008      	adds	r0, #8
 80081aa:	0a1b      	lsrs	r3, r3, #8
 80081ac:	0719      	lsls	r1, r3, #28
 80081ae:	bf04      	itt	eq
 80081b0:	091b      	lsreq	r3, r3, #4
 80081b2:	3004      	addeq	r0, #4
 80081b4:	0799      	lsls	r1, r3, #30
 80081b6:	bf04      	itt	eq
 80081b8:	089b      	lsreq	r3, r3, #2
 80081ba:	3002      	addeq	r0, #2
 80081bc:	07d9      	lsls	r1, r3, #31
 80081be:	d403      	bmi.n	80081c8 <__lo0bits+0x4e>
 80081c0:	085b      	lsrs	r3, r3, #1
 80081c2:	f100 0001 	add.w	r0, r0, #1
 80081c6:	d003      	beq.n	80081d0 <__lo0bits+0x56>
 80081c8:	6013      	str	r3, [r2, #0]
 80081ca:	4770      	bx	lr
 80081cc:	2000      	movs	r0, #0
 80081ce:	4770      	bx	lr
 80081d0:	2020      	movs	r0, #32
 80081d2:	4770      	bx	lr

080081d4 <__i2b>:
 80081d4:	b510      	push	{r4, lr}
 80081d6:	460c      	mov	r4, r1
 80081d8:	2101      	movs	r1, #1
 80081da:	f7ff ff07 	bl	8007fec <_Balloc>
 80081de:	4602      	mov	r2, r0
 80081e0:	b928      	cbnz	r0, 80081ee <__i2b+0x1a>
 80081e2:	f240 1145 	movw	r1, #325	@ 0x145
 80081e6:	4b04      	ldr	r3, [pc, #16]	@ (80081f8 <__i2b+0x24>)
 80081e8:	4804      	ldr	r0, [pc, #16]	@ (80081fc <__i2b+0x28>)
 80081ea:	f000 fcb1 	bl	8008b50 <__assert_func>
 80081ee:	2301      	movs	r3, #1
 80081f0:	6144      	str	r4, [r0, #20]
 80081f2:	6103      	str	r3, [r0, #16]
 80081f4:	bd10      	pop	{r4, pc}
 80081f6:	bf00      	nop
 80081f8:	08009372 	.word	0x08009372
 80081fc:	08009383 	.word	0x08009383

08008200 <__multiply>:
 8008200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008204:	4617      	mov	r7, r2
 8008206:	690a      	ldr	r2, [r1, #16]
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	4689      	mov	r9, r1
 800820c:	429a      	cmp	r2, r3
 800820e:	bfa2      	ittt	ge
 8008210:	463b      	movge	r3, r7
 8008212:	460f      	movge	r7, r1
 8008214:	4699      	movge	r9, r3
 8008216:	693d      	ldr	r5, [r7, #16]
 8008218:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	6879      	ldr	r1, [r7, #4]
 8008220:	eb05 060a 	add.w	r6, r5, sl
 8008224:	42b3      	cmp	r3, r6
 8008226:	b085      	sub	sp, #20
 8008228:	bfb8      	it	lt
 800822a:	3101      	addlt	r1, #1
 800822c:	f7ff fede 	bl	8007fec <_Balloc>
 8008230:	b930      	cbnz	r0, 8008240 <__multiply+0x40>
 8008232:	4602      	mov	r2, r0
 8008234:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008238:	4b40      	ldr	r3, [pc, #256]	@ (800833c <__multiply+0x13c>)
 800823a:	4841      	ldr	r0, [pc, #260]	@ (8008340 <__multiply+0x140>)
 800823c:	f000 fc88 	bl	8008b50 <__assert_func>
 8008240:	f100 0414 	add.w	r4, r0, #20
 8008244:	4623      	mov	r3, r4
 8008246:	2200      	movs	r2, #0
 8008248:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800824c:	4573      	cmp	r3, lr
 800824e:	d320      	bcc.n	8008292 <__multiply+0x92>
 8008250:	f107 0814 	add.w	r8, r7, #20
 8008254:	f109 0114 	add.w	r1, r9, #20
 8008258:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800825c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008260:	9302      	str	r3, [sp, #8]
 8008262:	1beb      	subs	r3, r5, r7
 8008264:	3b15      	subs	r3, #21
 8008266:	f023 0303 	bic.w	r3, r3, #3
 800826a:	3304      	adds	r3, #4
 800826c:	3715      	adds	r7, #21
 800826e:	42bd      	cmp	r5, r7
 8008270:	bf38      	it	cc
 8008272:	2304      	movcc	r3, #4
 8008274:	9301      	str	r3, [sp, #4]
 8008276:	9b02      	ldr	r3, [sp, #8]
 8008278:	9103      	str	r1, [sp, #12]
 800827a:	428b      	cmp	r3, r1
 800827c:	d80c      	bhi.n	8008298 <__multiply+0x98>
 800827e:	2e00      	cmp	r6, #0
 8008280:	dd03      	ble.n	800828a <__multiply+0x8a>
 8008282:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008286:	2b00      	cmp	r3, #0
 8008288:	d055      	beq.n	8008336 <__multiply+0x136>
 800828a:	6106      	str	r6, [r0, #16]
 800828c:	b005      	add	sp, #20
 800828e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008292:	f843 2b04 	str.w	r2, [r3], #4
 8008296:	e7d9      	b.n	800824c <__multiply+0x4c>
 8008298:	f8b1 a000 	ldrh.w	sl, [r1]
 800829c:	f1ba 0f00 	cmp.w	sl, #0
 80082a0:	d01f      	beq.n	80082e2 <__multiply+0xe2>
 80082a2:	46c4      	mov	ip, r8
 80082a4:	46a1      	mov	r9, r4
 80082a6:	2700      	movs	r7, #0
 80082a8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80082ac:	f8d9 3000 	ldr.w	r3, [r9]
 80082b0:	fa1f fb82 	uxth.w	fp, r2
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	fb0a 330b 	mla	r3, sl, fp, r3
 80082ba:	443b      	add	r3, r7
 80082bc:	f8d9 7000 	ldr.w	r7, [r9]
 80082c0:	0c12      	lsrs	r2, r2, #16
 80082c2:	0c3f      	lsrs	r7, r7, #16
 80082c4:	fb0a 7202 	mla	r2, sl, r2, r7
 80082c8:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082d2:	4565      	cmp	r5, ip
 80082d4:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80082d8:	f849 3b04 	str.w	r3, [r9], #4
 80082dc:	d8e4      	bhi.n	80082a8 <__multiply+0xa8>
 80082de:	9b01      	ldr	r3, [sp, #4]
 80082e0:	50e7      	str	r7, [r4, r3]
 80082e2:	9b03      	ldr	r3, [sp, #12]
 80082e4:	3104      	adds	r1, #4
 80082e6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80082ea:	f1b9 0f00 	cmp.w	r9, #0
 80082ee:	d020      	beq.n	8008332 <__multiply+0x132>
 80082f0:	4647      	mov	r7, r8
 80082f2:	46a4      	mov	ip, r4
 80082f4:	f04f 0a00 	mov.w	sl, #0
 80082f8:	6823      	ldr	r3, [r4, #0]
 80082fa:	f8b7 b000 	ldrh.w	fp, [r7]
 80082fe:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008302:	b29b      	uxth	r3, r3
 8008304:	fb09 220b 	mla	r2, r9, fp, r2
 8008308:	4452      	add	r2, sl
 800830a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800830e:	f84c 3b04 	str.w	r3, [ip], #4
 8008312:	f857 3b04 	ldr.w	r3, [r7], #4
 8008316:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800831a:	f8bc 3000 	ldrh.w	r3, [ip]
 800831e:	42bd      	cmp	r5, r7
 8008320:	fb09 330a 	mla	r3, r9, sl, r3
 8008324:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008328:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800832c:	d8e5      	bhi.n	80082fa <__multiply+0xfa>
 800832e:	9a01      	ldr	r2, [sp, #4]
 8008330:	50a3      	str	r3, [r4, r2]
 8008332:	3404      	adds	r4, #4
 8008334:	e79f      	b.n	8008276 <__multiply+0x76>
 8008336:	3e01      	subs	r6, #1
 8008338:	e7a1      	b.n	800827e <__multiply+0x7e>
 800833a:	bf00      	nop
 800833c:	08009372 	.word	0x08009372
 8008340:	08009383 	.word	0x08009383

08008344 <__pow5mult>:
 8008344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008348:	4615      	mov	r5, r2
 800834a:	f012 0203 	ands.w	r2, r2, #3
 800834e:	4607      	mov	r7, r0
 8008350:	460e      	mov	r6, r1
 8008352:	d007      	beq.n	8008364 <__pow5mult+0x20>
 8008354:	4c25      	ldr	r4, [pc, #148]	@ (80083ec <__pow5mult+0xa8>)
 8008356:	3a01      	subs	r2, #1
 8008358:	2300      	movs	r3, #0
 800835a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800835e:	f7ff fea7 	bl	80080b0 <__multadd>
 8008362:	4606      	mov	r6, r0
 8008364:	10ad      	asrs	r5, r5, #2
 8008366:	d03d      	beq.n	80083e4 <__pow5mult+0xa0>
 8008368:	69fc      	ldr	r4, [r7, #28]
 800836a:	b97c      	cbnz	r4, 800838c <__pow5mult+0x48>
 800836c:	2010      	movs	r0, #16
 800836e:	f7ff fd87 	bl	8007e80 <malloc>
 8008372:	4602      	mov	r2, r0
 8008374:	61f8      	str	r0, [r7, #28]
 8008376:	b928      	cbnz	r0, 8008384 <__pow5mult+0x40>
 8008378:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800837c:	4b1c      	ldr	r3, [pc, #112]	@ (80083f0 <__pow5mult+0xac>)
 800837e:	481d      	ldr	r0, [pc, #116]	@ (80083f4 <__pow5mult+0xb0>)
 8008380:	f000 fbe6 	bl	8008b50 <__assert_func>
 8008384:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008388:	6004      	str	r4, [r0, #0]
 800838a:	60c4      	str	r4, [r0, #12]
 800838c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008390:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008394:	b94c      	cbnz	r4, 80083aa <__pow5mult+0x66>
 8008396:	f240 2171 	movw	r1, #625	@ 0x271
 800839a:	4638      	mov	r0, r7
 800839c:	f7ff ff1a 	bl	80081d4 <__i2b>
 80083a0:	2300      	movs	r3, #0
 80083a2:	4604      	mov	r4, r0
 80083a4:	f8c8 0008 	str.w	r0, [r8, #8]
 80083a8:	6003      	str	r3, [r0, #0]
 80083aa:	f04f 0900 	mov.w	r9, #0
 80083ae:	07eb      	lsls	r3, r5, #31
 80083b0:	d50a      	bpl.n	80083c8 <__pow5mult+0x84>
 80083b2:	4631      	mov	r1, r6
 80083b4:	4622      	mov	r2, r4
 80083b6:	4638      	mov	r0, r7
 80083b8:	f7ff ff22 	bl	8008200 <__multiply>
 80083bc:	4680      	mov	r8, r0
 80083be:	4631      	mov	r1, r6
 80083c0:	4638      	mov	r0, r7
 80083c2:	f7ff fe53 	bl	800806c <_Bfree>
 80083c6:	4646      	mov	r6, r8
 80083c8:	106d      	asrs	r5, r5, #1
 80083ca:	d00b      	beq.n	80083e4 <__pow5mult+0xa0>
 80083cc:	6820      	ldr	r0, [r4, #0]
 80083ce:	b938      	cbnz	r0, 80083e0 <__pow5mult+0x9c>
 80083d0:	4622      	mov	r2, r4
 80083d2:	4621      	mov	r1, r4
 80083d4:	4638      	mov	r0, r7
 80083d6:	f7ff ff13 	bl	8008200 <__multiply>
 80083da:	6020      	str	r0, [r4, #0]
 80083dc:	f8c0 9000 	str.w	r9, [r0]
 80083e0:	4604      	mov	r4, r0
 80083e2:	e7e4      	b.n	80083ae <__pow5mult+0x6a>
 80083e4:	4630      	mov	r0, r6
 80083e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083ea:	bf00      	nop
 80083ec:	08009434 	.word	0x08009434
 80083f0:	08009303 	.word	0x08009303
 80083f4:	08009383 	.word	0x08009383

080083f8 <__lshift>:
 80083f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083fc:	460c      	mov	r4, r1
 80083fe:	4607      	mov	r7, r0
 8008400:	4691      	mov	r9, r2
 8008402:	6923      	ldr	r3, [r4, #16]
 8008404:	6849      	ldr	r1, [r1, #4]
 8008406:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800840a:	68a3      	ldr	r3, [r4, #8]
 800840c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008410:	f108 0601 	add.w	r6, r8, #1
 8008414:	42b3      	cmp	r3, r6
 8008416:	db0b      	blt.n	8008430 <__lshift+0x38>
 8008418:	4638      	mov	r0, r7
 800841a:	f7ff fde7 	bl	8007fec <_Balloc>
 800841e:	4605      	mov	r5, r0
 8008420:	b948      	cbnz	r0, 8008436 <__lshift+0x3e>
 8008422:	4602      	mov	r2, r0
 8008424:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008428:	4b27      	ldr	r3, [pc, #156]	@ (80084c8 <__lshift+0xd0>)
 800842a:	4828      	ldr	r0, [pc, #160]	@ (80084cc <__lshift+0xd4>)
 800842c:	f000 fb90 	bl	8008b50 <__assert_func>
 8008430:	3101      	adds	r1, #1
 8008432:	005b      	lsls	r3, r3, #1
 8008434:	e7ee      	b.n	8008414 <__lshift+0x1c>
 8008436:	2300      	movs	r3, #0
 8008438:	f100 0114 	add.w	r1, r0, #20
 800843c:	f100 0210 	add.w	r2, r0, #16
 8008440:	4618      	mov	r0, r3
 8008442:	4553      	cmp	r3, sl
 8008444:	db33      	blt.n	80084ae <__lshift+0xb6>
 8008446:	6920      	ldr	r0, [r4, #16]
 8008448:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800844c:	f104 0314 	add.w	r3, r4, #20
 8008450:	f019 091f 	ands.w	r9, r9, #31
 8008454:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008458:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800845c:	d02b      	beq.n	80084b6 <__lshift+0xbe>
 800845e:	468a      	mov	sl, r1
 8008460:	2200      	movs	r2, #0
 8008462:	f1c9 0e20 	rsb	lr, r9, #32
 8008466:	6818      	ldr	r0, [r3, #0]
 8008468:	fa00 f009 	lsl.w	r0, r0, r9
 800846c:	4310      	orrs	r0, r2
 800846e:	f84a 0b04 	str.w	r0, [sl], #4
 8008472:	f853 2b04 	ldr.w	r2, [r3], #4
 8008476:	459c      	cmp	ip, r3
 8008478:	fa22 f20e 	lsr.w	r2, r2, lr
 800847c:	d8f3      	bhi.n	8008466 <__lshift+0x6e>
 800847e:	ebac 0304 	sub.w	r3, ip, r4
 8008482:	3b15      	subs	r3, #21
 8008484:	f023 0303 	bic.w	r3, r3, #3
 8008488:	3304      	adds	r3, #4
 800848a:	f104 0015 	add.w	r0, r4, #21
 800848e:	4560      	cmp	r0, ip
 8008490:	bf88      	it	hi
 8008492:	2304      	movhi	r3, #4
 8008494:	50ca      	str	r2, [r1, r3]
 8008496:	b10a      	cbz	r2, 800849c <__lshift+0xa4>
 8008498:	f108 0602 	add.w	r6, r8, #2
 800849c:	3e01      	subs	r6, #1
 800849e:	4638      	mov	r0, r7
 80084a0:	4621      	mov	r1, r4
 80084a2:	612e      	str	r6, [r5, #16]
 80084a4:	f7ff fde2 	bl	800806c <_Bfree>
 80084a8:	4628      	mov	r0, r5
 80084aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084ae:	f842 0f04 	str.w	r0, [r2, #4]!
 80084b2:	3301      	adds	r3, #1
 80084b4:	e7c5      	b.n	8008442 <__lshift+0x4a>
 80084b6:	3904      	subs	r1, #4
 80084b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80084bc:	459c      	cmp	ip, r3
 80084be:	f841 2f04 	str.w	r2, [r1, #4]!
 80084c2:	d8f9      	bhi.n	80084b8 <__lshift+0xc0>
 80084c4:	e7ea      	b.n	800849c <__lshift+0xa4>
 80084c6:	bf00      	nop
 80084c8:	08009372 	.word	0x08009372
 80084cc:	08009383 	.word	0x08009383

080084d0 <__mcmp>:
 80084d0:	4603      	mov	r3, r0
 80084d2:	690a      	ldr	r2, [r1, #16]
 80084d4:	6900      	ldr	r0, [r0, #16]
 80084d6:	b530      	push	{r4, r5, lr}
 80084d8:	1a80      	subs	r0, r0, r2
 80084da:	d10e      	bne.n	80084fa <__mcmp+0x2a>
 80084dc:	3314      	adds	r3, #20
 80084de:	3114      	adds	r1, #20
 80084e0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80084e4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80084e8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80084ec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80084f0:	4295      	cmp	r5, r2
 80084f2:	d003      	beq.n	80084fc <__mcmp+0x2c>
 80084f4:	d205      	bcs.n	8008502 <__mcmp+0x32>
 80084f6:	f04f 30ff 	mov.w	r0, #4294967295
 80084fa:	bd30      	pop	{r4, r5, pc}
 80084fc:	42a3      	cmp	r3, r4
 80084fe:	d3f3      	bcc.n	80084e8 <__mcmp+0x18>
 8008500:	e7fb      	b.n	80084fa <__mcmp+0x2a>
 8008502:	2001      	movs	r0, #1
 8008504:	e7f9      	b.n	80084fa <__mcmp+0x2a>
	...

08008508 <__mdiff>:
 8008508:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800850c:	4689      	mov	r9, r1
 800850e:	4606      	mov	r6, r0
 8008510:	4611      	mov	r1, r2
 8008512:	4648      	mov	r0, r9
 8008514:	4614      	mov	r4, r2
 8008516:	f7ff ffdb 	bl	80084d0 <__mcmp>
 800851a:	1e05      	subs	r5, r0, #0
 800851c:	d112      	bne.n	8008544 <__mdiff+0x3c>
 800851e:	4629      	mov	r1, r5
 8008520:	4630      	mov	r0, r6
 8008522:	f7ff fd63 	bl	8007fec <_Balloc>
 8008526:	4602      	mov	r2, r0
 8008528:	b928      	cbnz	r0, 8008536 <__mdiff+0x2e>
 800852a:	f240 2137 	movw	r1, #567	@ 0x237
 800852e:	4b3e      	ldr	r3, [pc, #248]	@ (8008628 <__mdiff+0x120>)
 8008530:	483e      	ldr	r0, [pc, #248]	@ (800862c <__mdiff+0x124>)
 8008532:	f000 fb0d 	bl	8008b50 <__assert_func>
 8008536:	2301      	movs	r3, #1
 8008538:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800853c:	4610      	mov	r0, r2
 800853e:	b003      	add	sp, #12
 8008540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008544:	bfbc      	itt	lt
 8008546:	464b      	movlt	r3, r9
 8008548:	46a1      	movlt	r9, r4
 800854a:	4630      	mov	r0, r6
 800854c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008550:	bfba      	itte	lt
 8008552:	461c      	movlt	r4, r3
 8008554:	2501      	movlt	r5, #1
 8008556:	2500      	movge	r5, #0
 8008558:	f7ff fd48 	bl	8007fec <_Balloc>
 800855c:	4602      	mov	r2, r0
 800855e:	b918      	cbnz	r0, 8008568 <__mdiff+0x60>
 8008560:	f240 2145 	movw	r1, #581	@ 0x245
 8008564:	4b30      	ldr	r3, [pc, #192]	@ (8008628 <__mdiff+0x120>)
 8008566:	e7e3      	b.n	8008530 <__mdiff+0x28>
 8008568:	f100 0b14 	add.w	fp, r0, #20
 800856c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008570:	f109 0310 	add.w	r3, r9, #16
 8008574:	60c5      	str	r5, [r0, #12]
 8008576:	f04f 0c00 	mov.w	ip, #0
 800857a:	f109 0514 	add.w	r5, r9, #20
 800857e:	46d9      	mov	r9, fp
 8008580:	6926      	ldr	r6, [r4, #16]
 8008582:	f104 0e14 	add.w	lr, r4, #20
 8008586:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800858a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800858e:	9301      	str	r3, [sp, #4]
 8008590:	9b01      	ldr	r3, [sp, #4]
 8008592:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008596:	f853 af04 	ldr.w	sl, [r3, #4]!
 800859a:	b281      	uxth	r1, r0
 800859c:	9301      	str	r3, [sp, #4]
 800859e:	fa1f f38a 	uxth.w	r3, sl
 80085a2:	1a5b      	subs	r3, r3, r1
 80085a4:	0c00      	lsrs	r0, r0, #16
 80085a6:	4463      	add	r3, ip
 80085a8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80085ac:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80085b0:	b29b      	uxth	r3, r3
 80085b2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80085b6:	4576      	cmp	r6, lr
 80085b8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80085bc:	f849 3b04 	str.w	r3, [r9], #4
 80085c0:	d8e6      	bhi.n	8008590 <__mdiff+0x88>
 80085c2:	1b33      	subs	r3, r6, r4
 80085c4:	3b15      	subs	r3, #21
 80085c6:	f023 0303 	bic.w	r3, r3, #3
 80085ca:	3415      	adds	r4, #21
 80085cc:	3304      	adds	r3, #4
 80085ce:	42a6      	cmp	r6, r4
 80085d0:	bf38      	it	cc
 80085d2:	2304      	movcc	r3, #4
 80085d4:	441d      	add	r5, r3
 80085d6:	445b      	add	r3, fp
 80085d8:	461e      	mov	r6, r3
 80085da:	462c      	mov	r4, r5
 80085dc:	4544      	cmp	r4, r8
 80085de:	d30e      	bcc.n	80085fe <__mdiff+0xf6>
 80085e0:	f108 0103 	add.w	r1, r8, #3
 80085e4:	1b49      	subs	r1, r1, r5
 80085e6:	f021 0103 	bic.w	r1, r1, #3
 80085ea:	3d03      	subs	r5, #3
 80085ec:	45a8      	cmp	r8, r5
 80085ee:	bf38      	it	cc
 80085f0:	2100      	movcc	r1, #0
 80085f2:	440b      	add	r3, r1
 80085f4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80085f8:	b199      	cbz	r1, 8008622 <__mdiff+0x11a>
 80085fa:	6117      	str	r7, [r2, #16]
 80085fc:	e79e      	b.n	800853c <__mdiff+0x34>
 80085fe:	46e6      	mov	lr, ip
 8008600:	f854 1b04 	ldr.w	r1, [r4], #4
 8008604:	fa1f fc81 	uxth.w	ip, r1
 8008608:	44f4      	add	ip, lr
 800860a:	0c08      	lsrs	r0, r1, #16
 800860c:	4471      	add	r1, lr
 800860e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008612:	b289      	uxth	r1, r1
 8008614:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008618:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800861c:	f846 1b04 	str.w	r1, [r6], #4
 8008620:	e7dc      	b.n	80085dc <__mdiff+0xd4>
 8008622:	3f01      	subs	r7, #1
 8008624:	e7e6      	b.n	80085f4 <__mdiff+0xec>
 8008626:	bf00      	nop
 8008628:	08009372 	.word	0x08009372
 800862c:	08009383 	.word	0x08009383

08008630 <__d2b>:
 8008630:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008634:	2101      	movs	r1, #1
 8008636:	4690      	mov	r8, r2
 8008638:	4699      	mov	r9, r3
 800863a:	9e08      	ldr	r6, [sp, #32]
 800863c:	f7ff fcd6 	bl	8007fec <_Balloc>
 8008640:	4604      	mov	r4, r0
 8008642:	b930      	cbnz	r0, 8008652 <__d2b+0x22>
 8008644:	4602      	mov	r2, r0
 8008646:	f240 310f 	movw	r1, #783	@ 0x30f
 800864a:	4b23      	ldr	r3, [pc, #140]	@ (80086d8 <__d2b+0xa8>)
 800864c:	4823      	ldr	r0, [pc, #140]	@ (80086dc <__d2b+0xac>)
 800864e:	f000 fa7f 	bl	8008b50 <__assert_func>
 8008652:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008656:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800865a:	b10d      	cbz	r5, 8008660 <__d2b+0x30>
 800865c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008660:	9301      	str	r3, [sp, #4]
 8008662:	f1b8 0300 	subs.w	r3, r8, #0
 8008666:	d024      	beq.n	80086b2 <__d2b+0x82>
 8008668:	4668      	mov	r0, sp
 800866a:	9300      	str	r3, [sp, #0]
 800866c:	f7ff fd85 	bl	800817a <__lo0bits>
 8008670:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008674:	b1d8      	cbz	r0, 80086ae <__d2b+0x7e>
 8008676:	f1c0 0320 	rsb	r3, r0, #32
 800867a:	fa02 f303 	lsl.w	r3, r2, r3
 800867e:	430b      	orrs	r3, r1
 8008680:	40c2      	lsrs	r2, r0
 8008682:	6163      	str	r3, [r4, #20]
 8008684:	9201      	str	r2, [sp, #4]
 8008686:	9b01      	ldr	r3, [sp, #4]
 8008688:	2b00      	cmp	r3, #0
 800868a:	bf0c      	ite	eq
 800868c:	2201      	moveq	r2, #1
 800868e:	2202      	movne	r2, #2
 8008690:	61a3      	str	r3, [r4, #24]
 8008692:	6122      	str	r2, [r4, #16]
 8008694:	b1ad      	cbz	r5, 80086c2 <__d2b+0x92>
 8008696:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800869a:	4405      	add	r5, r0
 800869c:	6035      	str	r5, [r6, #0]
 800869e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80086a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086a4:	6018      	str	r0, [r3, #0]
 80086a6:	4620      	mov	r0, r4
 80086a8:	b002      	add	sp, #8
 80086aa:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80086ae:	6161      	str	r1, [r4, #20]
 80086b0:	e7e9      	b.n	8008686 <__d2b+0x56>
 80086b2:	a801      	add	r0, sp, #4
 80086b4:	f7ff fd61 	bl	800817a <__lo0bits>
 80086b8:	9b01      	ldr	r3, [sp, #4]
 80086ba:	2201      	movs	r2, #1
 80086bc:	6163      	str	r3, [r4, #20]
 80086be:	3020      	adds	r0, #32
 80086c0:	e7e7      	b.n	8008692 <__d2b+0x62>
 80086c2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80086c6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80086ca:	6030      	str	r0, [r6, #0]
 80086cc:	6918      	ldr	r0, [r3, #16]
 80086ce:	f7ff fd35 	bl	800813c <__hi0bits>
 80086d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80086d6:	e7e4      	b.n	80086a2 <__d2b+0x72>
 80086d8:	08009372 	.word	0x08009372
 80086dc:	08009383 	.word	0x08009383

080086e0 <__ssputs_r>:
 80086e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086e4:	461f      	mov	r7, r3
 80086e6:	688e      	ldr	r6, [r1, #8]
 80086e8:	4682      	mov	sl, r0
 80086ea:	42be      	cmp	r6, r7
 80086ec:	460c      	mov	r4, r1
 80086ee:	4690      	mov	r8, r2
 80086f0:	680b      	ldr	r3, [r1, #0]
 80086f2:	d82d      	bhi.n	8008750 <__ssputs_r+0x70>
 80086f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80086f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80086fc:	d026      	beq.n	800874c <__ssputs_r+0x6c>
 80086fe:	6965      	ldr	r5, [r4, #20]
 8008700:	6909      	ldr	r1, [r1, #16]
 8008702:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008706:	eba3 0901 	sub.w	r9, r3, r1
 800870a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800870e:	1c7b      	adds	r3, r7, #1
 8008710:	444b      	add	r3, r9
 8008712:	106d      	asrs	r5, r5, #1
 8008714:	429d      	cmp	r5, r3
 8008716:	bf38      	it	cc
 8008718:	461d      	movcc	r5, r3
 800871a:	0553      	lsls	r3, r2, #21
 800871c:	d527      	bpl.n	800876e <__ssputs_r+0x8e>
 800871e:	4629      	mov	r1, r5
 8008720:	f7ff fbd8 	bl	8007ed4 <_malloc_r>
 8008724:	4606      	mov	r6, r0
 8008726:	b360      	cbz	r0, 8008782 <__ssputs_r+0xa2>
 8008728:	464a      	mov	r2, r9
 800872a:	6921      	ldr	r1, [r4, #16]
 800872c:	f000 fa02 	bl	8008b34 <memcpy>
 8008730:	89a3      	ldrh	r3, [r4, #12]
 8008732:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008736:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800873a:	81a3      	strh	r3, [r4, #12]
 800873c:	6126      	str	r6, [r4, #16]
 800873e:	444e      	add	r6, r9
 8008740:	6026      	str	r6, [r4, #0]
 8008742:	463e      	mov	r6, r7
 8008744:	6165      	str	r5, [r4, #20]
 8008746:	eba5 0509 	sub.w	r5, r5, r9
 800874a:	60a5      	str	r5, [r4, #8]
 800874c:	42be      	cmp	r6, r7
 800874e:	d900      	bls.n	8008752 <__ssputs_r+0x72>
 8008750:	463e      	mov	r6, r7
 8008752:	4632      	mov	r2, r6
 8008754:	4641      	mov	r1, r8
 8008756:	6820      	ldr	r0, [r4, #0]
 8008758:	f000 f9c2 	bl	8008ae0 <memmove>
 800875c:	2000      	movs	r0, #0
 800875e:	68a3      	ldr	r3, [r4, #8]
 8008760:	1b9b      	subs	r3, r3, r6
 8008762:	60a3      	str	r3, [r4, #8]
 8008764:	6823      	ldr	r3, [r4, #0]
 8008766:	4433      	add	r3, r6
 8008768:	6023      	str	r3, [r4, #0]
 800876a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800876e:	462a      	mov	r2, r5
 8008770:	f000 fa32 	bl	8008bd8 <_realloc_r>
 8008774:	4606      	mov	r6, r0
 8008776:	2800      	cmp	r0, #0
 8008778:	d1e0      	bne.n	800873c <__ssputs_r+0x5c>
 800877a:	4650      	mov	r0, sl
 800877c:	6921      	ldr	r1, [r4, #16]
 800877e:	f7ff fb37 	bl	8007df0 <_free_r>
 8008782:	230c      	movs	r3, #12
 8008784:	f8ca 3000 	str.w	r3, [sl]
 8008788:	89a3      	ldrh	r3, [r4, #12]
 800878a:	f04f 30ff 	mov.w	r0, #4294967295
 800878e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008792:	81a3      	strh	r3, [r4, #12]
 8008794:	e7e9      	b.n	800876a <__ssputs_r+0x8a>
	...

08008798 <_svfiprintf_r>:
 8008798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800879c:	4698      	mov	r8, r3
 800879e:	898b      	ldrh	r3, [r1, #12]
 80087a0:	4607      	mov	r7, r0
 80087a2:	061b      	lsls	r3, r3, #24
 80087a4:	460d      	mov	r5, r1
 80087a6:	4614      	mov	r4, r2
 80087a8:	b09d      	sub	sp, #116	@ 0x74
 80087aa:	d510      	bpl.n	80087ce <_svfiprintf_r+0x36>
 80087ac:	690b      	ldr	r3, [r1, #16]
 80087ae:	b973      	cbnz	r3, 80087ce <_svfiprintf_r+0x36>
 80087b0:	2140      	movs	r1, #64	@ 0x40
 80087b2:	f7ff fb8f 	bl	8007ed4 <_malloc_r>
 80087b6:	6028      	str	r0, [r5, #0]
 80087b8:	6128      	str	r0, [r5, #16]
 80087ba:	b930      	cbnz	r0, 80087ca <_svfiprintf_r+0x32>
 80087bc:	230c      	movs	r3, #12
 80087be:	603b      	str	r3, [r7, #0]
 80087c0:	f04f 30ff 	mov.w	r0, #4294967295
 80087c4:	b01d      	add	sp, #116	@ 0x74
 80087c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087ca:	2340      	movs	r3, #64	@ 0x40
 80087cc:	616b      	str	r3, [r5, #20]
 80087ce:	2300      	movs	r3, #0
 80087d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80087d2:	2320      	movs	r3, #32
 80087d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80087d8:	2330      	movs	r3, #48	@ 0x30
 80087da:	f04f 0901 	mov.w	r9, #1
 80087de:	f8cd 800c 	str.w	r8, [sp, #12]
 80087e2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800897c <_svfiprintf_r+0x1e4>
 80087e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80087ea:	4623      	mov	r3, r4
 80087ec:	469a      	mov	sl, r3
 80087ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087f2:	b10a      	cbz	r2, 80087f8 <_svfiprintf_r+0x60>
 80087f4:	2a25      	cmp	r2, #37	@ 0x25
 80087f6:	d1f9      	bne.n	80087ec <_svfiprintf_r+0x54>
 80087f8:	ebba 0b04 	subs.w	fp, sl, r4
 80087fc:	d00b      	beq.n	8008816 <_svfiprintf_r+0x7e>
 80087fe:	465b      	mov	r3, fp
 8008800:	4622      	mov	r2, r4
 8008802:	4629      	mov	r1, r5
 8008804:	4638      	mov	r0, r7
 8008806:	f7ff ff6b 	bl	80086e0 <__ssputs_r>
 800880a:	3001      	adds	r0, #1
 800880c:	f000 80a7 	beq.w	800895e <_svfiprintf_r+0x1c6>
 8008810:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008812:	445a      	add	r2, fp
 8008814:	9209      	str	r2, [sp, #36]	@ 0x24
 8008816:	f89a 3000 	ldrb.w	r3, [sl]
 800881a:	2b00      	cmp	r3, #0
 800881c:	f000 809f 	beq.w	800895e <_svfiprintf_r+0x1c6>
 8008820:	2300      	movs	r3, #0
 8008822:	f04f 32ff 	mov.w	r2, #4294967295
 8008826:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800882a:	f10a 0a01 	add.w	sl, sl, #1
 800882e:	9304      	str	r3, [sp, #16]
 8008830:	9307      	str	r3, [sp, #28]
 8008832:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008836:	931a      	str	r3, [sp, #104]	@ 0x68
 8008838:	4654      	mov	r4, sl
 800883a:	2205      	movs	r2, #5
 800883c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008840:	484e      	ldr	r0, [pc, #312]	@ (800897c <_svfiprintf_r+0x1e4>)
 8008842:	f7fe fc68 	bl	8007116 <memchr>
 8008846:	9a04      	ldr	r2, [sp, #16]
 8008848:	b9d8      	cbnz	r0, 8008882 <_svfiprintf_r+0xea>
 800884a:	06d0      	lsls	r0, r2, #27
 800884c:	bf44      	itt	mi
 800884e:	2320      	movmi	r3, #32
 8008850:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008854:	0711      	lsls	r1, r2, #28
 8008856:	bf44      	itt	mi
 8008858:	232b      	movmi	r3, #43	@ 0x2b
 800885a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800885e:	f89a 3000 	ldrb.w	r3, [sl]
 8008862:	2b2a      	cmp	r3, #42	@ 0x2a
 8008864:	d015      	beq.n	8008892 <_svfiprintf_r+0xfa>
 8008866:	4654      	mov	r4, sl
 8008868:	2000      	movs	r0, #0
 800886a:	f04f 0c0a 	mov.w	ip, #10
 800886e:	9a07      	ldr	r2, [sp, #28]
 8008870:	4621      	mov	r1, r4
 8008872:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008876:	3b30      	subs	r3, #48	@ 0x30
 8008878:	2b09      	cmp	r3, #9
 800887a:	d94b      	bls.n	8008914 <_svfiprintf_r+0x17c>
 800887c:	b1b0      	cbz	r0, 80088ac <_svfiprintf_r+0x114>
 800887e:	9207      	str	r2, [sp, #28]
 8008880:	e014      	b.n	80088ac <_svfiprintf_r+0x114>
 8008882:	eba0 0308 	sub.w	r3, r0, r8
 8008886:	fa09 f303 	lsl.w	r3, r9, r3
 800888a:	4313      	orrs	r3, r2
 800888c:	46a2      	mov	sl, r4
 800888e:	9304      	str	r3, [sp, #16]
 8008890:	e7d2      	b.n	8008838 <_svfiprintf_r+0xa0>
 8008892:	9b03      	ldr	r3, [sp, #12]
 8008894:	1d19      	adds	r1, r3, #4
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	9103      	str	r1, [sp, #12]
 800889a:	2b00      	cmp	r3, #0
 800889c:	bfbb      	ittet	lt
 800889e:	425b      	neglt	r3, r3
 80088a0:	f042 0202 	orrlt.w	r2, r2, #2
 80088a4:	9307      	strge	r3, [sp, #28]
 80088a6:	9307      	strlt	r3, [sp, #28]
 80088a8:	bfb8      	it	lt
 80088aa:	9204      	strlt	r2, [sp, #16]
 80088ac:	7823      	ldrb	r3, [r4, #0]
 80088ae:	2b2e      	cmp	r3, #46	@ 0x2e
 80088b0:	d10a      	bne.n	80088c8 <_svfiprintf_r+0x130>
 80088b2:	7863      	ldrb	r3, [r4, #1]
 80088b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80088b6:	d132      	bne.n	800891e <_svfiprintf_r+0x186>
 80088b8:	9b03      	ldr	r3, [sp, #12]
 80088ba:	3402      	adds	r4, #2
 80088bc:	1d1a      	adds	r2, r3, #4
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	9203      	str	r2, [sp, #12]
 80088c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80088c6:	9305      	str	r3, [sp, #20]
 80088c8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008980 <_svfiprintf_r+0x1e8>
 80088cc:	2203      	movs	r2, #3
 80088ce:	4650      	mov	r0, sl
 80088d0:	7821      	ldrb	r1, [r4, #0]
 80088d2:	f7fe fc20 	bl	8007116 <memchr>
 80088d6:	b138      	cbz	r0, 80088e8 <_svfiprintf_r+0x150>
 80088d8:	2240      	movs	r2, #64	@ 0x40
 80088da:	9b04      	ldr	r3, [sp, #16]
 80088dc:	eba0 000a 	sub.w	r0, r0, sl
 80088e0:	4082      	lsls	r2, r0
 80088e2:	4313      	orrs	r3, r2
 80088e4:	3401      	adds	r4, #1
 80088e6:	9304      	str	r3, [sp, #16]
 80088e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088ec:	2206      	movs	r2, #6
 80088ee:	4825      	ldr	r0, [pc, #148]	@ (8008984 <_svfiprintf_r+0x1ec>)
 80088f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80088f4:	f7fe fc0f 	bl	8007116 <memchr>
 80088f8:	2800      	cmp	r0, #0
 80088fa:	d036      	beq.n	800896a <_svfiprintf_r+0x1d2>
 80088fc:	4b22      	ldr	r3, [pc, #136]	@ (8008988 <_svfiprintf_r+0x1f0>)
 80088fe:	bb1b      	cbnz	r3, 8008948 <_svfiprintf_r+0x1b0>
 8008900:	9b03      	ldr	r3, [sp, #12]
 8008902:	3307      	adds	r3, #7
 8008904:	f023 0307 	bic.w	r3, r3, #7
 8008908:	3308      	adds	r3, #8
 800890a:	9303      	str	r3, [sp, #12]
 800890c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800890e:	4433      	add	r3, r6
 8008910:	9309      	str	r3, [sp, #36]	@ 0x24
 8008912:	e76a      	b.n	80087ea <_svfiprintf_r+0x52>
 8008914:	460c      	mov	r4, r1
 8008916:	2001      	movs	r0, #1
 8008918:	fb0c 3202 	mla	r2, ip, r2, r3
 800891c:	e7a8      	b.n	8008870 <_svfiprintf_r+0xd8>
 800891e:	2300      	movs	r3, #0
 8008920:	f04f 0c0a 	mov.w	ip, #10
 8008924:	4619      	mov	r1, r3
 8008926:	3401      	adds	r4, #1
 8008928:	9305      	str	r3, [sp, #20]
 800892a:	4620      	mov	r0, r4
 800892c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008930:	3a30      	subs	r2, #48	@ 0x30
 8008932:	2a09      	cmp	r2, #9
 8008934:	d903      	bls.n	800893e <_svfiprintf_r+0x1a6>
 8008936:	2b00      	cmp	r3, #0
 8008938:	d0c6      	beq.n	80088c8 <_svfiprintf_r+0x130>
 800893a:	9105      	str	r1, [sp, #20]
 800893c:	e7c4      	b.n	80088c8 <_svfiprintf_r+0x130>
 800893e:	4604      	mov	r4, r0
 8008940:	2301      	movs	r3, #1
 8008942:	fb0c 2101 	mla	r1, ip, r1, r2
 8008946:	e7f0      	b.n	800892a <_svfiprintf_r+0x192>
 8008948:	ab03      	add	r3, sp, #12
 800894a:	9300      	str	r3, [sp, #0]
 800894c:	462a      	mov	r2, r5
 800894e:	4638      	mov	r0, r7
 8008950:	4b0e      	ldr	r3, [pc, #56]	@ (800898c <_svfiprintf_r+0x1f4>)
 8008952:	a904      	add	r1, sp, #16
 8008954:	f7fd fe7c 	bl	8006650 <_printf_float>
 8008958:	1c42      	adds	r2, r0, #1
 800895a:	4606      	mov	r6, r0
 800895c:	d1d6      	bne.n	800890c <_svfiprintf_r+0x174>
 800895e:	89ab      	ldrh	r3, [r5, #12]
 8008960:	065b      	lsls	r3, r3, #25
 8008962:	f53f af2d 	bmi.w	80087c0 <_svfiprintf_r+0x28>
 8008966:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008968:	e72c      	b.n	80087c4 <_svfiprintf_r+0x2c>
 800896a:	ab03      	add	r3, sp, #12
 800896c:	9300      	str	r3, [sp, #0]
 800896e:	462a      	mov	r2, r5
 8008970:	4638      	mov	r0, r7
 8008972:	4b06      	ldr	r3, [pc, #24]	@ (800898c <_svfiprintf_r+0x1f4>)
 8008974:	a904      	add	r1, sp, #16
 8008976:	f7fe f909 	bl	8006b8c <_printf_i>
 800897a:	e7ed      	b.n	8008958 <_svfiprintf_r+0x1c0>
 800897c:	080093dc 	.word	0x080093dc
 8008980:	080093e2 	.word	0x080093e2
 8008984:	080093e6 	.word	0x080093e6
 8008988:	08006651 	.word	0x08006651
 800898c:	080086e1 	.word	0x080086e1

08008990 <__sflush_r>:
 8008990:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008996:	0716      	lsls	r6, r2, #28
 8008998:	4605      	mov	r5, r0
 800899a:	460c      	mov	r4, r1
 800899c:	d454      	bmi.n	8008a48 <__sflush_r+0xb8>
 800899e:	684b      	ldr	r3, [r1, #4]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	dc02      	bgt.n	80089aa <__sflush_r+0x1a>
 80089a4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	dd48      	ble.n	8008a3c <__sflush_r+0xac>
 80089aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80089ac:	2e00      	cmp	r6, #0
 80089ae:	d045      	beq.n	8008a3c <__sflush_r+0xac>
 80089b0:	2300      	movs	r3, #0
 80089b2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80089b6:	682f      	ldr	r7, [r5, #0]
 80089b8:	6a21      	ldr	r1, [r4, #32]
 80089ba:	602b      	str	r3, [r5, #0]
 80089bc:	d030      	beq.n	8008a20 <__sflush_r+0x90>
 80089be:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80089c0:	89a3      	ldrh	r3, [r4, #12]
 80089c2:	0759      	lsls	r1, r3, #29
 80089c4:	d505      	bpl.n	80089d2 <__sflush_r+0x42>
 80089c6:	6863      	ldr	r3, [r4, #4]
 80089c8:	1ad2      	subs	r2, r2, r3
 80089ca:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80089cc:	b10b      	cbz	r3, 80089d2 <__sflush_r+0x42>
 80089ce:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80089d0:	1ad2      	subs	r2, r2, r3
 80089d2:	2300      	movs	r3, #0
 80089d4:	4628      	mov	r0, r5
 80089d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80089d8:	6a21      	ldr	r1, [r4, #32]
 80089da:	47b0      	blx	r6
 80089dc:	1c43      	adds	r3, r0, #1
 80089de:	89a3      	ldrh	r3, [r4, #12]
 80089e0:	d106      	bne.n	80089f0 <__sflush_r+0x60>
 80089e2:	6829      	ldr	r1, [r5, #0]
 80089e4:	291d      	cmp	r1, #29
 80089e6:	d82b      	bhi.n	8008a40 <__sflush_r+0xb0>
 80089e8:	4a28      	ldr	r2, [pc, #160]	@ (8008a8c <__sflush_r+0xfc>)
 80089ea:	40ca      	lsrs	r2, r1
 80089ec:	07d6      	lsls	r6, r2, #31
 80089ee:	d527      	bpl.n	8008a40 <__sflush_r+0xb0>
 80089f0:	2200      	movs	r2, #0
 80089f2:	6062      	str	r2, [r4, #4]
 80089f4:	6922      	ldr	r2, [r4, #16]
 80089f6:	04d9      	lsls	r1, r3, #19
 80089f8:	6022      	str	r2, [r4, #0]
 80089fa:	d504      	bpl.n	8008a06 <__sflush_r+0x76>
 80089fc:	1c42      	adds	r2, r0, #1
 80089fe:	d101      	bne.n	8008a04 <__sflush_r+0x74>
 8008a00:	682b      	ldr	r3, [r5, #0]
 8008a02:	b903      	cbnz	r3, 8008a06 <__sflush_r+0x76>
 8008a04:	6560      	str	r0, [r4, #84]	@ 0x54
 8008a06:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a08:	602f      	str	r7, [r5, #0]
 8008a0a:	b1b9      	cbz	r1, 8008a3c <__sflush_r+0xac>
 8008a0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a10:	4299      	cmp	r1, r3
 8008a12:	d002      	beq.n	8008a1a <__sflush_r+0x8a>
 8008a14:	4628      	mov	r0, r5
 8008a16:	f7ff f9eb 	bl	8007df0 <_free_r>
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a1e:	e00d      	b.n	8008a3c <__sflush_r+0xac>
 8008a20:	2301      	movs	r3, #1
 8008a22:	4628      	mov	r0, r5
 8008a24:	47b0      	blx	r6
 8008a26:	4602      	mov	r2, r0
 8008a28:	1c50      	adds	r0, r2, #1
 8008a2a:	d1c9      	bne.n	80089c0 <__sflush_r+0x30>
 8008a2c:	682b      	ldr	r3, [r5, #0]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d0c6      	beq.n	80089c0 <__sflush_r+0x30>
 8008a32:	2b1d      	cmp	r3, #29
 8008a34:	d001      	beq.n	8008a3a <__sflush_r+0xaa>
 8008a36:	2b16      	cmp	r3, #22
 8008a38:	d11d      	bne.n	8008a76 <__sflush_r+0xe6>
 8008a3a:	602f      	str	r7, [r5, #0]
 8008a3c:	2000      	movs	r0, #0
 8008a3e:	e021      	b.n	8008a84 <__sflush_r+0xf4>
 8008a40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a44:	b21b      	sxth	r3, r3
 8008a46:	e01a      	b.n	8008a7e <__sflush_r+0xee>
 8008a48:	690f      	ldr	r7, [r1, #16]
 8008a4a:	2f00      	cmp	r7, #0
 8008a4c:	d0f6      	beq.n	8008a3c <__sflush_r+0xac>
 8008a4e:	0793      	lsls	r3, r2, #30
 8008a50:	bf18      	it	ne
 8008a52:	2300      	movne	r3, #0
 8008a54:	680e      	ldr	r6, [r1, #0]
 8008a56:	bf08      	it	eq
 8008a58:	694b      	ldreq	r3, [r1, #20]
 8008a5a:	1bf6      	subs	r6, r6, r7
 8008a5c:	600f      	str	r7, [r1, #0]
 8008a5e:	608b      	str	r3, [r1, #8]
 8008a60:	2e00      	cmp	r6, #0
 8008a62:	ddeb      	ble.n	8008a3c <__sflush_r+0xac>
 8008a64:	4633      	mov	r3, r6
 8008a66:	463a      	mov	r2, r7
 8008a68:	4628      	mov	r0, r5
 8008a6a:	6a21      	ldr	r1, [r4, #32]
 8008a6c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008a70:	47e0      	blx	ip
 8008a72:	2800      	cmp	r0, #0
 8008a74:	dc07      	bgt.n	8008a86 <__sflush_r+0xf6>
 8008a76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8008a82:	81a3      	strh	r3, [r4, #12]
 8008a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a86:	4407      	add	r7, r0
 8008a88:	1a36      	subs	r6, r6, r0
 8008a8a:	e7e9      	b.n	8008a60 <__sflush_r+0xd0>
 8008a8c:	20400001 	.word	0x20400001

08008a90 <_fflush_r>:
 8008a90:	b538      	push	{r3, r4, r5, lr}
 8008a92:	690b      	ldr	r3, [r1, #16]
 8008a94:	4605      	mov	r5, r0
 8008a96:	460c      	mov	r4, r1
 8008a98:	b913      	cbnz	r3, 8008aa0 <_fflush_r+0x10>
 8008a9a:	2500      	movs	r5, #0
 8008a9c:	4628      	mov	r0, r5
 8008a9e:	bd38      	pop	{r3, r4, r5, pc}
 8008aa0:	b118      	cbz	r0, 8008aaa <_fflush_r+0x1a>
 8008aa2:	6a03      	ldr	r3, [r0, #32]
 8008aa4:	b90b      	cbnz	r3, 8008aaa <_fflush_r+0x1a>
 8008aa6:	f7fe fa1b 	bl	8006ee0 <__sinit>
 8008aaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d0f3      	beq.n	8008a9a <_fflush_r+0xa>
 8008ab2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008ab4:	07d0      	lsls	r0, r2, #31
 8008ab6:	d404      	bmi.n	8008ac2 <_fflush_r+0x32>
 8008ab8:	0599      	lsls	r1, r3, #22
 8008aba:	d402      	bmi.n	8008ac2 <_fflush_r+0x32>
 8008abc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008abe:	f7fe fb28 	bl	8007112 <__retarget_lock_acquire_recursive>
 8008ac2:	4628      	mov	r0, r5
 8008ac4:	4621      	mov	r1, r4
 8008ac6:	f7ff ff63 	bl	8008990 <__sflush_r>
 8008aca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008acc:	4605      	mov	r5, r0
 8008ace:	07da      	lsls	r2, r3, #31
 8008ad0:	d4e4      	bmi.n	8008a9c <_fflush_r+0xc>
 8008ad2:	89a3      	ldrh	r3, [r4, #12]
 8008ad4:	059b      	lsls	r3, r3, #22
 8008ad6:	d4e1      	bmi.n	8008a9c <_fflush_r+0xc>
 8008ad8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ada:	f7fe fb1b 	bl	8007114 <__retarget_lock_release_recursive>
 8008ade:	e7dd      	b.n	8008a9c <_fflush_r+0xc>

08008ae0 <memmove>:
 8008ae0:	4288      	cmp	r0, r1
 8008ae2:	b510      	push	{r4, lr}
 8008ae4:	eb01 0402 	add.w	r4, r1, r2
 8008ae8:	d902      	bls.n	8008af0 <memmove+0x10>
 8008aea:	4284      	cmp	r4, r0
 8008aec:	4623      	mov	r3, r4
 8008aee:	d807      	bhi.n	8008b00 <memmove+0x20>
 8008af0:	1e43      	subs	r3, r0, #1
 8008af2:	42a1      	cmp	r1, r4
 8008af4:	d008      	beq.n	8008b08 <memmove+0x28>
 8008af6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008afa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008afe:	e7f8      	b.n	8008af2 <memmove+0x12>
 8008b00:	4601      	mov	r1, r0
 8008b02:	4402      	add	r2, r0
 8008b04:	428a      	cmp	r2, r1
 8008b06:	d100      	bne.n	8008b0a <memmove+0x2a>
 8008b08:	bd10      	pop	{r4, pc}
 8008b0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b12:	e7f7      	b.n	8008b04 <memmove+0x24>

08008b14 <_sbrk_r>:
 8008b14:	b538      	push	{r3, r4, r5, lr}
 8008b16:	2300      	movs	r3, #0
 8008b18:	4d05      	ldr	r5, [pc, #20]	@ (8008b30 <_sbrk_r+0x1c>)
 8008b1a:	4604      	mov	r4, r0
 8008b1c:	4608      	mov	r0, r1
 8008b1e:	602b      	str	r3, [r5, #0]
 8008b20:	f7f8 fe3e 	bl	80017a0 <_sbrk>
 8008b24:	1c43      	adds	r3, r0, #1
 8008b26:	d102      	bne.n	8008b2e <_sbrk_r+0x1a>
 8008b28:	682b      	ldr	r3, [r5, #0]
 8008b2a:	b103      	cbz	r3, 8008b2e <_sbrk_r+0x1a>
 8008b2c:	6023      	str	r3, [r4, #0]
 8008b2e:	bd38      	pop	{r3, r4, r5, pc}
 8008b30:	20000458 	.word	0x20000458

08008b34 <memcpy>:
 8008b34:	440a      	add	r2, r1
 8008b36:	4291      	cmp	r1, r2
 8008b38:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b3c:	d100      	bne.n	8008b40 <memcpy+0xc>
 8008b3e:	4770      	bx	lr
 8008b40:	b510      	push	{r4, lr}
 8008b42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b46:	4291      	cmp	r1, r2
 8008b48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b4c:	d1f9      	bne.n	8008b42 <memcpy+0xe>
 8008b4e:	bd10      	pop	{r4, pc}

08008b50 <__assert_func>:
 8008b50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008b52:	4614      	mov	r4, r2
 8008b54:	461a      	mov	r2, r3
 8008b56:	4b09      	ldr	r3, [pc, #36]	@ (8008b7c <__assert_func+0x2c>)
 8008b58:	4605      	mov	r5, r0
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	68d8      	ldr	r0, [r3, #12]
 8008b5e:	b14c      	cbz	r4, 8008b74 <__assert_func+0x24>
 8008b60:	4b07      	ldr	r3, [pc, #28]	@ (8008b80 <__assert_func+0x30>)
 8008b62:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008b66:	9100      	str	r1, [sp, #0]
 8008b68:	462b      	mov	r3, r5
 8008b6a:	4906      	ldr	r1, [pc, #24]	@ (8008b84 <__assert_func+0x34>)
 8008b6c:	f000 f870 	bl	8008c50 <fiprintf>
 8008b70:	f000 f880 	bl	8008c74 <abort>
 8008b74:	4b04      	ldr	r3, [pc, #16]	@ (8008b88 <__assert_func+0x38>)
 8008b76:	461c      	mov	r4, r3
 8008b78:	e7f3      	b.n	8008b62 <__assert_func+0x12>
 8008b7a:	bf00      	nop
 8008b7c:	20000038 	.word	0x20000038
 8008b80:	080093f7 	.word	0x080093f7
 8008b84:	08009404 	.word	0x08009404
 8008b88:	08009432 	.word	0x08009432

08008b8c <_calloc_r>:
 8008b8c:	b570      	push	{r4, r5, r6, lr}
 8008b8e:	fba1 5402 	umull	r5, r4, r1, r2
 8008b92:	b934      	cbnz	r4, 8008ba2 <_calloc_r+0x16>
 8008b94:	4629      	mov	r1, r5
 8008b96:	f7ff f99d 	bl	8007ed4 <_malloc_r>
 8008b9a:	4606      	mov	r6, r0
 8008b9c:	b928      	cbnz	r0, 8008baa <_calloc_r+0x1e>
 8008b9e:	4630      	mov	r0, r6
 8008ba0:	bd70      	pop	{r4, r5, r6, pc}
 8008ba2:	220c      	movs	r2, #12
 8008ba4:	2600      	movs	r6, #0
 8008ba6:	6002      	str	r2, [r0, #0]
 8008ba8:	e7f9      	b.n	8008b9e <_calloc_r+0x12>
 8008baa:	462a      	mov	r2, r5
 8008bac:	4621      	mov	r1, r4
 8008bae:	f7fe fa32 	bl	8007016 <memset>
 8008bb2:	e7f4      	b.n	8008b9e <_calloc_r+0x12>

08008bb4 <__ascii_mbtowc>:
 8008bb4:	b082      	sub	sp, #8
 8008bb6:	b901      	cbnz	r1, 8008bba <__ascii_mbtowc+0x6>
 8008bb8:	a901      	add	r1, sp, #4
 8008bba:	b142      	cbz	r2, 8008bce <__ascii_mbtowc+0x1a>
 8008bbc:	b14b      	cbz	r3, 8008bd2 <__ascii_mbtowc+0x1e>
 8008bbe:	7813      	ldrb	r3, [r2, #0]
 8008bc0:	600b      	str	r3, [r1, #0]
 8008bc2:	7812      	ldrb	r2, [r2, #0]
 8008bc4:	1e10      	subs	r0, r2, #0
 8008bc6:	bf18      	it	ne
 8008bc8:	2001      	movne	r0, #1
 8008bca:	b002      	add	sp, #8
 8008bcc:	4770      	bx	lr
 8008bce:	4610      	mov	r0, r2
 8008bd0:	e7fb      	b.n	8008bca <__ascii_mbtowc+0x16>
 8008bd2:	f06f 0001 	mvn.w	r0, #1
 8008bd6:	e7f8      	b.n	8008bca <__ascii_mbtowc+0x16>

08008bd8 <_realloc_r>:
 8008bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bdc:	4607      	mov	r7, r0
 8008bde:	4614      	mov	r4, r2
 8008be0:	460d      	mov	r5, r1
 8008be2:	b921      	cbnz	r1, 8008bee <_realloc_r+0x16>
 8008be4:	4611      	mov	r1, r2
 8008be6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bea:	f7ff b973 	b.w	8007ed4 <_malloc_r>
 8008bee:	b92a      	cbnz	r2, 8008bfc <_realloc_r+0x24>
 8008bf0:	f7ff f8fe 	bl	8007df0 <_free_r>
 8008bf4:	4625      	mov	r5, r4
 8008bf6:	4628      	mov	r0, r5
 8008bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bfc:	f000 f841 	bl	8008c82 <_malloc_usable_size_r>
 8008c00:	4284      	cmp	r4, r0
 8008c02:	4606      	mov	r6, r0
 8008c04:	d802      	bhi.n	8008c0c <_realloc_r+0x34>
 8008c06:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008c0a:	d8f4      	bhi.n	8008bf6 <_realloc_r+0x1e>
 8008c0c:	4621      	mov	r1, r4
 8008c0e:	4638      	mov	r0, r7
 8008c10:	f7ff f960 	bl	8007ed4 <_malloc_r>
 8008c14:	4680      	mov	r8, r0
 8008c16:	b908      	cbnz	r0, 8008c1c <_realloc_r+0x44>
 8008c18:	4645      	mov	r5, r8
 8008c1a:	e7ec      	b.n	8008bf6 <_realloc_r+0x1e>
 8008c1c:	42b4      	cmp	r4, r6
 8008c1e:	4622      	mov	r2, r4
 8008c20:	4629      	mov	r1, r5
 8008c22:	bf28      	it	cs
 8008c24:	4632      	movcs	r2, r6
 8008c26:	f7ff ff85 	bl	8008b34 <memcpy>
 8008c2a:	4629      	mov	r1, r5
 8008c2c:	4638      	mov	r0, r7
 8008c2e:	f7ff f8df 	bl	8007df0 <_free_r>
 8008c32:	e7f1      	b.n	8008c18 <_realloc_r+0x40>

08008c34 <__ascii_wctomb>:
 8008c34:	4603      	mov	r3, r0
 8008c36:	4608      	mov	r0, r1
 8008c38:	b141      	cbz	r1, 8008c4c <__ascii_wctomb+0x18>
 8008c3a:	2aff      	cmp	r2, #255	@ 0xff
 8008c3c:	d904      	bls.n	8008c48 <__ascii_wctomb+0x14>
 8008c3e:	228a      	movs	r2, #138	@ 0x8a
 8008c40:	f04f 30ff 	mov.w	r0, #4294967295
 8008c44:	601a      	str	r2, [r3, #0]
 8008c46:	4770      	bx	lr
 8008c48:	2001      	movs	r0, #1
 8008c4a:	700a      	strb	r2, [r1, #0]
 8008c4c:	4770      	bx	lr
	...

08008c50 <fiprintf>:
 8008c50:	b40e      	push	{r1, r2, r3}
 8008c52:	b503      	push	{r0, r1, lr}
 8008c54:	4601      	mov	r1, r0
 8008c56:	ab03      	add	r3, sp, #12
 8008c58:	4805      	ldr	r0, [pc, #20]	@ (8008c70 <fiprintf+0x20>)
 8008c5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c5e:	6800      	ldr	r0, [r0, #0]
 8008c60:	9301      	str	r3, [sp, #4]
 8008c62:	f000 f83d 	bl	8008ce0 <_vfiprintf_r>
 8008c66:	b002      	add	sp, #8
 8008c68:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c6c:	b003      	add	sp, #12
 8008c6e:	4770      	bx	lr
 8008c70:	20000038 	.word	0x20000038

08008c74 <abort>:
 8008c74:	2006      	movs	r0, #6
 8008c76:	b508      	push	{r3, lr}
 8008c78:	f000 fa06 	bl	8009088 <raise>
 8008c7c:	2001      	movs	r0, #1
 8008c7e:	f7f8 fd1a 	bl	80016b6 <_exit>

08008c82 <_malloc_usable_size_r>:
 8008c82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c86:	1f18      	subs	r0, r3, #4
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	bfbc      	itt	lt
 8008c8c:	580b      	ldrlt	r3, [r1, r0]
 8008c8e:	18c0      	addlt	r0, r0, r3
 8008c90:	4770      	bx	lr

08008c92 <__sfputc_r>:
 8008c92:	6893      	ldr	r3, [r2, #8]
 8008c94:	b410      	push	{r4}
 8008c96:	3b01      	subs	r3, #1
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	6093      	str	r3, [r2, #8]
 8008c9c:	da07      	bge.n	8008cae <__sfputc_r+0x1c>
 8008c9e:	6994      	ldr	r4, [r2, #24]
 8008ca0:	42a3      	cmp	r3, r4
 8008ca2:	db01      	blt.n	8008ca8 <__sfputc_r+0x16>
 8008ca4:	290a      	cmp	r1, #10
 8008ca6:	d102      	bne.n	8008cae <__sfputc_r+0x1c>
 8008ca8:	bc10      	pop	{r4}
 8008caa:	f000 b931 	b.w	8008f10 <__swbuf_r>
 8008cae:	6813      	ldr	r3, [r2, #0]
 8008cb0:	1c58      	adds	r0, r3, #1
 8008cb2:	6010      	str	r0, [r2, #0]
 8008cb4:	7019      	strb	r1, [r3, #0]
 8008cb6:	4608      	mov	r0, r1
 8008cb8:	bc10      	pop	{r4}
 8008cba:	4770      	bx	lr

08008cbc <__sfputs_r>:
 8008cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cbe:	4606      	mov	r6, r0
 8008cc0:	460f      	mov	r7, r1
 8008cc2:	4614      	mov	r4, r2
 8008cc4:	18d5      	adds	r5, r2, r3
 8008cc6:	42ac      	cmp	r4, r5
 8008cc8:	d101      	bne.n	8008cce <__sfputs_r+0x12>
 8008cca:	2000      	movs	r0, #0
 8008ccc:	e007      	b.n	8008cde <__sfputs_r+0x22>
 8008cce:	463a      	mov	r2, r7
 8008cd0:	4630      	mov	r0, r6
 8008cd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cd6:	f7ff ffdc 	bl	8008c92 <__sfputc_r>
 8008cda:	1c43      	adds	r3, r0, #1
 8008cdc:	d1f3      	bne.n	8008cc6 <__sfputs_r+0xa>
 8008cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008ce0 <_vfiprintf_r>:
 8008ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ce4:	460d      	mov	r5, r1
 8008ce6:	4614      	mov	r4, r2
 8008ce8:	4698      	mov	r8, r3
 8008cea:	4606      	mov	r6, r0
 8008cec:	b09d      	sub	sp, #116	@ 0x74
 8008cee:	b118      	cbz	r0, 8008cf8 <_vfiprintf_r+0x18>
 8008cf0:	6a03      	ldr	r3, [r0, #32]
 8008cf2:	b90b      	cbnz	r3, 8008cf8 <_vfiprintf_r+0x18>
 8008cf4:	f7fe f8f4 	bl	8006ee0 <__sinit>
 8008cf8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008cfa:	07d9      	lsls	r1, r3, #31
 8008cfc:	d405      	bmi.n	8008d0a <_vfiprintf_r+0x2a>
 8008cfe:	89ab      	ldrh	r3, [r5, #12]
 8008d00:	059a      	lsls	r2, r3, #22
 8008d02:	d402      	bmi.n	8008d0a <_vfiprintf_r+0x2a>
 8008d04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d06:	f7fe fa04 	bl	8007112 <__retarget_lock_acquire_recursive>
 8008d0a:	89ab      	ldrh	r3, [r5, #12]
 8008d0c:	071b      	lsls	r3, r3, #28
 8008d0e:	d501      	bpl.n	8008d14 <_vfiprintf_r+0x34>
 8008d10:	692b      	ldr	r3, [r5, #16]
 8008d12:	b99b      	cbnz	r3, 8008d3c <_vfiprintf_r+0x5c>
 8008d14:	4629      	mov	r1, r5
 8008d16:	4630      	mov	r0, r6
 8008d18:	f000 f938 	bl	8008f8c <__swsetup_r>
 8008d1c:	b170      	cbz	r0, 8008d3c <_vfiprintf_r+0x5c>
 8008d1e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d20:	07dc      	lsls	r4, r3, #31
 8008d22:	d504      	bpl.n	8008d2e <_vfiprintf_r+0x4e>
 8008d24:	f04f 30ff 	mov.w	r0, #4294967295
 8008d28:	b01d      	add	sp, #116	@ 0x74
 8008d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d2e:	89ab      	ldrh	r3, [r5, #12]
 8008d30:	0598      	lsls	r0, r3, #22
 8008d32:	d4f7      	bmi.n	8008d24 <_vfiprintf_r+0x44>
 8008d34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d36:	f7fe f9ed 	bl	8007114 <__retarget_lock_release_recursive>
 8008d3a:	e7f3      	b.n	8008d24 <_vfiprintf_r+0x44>
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d40:	2320      	movs	r3, #32
 8008d42:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008d46:	2330      	movs	r3, #48	@ 0x30
 8008d48:	f04f 0901 	mov.w	r9, #1
 8008d4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d50:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008efc <_vfiprintf_r+0x21c>
 8008d54:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008d58:	4623      	mov	r3, r4
 8008d5a:	469a      	mov	sl, r3
 8008d5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d60:	b10a      	cbz	r2, 8008d66 <_vfiprintf_r+0x86>
 8008d62:	2a25      	cmp	r2, #37	@ 0x25
 8008d64:	d1f9      	bne.n	8008d5a <_vfiprintf_r+0x7a>
 8008d66:	ebba 0b04 	subs.w	fp, sl, r4
 8008d6a:	d00b      	beq.n	8008d84 <_vfiprintf_r+0xa4>
 8008d6c:	465b      	mov	r3, fp
 8008d6e:	4622      	mov	r2, r4
 8008d70:	4629      	mov	r1, r5
 8008d72:	4630      	mov	r0, r6
 8008d74:	f7ff ffa2 	bl	8008cbc <__sfputs_r>
 8008d78:	3001      	adds	r0, #1
 8008d7a:	f000 80a7 	beq.w	8008ecc <_vfiprintf_r+0x1ec>
 8008d7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d80:	445a      	add	r2, fp
 8008d82:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d84:	f89a 3000 	ldrb.w	r3, [sl]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	f000 809f 	beq.w	8008ecc <_vfiprintf_r+0x1ec>
 8008d8e:	2300      	movs	r3, #0
 8008d90:	f04f 32ff 	mov.w	r2, #4294967295
 8008d94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d98:	f10a 0a01 	add.w	sl, sl, #1
 8008d9c:	9304      	str	r3, [sp, #16]
 8008d9e:	9307      	str	r3, [sp, #28]
 8008da0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008da4:	931a      	str	r3, [sp, #104]	@ 0x68
 8008da6:	4654      	mov	r4, sl
 8008da8:	2205      	movs	r2, #5
 8008daa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dae:	4853      	ldr	r0, [pc, #332]	@ (8008efc <_vfiprintf_r+0x21c>)
 8008db0:	f7fe f9b1 	bl	8007116 <memchr>
 8008db4:	9a04      	ldr	r2, [sp, #16]
 8008db6:	b9d8      	cbnz	r0, 8008df0 <_vfiprintf_r+0x110>
 8008db8:	06d1      	lsls	r1, r2, #27
 8008dba:	bf44      	itt	mi
 8008dbc:	2320      	movmi	r3, #32
 8008dbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008dc2:	0713      	lsls	r3, r2, #28
 8008dc4:	bf44      	itt	mi
 8008dc6:	232b      	movmi	r3, #43	@ 0x2b
 8008dc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008dcc:	f89a 3000 	ldrb.w	r3, [sl]
 8008dd0:	2b2a      	cmp	r3, #42	@ 0x2a
 8008dd2:	d015      	beq.n	8008e00 <_vfiprintf_r+0x120>
 8008dd4:	4654      	mov	r4, sl
 8008dd6:	2000      	movs	r0, #0
 8008dd8:	f04f 0c0a 	mov.w	ip, #10
 8008ddc:	9a07      	ldr	r2, [sp, #28]
 8008dde:	4621      	mov	r1, r4
 8008de0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008de4:	3b30      	subs	r3, #48	@ 0x30
 8008de6:	2b09      	cmp	r3, #9
 8008de8:	d94b      	bls.n	8008e82 <_vfiprintf_r+0x1a2>
 8008dea:	b1b0      	cbz	r0, 8008e1a <_vfiprintf_r+0x13a>
 8008dec:	9207      	str	r2, [sp, #28]
 8008dee:	e014      	b.n	8008e1a <_vfiprintf_r+0x13a>
 8008df0:	eba0 0308 	sub.w	r3, r0, r8
 8008df4:	fa09 f303 	lsl.w	r3, r9, r3
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	46a2      	mov	sl, r4
 8008dfc:	9304      	str	r3, [sp, #16]
 8008dfe:	e7d2      	b.n	8008da6 <_vfiprintf_r+0xc6>
 8008e00:	9b03      	ldr	r3, [sp, #12]
 8008e02:	1d19      	adds	r1, r3, #4
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	9103      	str	r1, [sp, #12]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	bfbb      	ittet	lt
 8008e0c:	425b      	neglt	r3, r3
 8008e0e:	f042 0202 	orrlt.w	r2, r2, #2
 8008e12:	9307      	strge	r3, [sp, #28]
 8008e14:	9307      	strlt	r3, [sp, #28]
 8008e16:	bfb8      	it	lt
 8008e18:	9204      	strlt	r2, [sp, #16]
 8008e1a:	7823      	ldrb	r3, [r4, #0]
 8008e1c:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e1e:	d10a      	bne.n	8008e36 <_vfiprintf_r+0x156>
 8008e20:	7863      	ldrb	r3, [r4, #1]
 8008e22:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e24:	d132      	bne.n	8008e8c <_vfiprintf_r+0x1ac>
 8008e26:	9b03      	ldr	r3, [sp, #12]
 8008e28:	3402      	adds	r4, #2
 8008e2a:	1d1a      	adds	r2, r3, #4
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	9203      	str	r2, [sp, #12]
 8008e30:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008e34:	9305      	str	r3, [sp, #20]
 8008e36:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008f00 <_vfiprintf_r+0x220>
 8008e3a:	2203      	movs	r2, #3
 8008e3c:	4650      	mov	r0, sl
 8008e3e:	7821      	ldrb	r1, [r4, #0]
 8008e40:	f7fe f969 	bl	8007116 <memchr>
 8008e44:	b138      	cbz	r0, 8008e56 <_vfiprintf_r+0x176>
 8008e46:	2240      	movs	r2, #64	@ 0x40
 8008e48:	9b04      	ldr	r3, [sp, #16]
 8008e4a:	eba0 000a 	sub.w	r0, r0, sl
 8008e4e:	4082      	lsls	r2, r0
 8008e50:	4313      	orrs	r3, r2
 8008e52:	3401      	adds	r4, #1
 8008e54:	9304      	str	r3, [sp, #16]
 8008e56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e5a:	2206      	movs	r2, #6
 8008e5c:	4829      	ldr	r0, [pc, #164]	@ (8008f04 <_vfiprintf_r+0x224>)
 8008e5e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e62:	f7fe f958 	bl	8007116 <memchr>
 8008e66:	2800      	cmp	r0, #0
 8008e68:	d03f      	beq.n	8008eea <_vfiprintf_r+0x20a>
 8008e6a:	4b27      	ldr	r3, [pc, #156]	@ (8008f08 <_vfiprintf_r+0x228>)
 8008e6c:	bb1b      	cbnz	r3, 8008eb6 <_vfiprintf_r+0x1d6>
 8008e6e:	9b03      	ldr	r3, [sp, #12]
 8008e70:	3307      	adds	r3, #7
 8008e72:	f023 0307 	bic.w	r3, r3, #7
 8008e76:	3308      	adds	r3, #8
 8008e78:	9303      	str	r3, [sp, #12]
 8008e7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e7c:	443b      	add	r3, r7
 8008e7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e80:	e76a      	b.n	8008d58 <_vfiprintf_r+0x78>
 8008e82:	460c      	mov	r4, r1
 8008e84:	2001      	movs	r0, #1
 8008e86:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e8a:	e7a8      	b.n	8008dde <_vfiprintf_r+0xfe>
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	f04f 0c0a 	mov.w	ip, #10
 8008e92:	4619      	mov	r1, r3
 8008e94:	3401      	adds	r4, #1
 8008e96:	9305      	str	r3, [sp, #20]
 8008e98:	4620      	mov	r0, r4
 8008e9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e9e:	3a30      	subs	r2, #48	@ 0x30
 8008ea0:	2a09      	cmp	r2, #9
 8008ea2:	d903      	bls.n	8008eac <_vfiprintf_r+0x1cc>
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d0c6      	beq.n	8008e36 <_vfiprintf_r+0x156>
 8008ea8:	9105      	str	r1, [sp, #20]
 8008eaa:	e7c4      	b.n	8008e36 <_vfiprintf_r+0x156>
 8008eac:	4604      	mov	r4, r0
 8008eae:	2301      	movs	r3, #1
 8008eb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8008eb4:	e7f0      	b.n	8008e98 <_vfiprintf_r+0x1b8>
 8008eb6:	ab03      	add	r3, sp, #12
 8008eb8:	9300      	str	r3, [sp, #0]
 8008eba:	462a      	mov	r2, r5
 8008ebc:	4630      	mov	r0, r6
 8008ebe:	4b13      	ldr	r3, [pc, #76]	@ (8008f0c <_vfiprintf_r+0x22c>)
 8008ec0:	a904      	add	r1, sp, #16
 8008ec2:	f7fd fbc5 	bl	8006650 <_printf_float>
 8008ec6:	4607      	mov	r7, r0
 8008ec8:	1c78      	adds	r0, r7, #1
 8008eca:	d1d6      	bne.n	8008e7a <_vfiprintf_r+0x19a>
 8008ecc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ece:	07d9      	lsls	r1, r3, #31
 8008ed0:	d405      	bmi.n	8008ede <_vfiprintf_r+0x1fe>
 8008ed2:	89ab      	ldrh	r3, [r5, #12]
 8008ed4:	059a      	lsls	r2, r3, #22
 8008ed6:	d402      	bmi.n	8008ede <_vfiprintf_r+0x1fe>
 8008ed8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008eda:	f7fe f91b 	bl	8007114 <__retarget_lock_release_recursive>
 8008ede:	89ab      	ldrh	r3, [r5, #12]
 8008ee0:	065b      	lsls	r3, r3, #25
 8008ee2:	f53f af1f 	bmi.w	8008d24 <_vfiprintf_r+0x44>
 8008ee6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008ee8:	e71e      	b.n	8008d28 <_vfiprintf_r+0x48>
 8008eea:	ab03      	add	r3, sp, #12
 8008eec:	9300      	str	r3, [sp, #0]
 8008eee:	462a      	mov	r2, r5
 8008ef0:	4630      	mov	r0, r6
 8008ef2:	4b06      	ldr	r3, [pc, #24]	@ (8008f0c <_vfiprintf_r+0x22c>)
 8008ef4:	a904      	add	r1, sp, #16
 8008ef6:	f7fd fe49 	bl	8006b8c <_printf_i>
 8008efa:	e7e4      	b.n	8008ec6 <_vfiprintf_r+0x1e6>
 8008efc:	080093dc 	.word	0x080093dc
 8008f00:	080093e2 	.word	0x080093e2
 8008f04:	080093e6 	.word	0x080093e6
 8008f08:	08006651 	.word	0x08006651
 8008f0c:	08008cbd 	.word	0x08008cbd

08008f10 <__swbuf_r>:
 8008f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f12:	460e      	mov	r6, r1
 8008f14:	4614      	mov	r4, r2
 8008f16:	4605      	mov	r5, r0
 8008f18:	b118      	cbz	r0, 8008f22 <__swbuf_r+0x12>
 8008f1a:	6a03      	ldr	r3, [r0, #32]
 8008f1c:	b90b      	cbnz	r3, 8008f22 <__swbuf_r+0x12>
 8008f1e:	f7fd ffdf 	bl	8006ee0 <__sinit>
 8008f22:	69a3      	ldr	r3, [r4, #24]
 8008f24:	60a3      	str	r3, [r4, #8]
 8008f26:	89a3      	ldrh	r3, [r4, #12]
 8008f28:	071a      	lsls	r2, r3, #28
 8008f2a:	d501      	bpl.n	8008f30 <__swbuf_r+0x20>
 8008f2c:	6923      	ldr	r3, [r4, #16]
 8008f2e:	b943      	cbnz	r3, 8008f42 <__swbuf_r+0x32>
 8008f30:	4621      	mov	r1, r4
 8008f32:	4628      	mov	r0, r5
 8008f34:	f000 f82a 	bl	8008f8c <__swsetup_r>
 8008f38:	b118      	cbz	r0, 8008f42 <__swbuf_r+0x32>
 8008f3a:	f04f 37ff 	mov.w	r7, #4294967295
 8008f3e:	4638      	mov	r0, r7
 8008f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f42:	6823      	ldr	r3, [r4, #0]
 8008f44:	6922      	ldr	r2, [r4, #16]
 8008f46:	b2f6      	uxtb	r6, r6
 8008f48:	1a98      	subs	r0, r3, r2
 8008f4a:	6963      	ldr	r3, [r4, #20]
 8008f4c:	4637      	mov	r7, r6
 8008f4e:	4283      	cmp	r3, r0
 8008f50:	dc05      	bgt.n	8008f5e <__swbuf_r+0x4e>
 8008f52:	4621      	mov	r1, r4
 8008f54:	4628      	mov	r0, r5
 8008f56:	f7ff fd9b 	bl	8008a90 <_fflush_r>
 8008f5a:	2800      	cmp	r0, #0
 8008f5c:	d1ed      	bne.n	8008f3a <__swbuf_r+0x2a>
 8008f5e:	68a3      	ldr	r3, [r4, #8]
 8008f60:	3b01      	subs	r3, #1
 8008f62:	60a3      	str	r3, [r4, #8]
 8008f64:	6823      	ldr	r3, [r4, #0]
 8008f66:	1c5a      	adds	r2, r3, #1
 8008f68:	6022      	str	r2, [r4, #0]
 8008f6a:	701e      	strb	r6, [r3, #0]
 8008f6c:	6962      	ldr	r2, [r4, #20]
 8008f6e:	1c43      	adds	r3, r0, #1
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d004      	beq.n	8008f7e <__swbuf_r+0x6e>
 8008f74:	89a3      	ldrh	r3, [r4, #12]
 8008f76:	07db      	lsls	r3, r3, #31
 8008f78:	d5e1      	bpl.n	8008f3e <__swbuf_r+0x2e>
 8008f7a:	2e0a      	cmp	r6, #10
 8008f7c:	d1df      	bne.n	8008f3e <__swbuf_r+0x2e>
 8008f7e:	4621      	mov	r1, r4
 8008f80:	4628      	mov	r0, r5
 8008f82:	f7ff fd85 	bl	8008a90 <_fflush_r>
 8008f86:	2800      	cmp	r0, #0
 8008f88:	d0d9      	beq.n	8008f3e <__swbuf_r+0x2e>
 8008f8a:	e7d6      	b.n	8008f3a <__swbuf_r+0x2a>

08008f8c <__swsetup_r>:
 8008f8c:	b538      	push	{r3, r4, r5, lr}
 8008f8e:	4b29      	ldr	r3, [pc, #164]	@ (8009034 <__swsetup_r+0xa8>)
 8008f90:	4605      	mov	r5, r0
 8008f92:	6818      	ldr	r0, [r3, #0]
 8008f94:	460c      	mov	r4, r1
 8008f96:	b118      	cbz	r0, 8008fa0 <__swsetup_r+0x14>
 8008f98:	6a03      	ldr	r3, [r0, #32]
 8008f9a:	b90b      	cbnz	r3, 8008fa0 <__swsetup_r+0x14>
 8008f9c:	f7fd ffa0 	bl	8006ee0 <__sinit>
 8008fa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fa4:	0719      	lsls	r1, r3, #28
 8008fa6:	d422      	bmi.n	8008fee <__swsetup_r+0x62>
 8008fa8:	06da      	lsls	r2, r3, #27
 8008faa:	d407      	bmi.n	8008fbc <__swsetup_r+0x30>
 8008fac:	2209      	movs	r2, #9
 8008fae:	602a      	str	r2, [r5, #0]
 8008fb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8008fb8:	81a3      	strh	r3, [r4, #12]
 8008fba:	e033      	b.n	8009024 <__swsetup_r+0x98>
 8008fbc:	0758      	lsls	r0, r3, #29
 8008fbe:	d512      	bpl.n	8008fe6 <__swsetup_r+0x5a>
 8008fc0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008fc2:	b141      	cbz	r1, 8008fd6 <__swsetup_r+0x4a>
 8008fc4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008fc8:	4299      	cmp	r1, r3
 8008fca:	d002      	beq.n	8008fd2 <__swsetup_r+0x46>
 8008fcc:	4628      	mov	r0, r5
 8008fce:	f7fe ff0f 	bl	8007df0 <_free_r>
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	6363      	str	r3, [r4, #52]	@ 0x34
 8008fd6:	89a3      	ldrh	r3, [r4, #12]
 8008fd8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008fdc:	81a3      	strh	r3, [r4, #12]
 8008fde:	2300      	movs	r3, #0
 8008fe0:	6063      	str	r3, [r4, #4]
 8008fe2:	6923      	ldr	r3, [r4, #16]
 8008fe4:	6023      	str	r3, [r4, #0]
 8008fe6:	89a3      	ldrh	r3, [r4, #12]
 8008fe8:	f043 0308 	orr.w	r3, r3, #8
 8008fec:	81a3      	strh	r3, [r4, #12]
 8008fee:	6923      	ldr	r3, [r4, #16]
 8008ff0:	b94b      	cbnz	r3, 8009006 <__swsetup_r+0x7a>
 8008ff2:	89a3      	ldrh	r3, [r4, #12]
 8008ff4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008ff8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ffc:	d003      	beq.n	8009006 <__swsetup_r+0x7a>
 8008ffe:	4621      	mov	r1, r4
 8009000:	4628      	mov	r0, r5
 8009002:	f000 f882 	bl	800910a <__smakebuf_r>
 8009006:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800900a:	f013 0201 	ands.w	r2, r3, #1
 800900e:	d00a      	beq.n	8009026 <__swsetup_r+0x9a>
 8009010:	2200      	movs	r2, #0
 8009012:	60a2      	str	r2, [r4, #8]
 8009014:	6962      	ldr	r2, [r4, #20]
 8009016:	4252      	negs	r2, r2
 8009018:	61a2      	str	r2, [r4, #24]
 800901a:	6922      	ldr	r2, [r4, #16]
 800901c:	b942      	cbnz	r2, 8009030 <__swsetup_r+0xa4>
 800901e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009022:	d1c5      	bne.n	8008fb0 <__swsetup_r+0x24>
 8009024:	bd38      	pop	{r3, r4, r5, pc}
 8009026:	0799      	lsls	r1, r3, #30
 8009028:	bf58      	it	pl
 800902a:	6962      	ldrpl	r2, [r4, #20]
 800902c:	60a2      	str	r2, [r4, #8]
 800902e:	e7f4      	b.n	800901a <__swsetup_r+0x8e>
 8009030:	2000      	movs	r0, #0
 8009032:	e7f7      	b.n	8009024 <__swsetup_r+0x98>
 8009034:	20000038 	.word	0x20000038

08009038 <_raise_r>:
 8009038:	291f      	cmp	r1, #31
 800903a:	b538      	push	{r3, r4, r5, lr}
 800903c:	4605      	mov	r5, r0
 800903e:	460c      	mov	r4, r1
 8009040:	d904      	bls.n	800904c <_raise_r+0x14>
 8009042:	2316      	movs	r3, #22
 8009044:	6003      	str	r3, [r0, #0]
 8009046:	f04f 30ff 	mov.w	r0, #4294967295
 800904a:	bd38      	pop	{r3, r4, r5, pc}
 800904c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800904e:	b112      	cbz	r2, 8009056 <_raise_r+0x1e>
 8009050:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009054:	b94b      	cbnz	r3, 800906a <_raise_r+0x32>
 8009056:	4628      	mov	r0, r5
 8009058:	f000 f830 	bl	80090bc <_getpid_r>
 800905c:	4622      	mov	r2, r4
 800905e:	4601      	mov	r1, r0
 8009060:	4628      	mov	r0, r5
 8009062:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009066:	f000 b817 	b.w	8009098 <_kill_r>
 800906a:	2b01      	cmp	r3, #1
 800906c:	d00a      	beq.n	8009084 <_raise_r+0x4c>
 800906e:	1c59      	adds	r1, r3, #1
 8009070:	d103      	bne.n	800907a <_raise_r+0x42>
 8009072:	2316      	movs	r3, #22
 8009074:	6003      	str	r3, [r0, #0]
 8009076:	2001      	movs	r0, #1
 8009078:	e7e7      	b.n	800904a <_raise_r+0x12>
 800907a:	2100      	movs	r1, #0
 800907c:	4620      	mov	r0, r4
 800907e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009082:	4798      	blx	r3
 8009084:	2000      	movs	r0, #0
 8009086:	e7e0      	b.n	800904a <_raise_r+0x12>

08009088 <raise>:
 8009088:	4b02      	ldr	r3, [pc, #8]	@ (8009094 <raise+0xc>)
 800908a:	4601      	mov	r1, r0
 800908c:	6818      	ldr	r0, [r3, #0]
 800908e:	f7ff bfd3 	b.w	8009038 <_raise_r>
 8009092:	bf00      	nop
 8009094:	20000038 	.word	0x20000038

08009098 <_kill_r>:
 8009098:	b538      	push	{r3, r4, r5, lr}
 800909a:	2300      	movs	r3, #0
 800909c:	4d06      	ldr	r5, [pc, #24]	@ (80090b8 <_kill_r+0x20>)
 800909e:	4604      	mov	r4, r0
 80090a0:	4608      	mov	r0, r1
 80090a2:	4611      	mov	r1, r2
 80090a4:	602b      	str	r3, [r5, #0]
 80090a6:	f7f8 faf6 	bl	8001696 <_kill>
 80090aa:	1c43      	adds	r3, r0, #1
 80090ac:	d102      	bne.n	80090b4 <_kill_r+0x1c>
 80090ae:	682b      	ldr	r3, [r5, #0]
 80090b0:	b103      	cbz	r3, 80090b4 <_kill_r+0x1c>
 80090b2:	6023      	str	r3, [r4, #0]
 80090b4:	bd38      	pop	{r3, r4, r5, pc}
 80090b6:	bf00      	nop
 80090b8:	20000458 	.word	0x20000458

080090bc <_getpid_r>:
 80090bc:	f7f8 bae4 	b.w	8001688 <_getpid>

080090c0 <__swhatbuf_r>:
 80090c0:	b570      	push	{r4, r5, r6, lr}
 80090c2:	460c      	mov	r4, r1
 80090c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090c8:	4615      	mov	r5, r2
 80090ca:	2900      	cmp	r1, #0
 80090cc:	461e      	mov	r6, r3
 80090ce:	b096      	sub	sp, #88	@ 0x58
 80090d0:	da0c      	bge.n	80090ec <__swhatbuf_r+0x2c>
 80090d2:	89a3      	ldrh	r3, [r4, #12]
 80090d4:	2100      	movs	r1, #0
 80090d6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80090da:	bf14      	ite	ne
 80090dc:	2340      	movne	r3, #64	@ 0x40
 80090de:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80090e2:	2000      	movs	r0, #0
 80090e4:	6031      	str	r1, [r6, #0]
 80090e6:	602b      	str	r3, [r5, #0]
 80090e8:	b016      	add	sp, #88	@ 0x58
 80090ea:	bd70      	pop	{r4, r5, r6, pc}
 80090ec:	466a      	mov	r2, sp
 80090ee:	f000 f849 	bl	8009184 <_fstat_r>
 80090f2:	2800      	cmp	r0, #0
 80090f4:	dbed      	blt.n	80090d2 <__swhatbuf_r+0x12>
 80090f6:	9901      	ldr	r1, [sp, #4]
 80090f8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80090fc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009100:	4259      	negs	r1, r3
 8009102:	4159      	adcs	r1, r3
 8009104:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009108:	e7eb      	b.n	80090e2 <__swhatbuf_r+0x22>

0800910a <__smakebuf_r>:
 800910a:	898b      	ldrh	r3, [r1, #12]
 800910c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800910e:	079d      	lsls	r5, r3, #30
 8009110:	4606      	mov	r6, r0
 8009112:	460c      	mov	r4, r1
 8009114:	d507      	bpl.n	8009126 <__smakebuf_r+0x1c>
 8009116:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800911a:	6023      	str	r3, [r4, #0]
 800911c:	6123      	str	r3, [r4, #16]
 800911e:	2301      	movs	r3, #1
 8009120:	6163      	str	r3, [r4, #20]
 8009122:	b003      	add	sp, #12
 8009124:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009126:	466a      	mov	r2, sp
 8009128:	ab01      	add	r3, sp, #4
 800912a:	f7ff ffc9 	bl	80090c0 <__swhatbuf_r>
 800912e:	9f00      	ldr	r7, [sp, #0]
 8009130:	4605      	mov	r5, r0
 8009132:	4639      	mov	r1, r7
 8009134:	4630      	mov	r0, r6
 8009136:	f7fe fecd 	bl	8007ed4 <_malloc_r>
 800913a:	b948      	cbnz	r0, 8009150 <__smakebuf_r+0x46>
 800913c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009140:	059a      	lsls	r2, r3, #22
 8009142:	d4ee      	bmi.n	8009122 <__smakebuf_r+0x18>
 8009144:	f023 0303 	bic.w	r3, r3, #3
 8009148:	f043 0302 	orr.w	r3, r3, #2
 800914c:	81a3      	strh	r3, [r4, #12]
 800914e:	e7e2      	b.n	8009116 <__smakebuf_r+0xc>
 8009150:	89a3      	ldrh	r3, [r4, #12]
 8009152:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009156:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800915a:	81a3      	strh	r3, [r4, #12]
 800915c:	9b01      	ldr	r3, [sp, #4]
 800915e:	6020      	str	r0, [r4, #0]
 8009160:	b15b      	cbz	r3, 800917a <__smakebuf_r+0x70>
 8009162:	4630      	mov	r0, r6
 8009164:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009168:	f000 f81e 	bl	80091a8 <_isatty_r>
 800916c:	b128      	cbz	r0, 800917a <__smakebuf_r+0x70>
 800916e:	89a3      	ldrh	r3, [r4, #12]
 8009170:	f023 0303 	bic.w	r3, r3, #3
 8009174:	f043 0301 	orr.w	r3, r3, #1
 8009178:	81a3      	strh	r3, [r4, #12]
 800917a:	89a3      	ldrh	r3, [r4, #12]
 800917c:	431d      	orrs	r5, r3
 800917e:	81a5      	strh	r5, [r4, #12]
 8009180:	e7cf      	b.n	8009122 <__smakebuf_r+0x18>
	...

08009184 <_fstat_r>:
 8009184:	b538      	push	{r3, r4, r5, lr}
 8009186:	2300      	movs	r3, #0
 8009188:	4d06      	ldr	r5, [pc, #24]	@ (80091a4 <_fstat_r+0x20>)
 800918a:	4604      	mov	r4, r0
 800918c:	4608      	mov	r0, r1
 800918e:	4611      	mov	r1, r2
 8009190:	602b      	str	r3, [r5, #0]
 8009192:	f7f8 fadf 	bl	8001754 <_fstat>
 8009196:	1c43      	adds	r3, r0, #1
 8009198:	d102      	bne.n	80091a0 <_fstat_r+0x1c>
 800919a:	682b      	ldr	r3, [r5, #0]
 800919c:	b103      	cbz	r3, 80091a0 <_fstat_r+0x1c>
 800919e:	6023      	str	r3, [r4, #0]
 80091a0:	bd38      	pop	{r3, r4, r5, pc}
 80091a2:	bf00      	nop
 80091a4:	20000458 	.word	0x20000458

080091a8 <_isatty_r>:
 80091a8:	b538      	push	{r3, r4, r5, lr}
 80091aa:	2300      	movs	r3, #0
 80091ac:	4d05      	ldr	r5, [pc, #20]	@ (80091c4 <_isatty_r+0x1c>)
 80091ae:	4604      	mov	r4, r0
 80091b0:	4608      	mov	r0, r1
 80091b2:	602b      	str	r3, [r5, #0]
 80091b4:	f7f8 fadd 	bl	8001772 <_isatty>
 80091b8:	1c43      	adds	r3, r0, #1
 80091ba:	d102      	bne.n	80091c2 <_isatty_r+0x1a>
 80091bc:	682b      	ldr	r3, [r5, #0]
 80091be:	b103      	cbz	r3, 80091c2 <_isatty_r+0x1a>
 80091c0:	6023      	str	r3, [r4, #0]
 80091c2:	bd38      	pop	{r3, r4, r5, pc}
 80091c4:	20000458 	.word	0x20000458

080091c8 <_init>:
 80091c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ca:	bf00      	nop
 80091cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091ce:	bc08      	pop	{r3}
 80091d0:	469e      	mov	lr, r3
 80091d2:	4770      	bx	lr

080091d4 <_fini>:
 80091d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091d6:	bf00      	nop
 80091d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091da:	bc08      	pop	{r3}
 80091dc:	469e      	mov	lr, r3
 80091de:	4770      	bx	lr
